// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                     //                                    hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                   //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                    //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                   //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                  //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                   //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                  //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                   //                                                           .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                  //                                                           .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                  //                                                           .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                      //                                                           .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                    //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                    //                                                           .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                    //                                                           .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                   //                                                           .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                   //                                                           .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                      //                                                           .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                    //                                                           .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                   //                                                           .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                   //                                                           .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                     //                                                           .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                   //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                    //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                   //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                  //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                   //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                  //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                   //                                                           .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                  //                                                           .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                  //                                                           .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                      //                                                           .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                    //                                                           .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                    //                                                           .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                    //                                                           .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                   //                                                           .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                   //                                                           .rready
		input  wire        clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire        fpga_only_master_clk_reset_reset_bridge_in_reset_reset,           //           fpga_only_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        onchip_memory2_0_reset1_reset_bridge_in_reset_reset,              //              onchip_memory2_0_reset1_reset_bridge_in_reset.reset
		input  wire [31:0] fpga_only_master_master_address,                                  //                                    fpga_only_master_master.address
		output wire        fpga_only_master_master_waitrequest,                              //                                                           .waitrequest
		input  wire [3:0]  fpga_only_master_master_byteenable,                               //                                                           .byteenable
		input  wire        fpga_only_master_master_read,                                     //                                                           .read
		output wire [31:0] fpga_only_master_master_readdata,                                 //                                                           .readdata
		output wire        fpga_only_master_master_readdatavalid,                            //                                                           .readdatavalid
		input  wire        fpga_only_master_master_write,                                    //                                                           .write
		input  wire [31:0] fpga_only_master_master_writedata,                                //                                                           .writedata
		output wire [2:0]  adc_0_adc_slave_address,                                          //                                            adc_0_adc_slave.address
		output wire        adc_0_adc_slave_write,                                            //                                                           .write
		output wire        adc_0_adc_slave_read,                                             //                                                           .read
		input  wire [31:0] adc_0_adc_slave_readdata,                                         //                                                           .readdata
		output wire [31:0] adc_0_adc_slave_writedata,                                        //                                                           .writedata
		input  wire        adc_0_adc_slave_waitrequest,                                      //                                                           .waitrequest
		output wire [1:0]  button_pio_s1_address,                                            //                                              button_pio_s1.address
		output wire        button_pio_s1_write,                                              //                                                           .write
		input  wire [31:0] button_pio_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] button_pio_s1_writedata,                                          //                                                           .writedata
		output wire        button_pio_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  dipsw_pio_s1_address,                                             //                                               dipsw_pio_s1.address
		output wire        dipsw_pio_s1_write,                                               //                                                           .write
		input  wire [31:0] dipsw_pio_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] dipsw_pio_s1_writedata,                                           //                                                           .writedata
		output wire        dipsw_pio_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  e_stop_s1_address,                                                //                                                  e_stop_s1.address
		input  wire [31:0] e_stop_s1_readdata,                                               //                                                           .readdata
		output wire [1:0]  gpio_pio_0_s1_address,                                            //                                              gpio_pio_0_s1.address
		output wire        gpio_pio_0_s1_write,                                              //                                                           .write
		input  wire [31:0] gpio_pio_0_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] gpio_pio_0_s1_writedata,                                          //                                                           .writedata
		output wire        gpio_pio_0_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  gpio_pio_1_s1_address,                                            //                                              gpio_pio_1_s1.address
		output wire        gpio_pio_1_s1_write,                                              //                                                           .write
		input  wire [31:0] gpio_pio_1_s1_readdata,                                           //                                                           .readdata
		output wire [31:0] gpio_pio_1_s1_writedata,                                          //                                                           .writedata
		output wire        gpio_pio_1_s1_chipselect,                                         //                                                           .chipselect
		output wire [1:0]  heartbeat_s1_address,                                             //                                               heartbeat_s1.address
		output wire        heartbeat_s1_write,                                               //                                                           .write
		input  wire [31:0] heartbeat_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] heartbeat_s1_writedata,                                           //                                                           .writedata
		output wire        heartbeat_s1_chipselect,                                          //                                                           .chipselect
		output wire [0:0]  intr_capturer_0_avalon_slave_0_address,                           //                             intr_capturer_0_avalon_slave_0.address
		output wire        intr_capturer_0_avalon_slave_0_read,                              //                                                           .read
		input  wire [31:0] intr_capturer_0_avalon_slave_0_readdata,                          //                                                           .readdata
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                              //                                jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                //                                                           .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                 //                                                           .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                             //                                                           .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                            //                                                           .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                          //                                                           .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                           //                                                           .chipselect
		output wire [1:0]  led_pio_s1_address,                                               //                                                 led_pio_s1.address
		output wire        led_pio_s1_write,                                                 //                                                           .write
		input  wire [31:0] led_pio_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] led_pio_s1_writedata,                                             //                                                           .writedata
		output wire        led_pio_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  limit_pio_s1_address,                                             //                                               limit_pio_s1.address
		input  wire [31:0] limit_pio_s1_readdata,                                            //                                                           .readdata
		output wire [12:0] onchip_memory2_0_s1_address,                                      //                                        onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                        //                                                           .write
		input  wire [63:0] onchip_memory2_0_s1_readdata,                                     //                                                           .readdata
		output wire [63:0] onchip_memory2_0_s1_writedata,                                    //                                                           .writedata
		output wire [7:0]  onchip_memory2_0_s1_byteenable,                                   //                                                           .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                                   //                                                           .chipselect
		output wire        onchip_memory2_0_s1_clken,                                        //                                                           .clken
		output wire [1:0]  pid_correction_pio_0_s1_address,                                  //                                    pid_correction_pio_0_s1.address
		input  wire [31:0] pid_correction_pio_0_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_1_s1_address,                                  //                                    pid_correction_pio_1_s1.address
		input  wire [31:0] pid_correction_pio_1_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_2_s1_address,                                  //                                    pid_correction_pio_2_s1.address
		input  wire [31:0] pid_correction_pio_2_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_3_s1_address,                                  //                                    pid_correction_pio_3_s1.address
		input  wire [31:0] pid_correction_pio_3_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_4_s1_address,                                  //                                    pid_correction_pio_4_s1.address
		input  wire [31:0] pid_correction_pio_4_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_5_s1_address,                                  //                                    pid_correction_pio_5_s1.address
		input  wire [31:0] pid_correction_pio_5_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_6_s1_address,                                  //                                    pid_correction_pio_6_s1.address
		input  wire [31:0] pid_correction_pio_6_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_correction_pio_7_s1_address,                                  //                                    pid_correction_pio_7_s1.address
		input  wire [31:0] pid_correction_pio_7_s1_readdata,                                 //                                                           .readdata
		output wire [1:0]  pid_error_pio_0_s1_address,                                       //                                         pid_error_pio_0_s1.address
		output wire        pid_error_pio_0_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_0_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_0_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_0_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_1_s1_address,                                       //                                         pid_error_pio_1_s1.address
		output wire        pid_error_pio_1_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_1_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_1_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_1_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_2_s1_address,                                       //                                         pid_error_pio_2_s1.address
		output wire        pid_error_pio_2_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_2_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_2_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_2_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_3_s1_address,                                       //                                         pid_error_pio_3_s1.address
		output wire        pid_error_pio_3_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_3_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_3_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_3_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_4_s1_address,                                       //                                         pid_error_pio_4_s1.address
		output wire        pid_error_pio_4_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_4_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_4_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_4_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_5_s1_address,                                       //                                         pid_error_pio_5_s1.address
		output wire        pid_error_pio_5_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_5_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_5_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_5_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_6_s1_address,                                       //                                         pid_error_pio_6_s1.address
		output wire        pid_error_pio_6_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_6_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_6_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_6_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_error_pio_7_s1_address,                                       //                                         pid_error_pio_7_s1.address
		output wire        pid_error_pio_7_s1_write,                                         //                                                           .write
		input  wire [31:0] pid_error_pio_7_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] pid_error_pio_7_s1_writedata,                                     //                                                           .writedata
		output wire        pid_error_pio_7_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  pid_values_pio_s1_address,                                        //                                          pid_values_pio_s1.address
		output wire        pid_values_pio_s1_write,                                          //                                                           .write
		input  wire [31:0] pid_values_pio_s1_readdata,                                       //                                                           .readdata
		output wire [31:0] pid_values_pio_s1_writedata,                                      //                                                           .writedata
		output wire        pid_values_pio_s1_chipselect,                                     //                                                           .chipselect
		output wire [1:0]  pwm_pio_0_s1_address,                                             //                                               pwm_pio_0_s1.address
		output wire        pwm_pio_0_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_0_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_0_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_0_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_1_s1_address,                                             //                                               pwm_pio_1_s1.address
		output wire        pwm_pio_1_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_1_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_1_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_1_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_2_s1_address,                                             //                                               pwm_pio_2_s1.address
		output wire        pwm_pio_2_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_2_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_2_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_2_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_3_s1_address,                                             //                                               pwm_pio_3_s1.address
		output wire        pwm_pio_3_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_3_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_3_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_3_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_4_s1_address,                                             //                                               pwm_pio_4_s1.address
		output wire        pwm_pio_4_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_4_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_4_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_4_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_5_s1_address,                                             //                                               pwm_pio_5_s1.address
		output wire        pwm_pio_5_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_5_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_5_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_5_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_6_s1_address,                                             //                                               pwm_pio_6_s1.address
		output wire        pwm_pio_6_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_6_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_6_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_6_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  pwm_pio_7_s1_address,                                             //                                               pwm_pio_7_s1.address
		output wire        pwm_pio_7_s1_write,                                               //                                                           .write
		input  wire [31:0] pwm_pio_7_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] pwm_pio_7_s1_writedata,                                           //                                                           .writedata
		output wire        pwm_pio_7_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  quad_pio_0_s1_address,                                            //                                              quad_pio_0_s1.address
		input  wire [31:0] quad_pio_0_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_1_s1_address,                                            //                                              quad_pio_1_s1.address
		input  wire [31:0] quad_pio_1_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_10_s1_address,                                           //                                             quad_pio_10_s1.address
		input  wire [31:0] quad_pio_10_s1_readdata,                                          //                                                           .readdata
		output wire [1:0]  quad_pio_11_s1_address,                                           //                                             quad_pio_11_s1.address
		input  wire [31:0] quad_pio_11_s1_readdata,                                          //                                                           .readdata
		output wire [1:0]  quad_pio_2_s1_address,                                            //                                              quad_pio_2_s1.address
		input  wire [31:0] quad_pio_2_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_3_s1_address,                                            //                                              quad_pio_3_s1.address
		input  wire [31:0] quad_pio_3_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_4_s1_address,                                            //                                              quad_pio_4_s1.address
		input  wire [31:0] quad_pio_4_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_5_s1_address,                                            //                                              quad_pio_5_s1.address
		input  wire [31:0] quad_pio_5_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_6_s1_address,                                            //                                              quad_pio_6_s1.address
		input  wire [31:0] quad_pio_6_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_7_s1_address,                                            //                                              quad_pio_7_s1.address
		input  wire [31:0] quad_pio_7_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_8_s1_address,                                            //                                              quad_pio_8_s1.address
		input  wire [31:0] quad_pio_8_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_pio_9_s1_address,                                            //                                              quad_pio_9_s1.address
		input  wire [31:0] quad_pio_9_s1_readdata,                                           //                                                           .readdata
		output wire [1:0]  quad_reset_pio_s1_address,                                        //                                          quad_reset_pio_s1.address
		output wire        quad_reset_pio_s1_write,                                          //                                                           .write
		input  wire [31:0] quad_reset_pio_s1_readdata,                                       //                                                           .readdata
		output wire [31:0] quad_reset_pio_s1_writedata,                                      //                                                           .writedata
		output wire        quad_reset_pio_s1_chipselect,                                     //                                                           .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata                                 //                                                           .readdata
	);

	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [170:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                                  // hps_0_h2f_axi_master_agent:write_rp_ready -> rsp_mux:src_ready
	wire   [50:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [170:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                              // hps_0_h2f_axi_master_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire   [50:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          fpga_only_master_master_translator_avalon_universal_master_0_waitrequest;           // fpga_only_master_master_agent:av_waitrequest -> fpga_only_master_master_translator:uav_waitrequest
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_readdata;              // fpga_only_master_master_agent:av_readdata -> fpga_only_master_master_translator:uav_readdata
	wire          fpga_only_master_master_translator_avalon_universal_master_0_debugaccess;           // fpga_only_master_master_translator:uav_debugaccess -> fpga_only_master_master_agent:av_debugaccess
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_address;               // fpga_only_master_master_translator:uav_address -> fpga_only_master_master_agent:av_address
	wire          fpga_only_master_master_translator_avalon_universal_master_0_read;                  // fpga_only_master_master_translator:uav_read -> fpga_only_master_master_agent:av_read
	wire    [3:0] fpga_only_master_master_translator_avalon_universal_master_0_byteenable;            // fpga_only_master_master_translator:uav_byteenable -> fpga_only_master_master_agent:av_byteenable
	wire          fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid;         // fpga_only_master_master_agent:av_readdatavalid -> fpga_only_master_master_translator:uav_readdatavalid
	wire          fpga_only_master_master_translator_avalon_universal_master_0_lock;                  // fpga_only_master_master_translator:uav_lock -> fpga_only_master_master_agent:av_lock
	wire          fpga_only_master_master_translator_avalon_universal_master_0_write;                 // fpga_only_master_master_translator:uav_write -> fpga_only_master_master_agent:av_write
	wire   [31:0] fpga_only_master_master_translator_avalon_universal_master_0_writedata;             // fpga_only_master_master_translator:uav_writedata -> fpga_only_master_master_agent:av_writedata
	wire    [2:0] fpga_only_master_master_translator_avalon_universal_master_0_burstcount;            // fpga_only_master_master_translator:uav_burstcount -> fpga_only_master_master_agent:av_burstcount
	wire   [63:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [7:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [3:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [171:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [171:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] adc_0_adc_slave_agent_m0_readdata;                                                  // adc_0_adc_slave_translator:uav_readdata -> adc_0_adc_slave_agent:m0_readdata
	wire          adc_0_adc_slave_agent_m0_waitrequest;                                               // adc_0_adc_slave_translator:uav_waitrequest -> adc_0_adc_slave_agent:m0_waitrequest
	wire          adc_0_adc_slave_agent_m0_debugaccess;                                               // adc_0_adc_slave_agent:m0_debugaccess -> adc_0_adc_slave_translator:uav_debugaccess
	wire   [31:0] adc_0_adc_slave_agent_m0_address;                                                   // adc_0_adc_slave_agent:m0_address -> adc_0_adc_slave_translator:uav_address
	wire    [3:0] adc_0_adc_slave_agent_m0_byteenable;                                                // adc_0_adc_slave_agent:m0_byteenable -> adc_0_adc_slave_translator:uav_byteenable
	wire          adc_0_adc_slave_agent_m0_read;                                                      // adc_0_adc_slave_agent:m0_read -> adc_0_adc_slave_translator:uav_read
	wire          adc_0_adc_slave_agent_m0_readdatavalid;                                             // adc_0_adc_slave_translator:uav_readdatavalid -> adc_0_adc_slave_agent:m0_readdatavalid
	wire          adc_0_adc_slave_agent_m0_lock;                                                      // adc_0_adc_slave_agent:m0_lock -> adc_0_adc_slave_translator:uav_lock
	wire   [31:0] adc_0_adc_slave_agent_m0_writedata;                                                 // adc_0_adc_slave_agent:m0_writedata -> adc_0_adc_slave_translator:uav_writedata
	wire          adc_0_adc_slave_agent_m0_write;                                                     // adc_0_adc_slave_agent:m0_write -> adc_0_adc_slave_translator:uav_write
	wire    [2:0] adc_0_adc_slave_agent_m0_burstcount;                                                // adc_0_adc_slave_agent:m0_burstcount -> adc_0_adc_slave_translator:uav_burstcount
	wire          adc_0_adc_slave_agent_rf_source_valid;                                              // adc_0_adc_slave_agent:rf_source_valid -> adc_0_adc_slave_agent_rsp_fifo:in_valid
	wire  [135:0] adc_0_adc_slave_agent_rf_source_data;                                               // adc_0_adc_slave_agent:rf_source_data -> adc_0_adc_slave_agent_rsp_fifo:in_data
	wire          adc_0_adc_slave_agent_rf_source_ready;                                              // adc_0_adc_slave_agent_rsp_fifo:in_ready -> adc_0_adc_slave_agent:rf_source_ready
	wire          adc_0_adc_slave_agent_rf_source_startofpacket;                                      // adc_0_adc_slave_agent:rf_source_startofpacket -> adc_0_adc_slave_agent_rsp_fifo:in_startofpacket
	wire          adc_0_adc_slave_agent_rf_source_endofpacket;                                        // adc_0_adc_slave_agent:rf_source_endofpacket -> adc_0_adc_slave_agent_rsp_fifo:in_endofpacket
	wire          adc_0_adc_slave_agent_rsp_fifo_out_valid;                                           // adc_0_adc_slave_agent_rsp_fifo:out_valid -> adc_0_adc_slave_agent:rf_sink_valid
	wire  [135:0] adc_0_adc_slave_agent_rsp_fifo_out_data;                                            // adc_0_adc_slave_agent_rsp_fifo:out_data -> adc_0_adc_slave_agent:rf_sink_data
	wire          adc_0_adc_slave_agent_rsp_fifo_out_ready;                                           // adc_0_adc_slave_agent:rf_sink_ready -> adc_0_adc_slave_agent_rsp_fifo:out_ready
	wire          adc_0_adc_slave_agent_rsp_fifo_out_startofpacket;                                   // adc_0_adc_slave_agent_rsp_fifo:out_startofpacket -> adc_0_adc_slave_agent:rf_sink_startofpacket
	wire          adc_0_adc_slave_agent_rsp_fifo_out_endofpacket;                                     // adc_0_adc_slave_agent_rsp_fifo:out_endofpacket -> adc_0_adc_slave_agent:rf_sink_endofpacket
	wire          adc_0_adc_slave_agent_rdata_fifo_src_valid;                                         // adc_0_adc_slave_agent:rdata_fifo_src_valid -> adc_0_adc_slave_agent_rdata_fifo:in_valid
	wire   [33:0] adc_0_adc_slave_agent_rdata_fifo_src_data;                                          // adc_0_adc_slave_agent:rdata_fifo_src_data -> adc_0_adc_slave_agent_rdata_fifo:in_data
	wire          adc_0_adc_slave_agent_rdata_fifo_src_ready;                                         // adc_0_adc_slave_agent_rdata_fifo:in_ready -> adc_0_adc_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                      // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                   // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                   // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                       // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                    // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                          // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                 // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                          // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                     // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                         // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                    // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                  // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [135:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [135:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                               // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_readdata;                                   // intr_capturer_0_avalon_slave_0_translator:uav_readdata -> intr_capturer_0_avalon_slave_0_agent:m0_readdata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_waitrequest;                                // intr_capturer_0_avalon_slave_0_translator:uav_waitrequest -> intr_capturer_0_avalon_slave_0_agent:m0_waitrequest
	wire          intr_capturer_0_avalon_slave_0_agent_m0_debugaccess;                                // intr_capturer_0_avalon_slave_0_agent:m0_debugaccess -> intr_capturer_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_address;                                    // intr_capturer_0_avalon_slave_0_agent:m0_address -> intr_capturer_0_avalon_slave_0_translator:uav_address
	wire    [3:0] intr_capturer_0_avalon_slave_0_agent_m0_byteenable;                                 // intr_capturer_0_avalon_slave_0_agent:m0_byteenable -> intr_capturer_0_avalon_slave_0_translator:uav_byteenable
	wire          intr_capturer_0_avalon_slave_0_agent_m0_read;                                       // intr_capturer_0_avalon_slave_0_agent:m0_read -> intr_capturer_0_avalon_slave_0_translator:uav_read
	wire          intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid;                              // intr_capturer_0_avalon_slave_0_translator:uav_readdatavalid -> intr_capturer_0_avalon_slave_0_agent:m0_readdatavalid
	wire          intr_capturer_0_avalon_slave_0_agent_m0_lock;                                       // intr_capturer_0_avalon_slave_0_agent:m0_lock -> intr_capturer_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] intr_capturer_0_avalon_slave_0_agent_m0_writedata;                                  // intr_capturer_0_avalon_slave_0_agent:m0_writedata -> intr_capturer_0_avalon_slave_0_translator:uav_writedata
	wire          intr_capturer_0_avalon_slave_0_agent_m0_write;                                      // intr_capturer_0_avalon_slave_0_agent:m0_write -> intr_capturer_0_avalon_slave_0_translator:uav_write
	wire    [2:0] intr_capturer_0_avalon_slave_0_agent_m0_burstcount;                                 // intr_capturer_0_avalon_slave_0_agent:m0_burstcount -> intr_capturer_0_avalon_slave_0_translator:uav_burstcount
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_valid;                               // intr_capturer_0_avalon_slave_0_agent:rf_source_valid -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [135:0] intr_capturer_0_avalon_slave_0_agent_rf_source_data;                                // intr_capturer_0_avalon_slave_0_agent:rf_source_data -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_ready;                               // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rf_source_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket;                       // intr_capturer_0_avalon_slave_0_agent:rf_source_startofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket;                         // intr_capturer_0_avalon_slave_0_agent:rf_source_endofpacket -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid;                            // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_valid -> intr_capturer_0_avalon_slave_0_agent:rf_sink_valid
	wire  [135:0] intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data;                             // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_data -> intr_capturer_0_avalon_slave_0_agent:rf_sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready;                            // intr_capturer_0_avalon_slave_0_agent:rf_sink_ready -> intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                    // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                      // intr_capturer_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> intr_capturer_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid;                          // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_valid -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data;                           // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_data -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready;                          // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:in_ready -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> intr_capturer_0_avalon_slave_0_agent:cp_valid
	wire  [134:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> intr_capturer_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // intr_capturer_0_avalon_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [50:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> intr_capturer_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> intr_capturer_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                         // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                      // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                      // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_control_slave_agent_m0_address;                                          // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                       // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                             // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                    // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                             // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                        // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                            // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                       // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                     // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [135:0] sysid_qsys_control_slave_agent_rf_source_data;                                      // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                     // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                             // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                               // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                  // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [135:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                   // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                  // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                            // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                                // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                 // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                                // sysid_qsys_control_slave_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dipsw_pio_s1_agent_m0_readdata;                                                     // dipsw_pio_s1_translator:uav_readdata -> dipsw_pio_s1_agent:m0_readdata
	wire          dipsw_pio_s1_agent_m0_waitrequest;                                                  // dipsw_pio_s1_translator:uav_waitrequest -> dipsw_pio_s1_agent:m0_waitrequest
	wire          dipsw_pio_s1_agent_m0_debugaccess;                                                  // dipsw_pio_s1_agent:m0_debugaccess -> dipsw_pio_s1_translator:uav_debugaccess
	wire   [31:0] dipsw_pio_s1_agent_m0_address;                                                      // dipsw_pio_s1_agent:m0_address -> dipsw_pio_s1_translator:uav_address
	wire    [3:0] dipsw_pio_s1_agent_m0_byteenable;                                                   // dipsw_pio_s1_agent:m0_byteenable -> dipsw_pio_s1_translator:uav_byteenable
	wire          dipsw_pio_s1_agent_m0_read;                                                         // dipsw_pio_s1_agent:m0_read -> dipsw_pio_s1_translator:uav_read
	wire          dipsw_pio_s1_agent_m0_readdatavalid;                                                // dipsw_pio_s1_translator:uav_readdatavalid -> dipsw_pio_s1_agent:m0_readdatavalid
	wire          dipsw_pio_s1_agent_m0_lock;                                                         // dipsw_pio_s1_agent:m0_lock -> dipsw_pio_s1_translator:uav_lock
	wire   [31:0] dipsw_pio_s1_agent_m0_writedata;                                                    // dipsw_pio_s1_agent:m0_writedata -> dipsw_pio_s1_translator:uav_writedata
	wire          dipsw_pio_s1_agent_m0_write;                                                        // dipsw_pio_s1_agent:m0_write -> dipsw_pio_s1_translator:uav_write
	wire    [2:0] dipsw_pio_s1_agent_m0_burstcount;                                                   // dipsw_pio_s1_agent:m0_burstcount -> dipsw_pio_s1_translator:uav_burstcount
	wire          dipsw_pio_s1_agent_rf_source_valid;                                                 // dipsw_pio_s1_agent:rf_source_valid -> dipsw_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] dipsw_pio_s1_agent_rf_source_data;                                                  // dipsw_pio_s1_agent:rf_source_data -> dipsw_pio_s1_agent_rsp_fifo:in_data
	wire          dipsw_pio_s1_agent_rf_source_ready;                                                 // dipsw_pio_s1_agent_rsp_fifo:in_ready -> dipsw_pio_s1_agent:rf_source_ready
	wire          dipsw_pio_s1_agent_rf_source_startofpacket;                                         // dipsw_pio_s1_agent:rf_source_startofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          dipsw_pio_s1_agent_rf_source_endofpacket;                                           // dipsw_pio_s1_agent:rf_source_endofpacket -> dipsw_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_valid;                                              // dipsw_pio_s1_agent_rsp_fifo:out_valid -> dipsw_pio_s1_agent:rf_sink_valid
	wire  [135:0] dipsw_pio_s1_agent_rsp_fifo_out_data;                                               // dipsw_pio_s1_agent_rsp_fifo:out_data -> dipsw_pio_s1_agent:rf_sink_data
	wire          dipsw_pio_s1_agent_rsp_fifo_out_ready;                                              // dipsw_pio_s1_agent:rf_sink_ready -> dipsw_pio_s1_agent_rsp_fifo:out_ready
	wire          dipsw_pio_s1_agent_rsp_fifo_out_startofpacket;                                      // dipsw_pio_s1_agent_rsp_fifo:out_startofpacket -> dipsw_pio_s1_agent:rf_sink_startofpacket
	wire          dipsw_pio_s1_agent_rsp_fifo_out_endofpacket;                                        // dipsw_pio_s1_agent_rsp_fifo:out_endofpacket -> dipsw_pio_s1_agent:rf_sink_endofpacket
	wire          dipsw_pio_s1_agent_rdata_fifo_src_valid;                                            // dipsw_pio_s1_agent:rdata_fifo_src_valid -> dipsw_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_src_data;                                             // dipsw_pio_s1_agent:rdata_fifo_src_data -> dipsw_pio_s1_agent_rdata_fifo:in_data
	wire          dipsw_pio_s1_agent_rdata_fifo_src_ready;                                            // dipsw_pio_s1_agent_rdata_fifo:in_ready -> dipsw_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] button_pio_s1_agent_m0_readdata;                                                    // button_pio_s1_translator:uav_readdata -> button_pio_s1_agent:m0_readdata
	wire          button_pio_s1_agent_m0_waitrequest;                                                 // button_pio_s1_translator:uav_waitrequest -> button_pio_s1_agent:m0_waitrequest
	wire          button_pio_s1_agent_m0_debugaccess;                                                 // button_pio_s1_agent:m0_debugaccess -> button_pio_s1_translator:uav_debugaccess
	wire   [31:0] button_pio_s1_agent_m0_address;                                                     // button_pio_s1_agent:m0_address -> button_pio_s1_translator:uav_address
	wire    [3:0] button_pio_s1_agent_m0_byteenable;                                                  // button_pio_s1_agent:m0_byteenable -> button_pio_s1_translator:uav_byteenable
	wire          button_pio_s1_agent_m0_read;                                                        // button_pio_s1_agent:m0_read -> button_pio_s1_translator:uav_read
	wire          button_pio_s1_agent_m0_readdatavalid;                                               // button_pio_s1_translator:uav_readdatavalid -> button_pio_s1_agent:m0_readdatavalid
	wire          button_pio_s1_agent_m0_lock;                                                        // button_pio_s1_agent:m0_lock -> button_pio_s1_translator:uav_lock
	wire   [31:0] button_pio_s1_agent_m0_writedata;                                                   // button_pio_s1_agent:m0_writedata -> button_pio_s1_translator:uav_writedata
	wire          button_pio_s1_agent_m0_write;                                                       // button_pio_s1_agent:m0_write -> button_pio_s1_translator:uav_write
	wire    [2:0] button_pio_s1_agent_m0_burstcount;                                                  // button_pio_s1_agent:m0_burstcount -> button_pio_s1_translator:uav_burstcount
	wire          button_pio_s1_agent_rf_source_valid;                                                // button_pio_s1_agent:rf_source_valid -> button_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] button_pio_s1_agent_rf_source_data;                                                 // button_pio_s1_agent:rf_source_data -> button_pio_s1_agent_rsp_fifo:in_data
	wire          button_pio_s1_agent_rf_source_ready;                                                // button_pio_s1_agent_rsp_fifo:in_ready -> button_pio_s1_agent:rf_source_ready
	wire          button_pio_s1_agent_rf_source_startofpacket;                                        // button_pio_s1_agent:rf_source_startofpacket -> button_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          button_pio_s1_agent_rf_source_endofpacket;                                          // button_pio_s1_agent:rf_source_endofpacket -> button_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_valid;                                             // button_pio_s1_agent_rsp_fifo:out_valid -> button_pio_s1_agent:rf_sink_valid
	wire  [135:0] button_pio_s1_agent_rsp_fifo_out_data;                                              // button_pio_s1_agent_rsp_fifo:out_data -> button_pio_s1_agent:rf_sink_data
	wire          button_pio_s1_agent_rsp_fifo_out_ready;                                             // button_pio_s1_agent:rf_sink_ready -> button_pio_s1_agent_rsp_fifo:out_ready
	wire          button_pio_s1_agent_rsp_fifo_out_startofpacket;                                     // button_pio_s1_agent_rsp_fifo:out_startofpacket -> button_pio_s1_agent:rf_sink_startofpacket
	wire          button_pio_s1_agent_rsp_fifo_out_endofpacket;                                       // button_pio_s1_agent_rsp_fifo:out_endofpacket -> button_pio_s1_agent:rf_sink_endofpacket
	wire          button_pio_s1_agent_rdata_fifo_src_valid;                                           // button_pio_s1_agent:rdata_fifo_src_valid -> button_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_src_data;                                            // button_pio_s1_agent:rdata_fifo_src_data -> button_pio_s1_agent_rdata_fifo:in_data
	wire          button_pio_s1_agent_rdata_fifo_src_ready;                                           // button_pio_s1_agent_rdata_fifo:in_ready -> button_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] gpio_pio_0_s1_agent_m0_readdata;                                                    // gpio_pio_0_s1_translator:uav_readdata -> gpio_pio_0_s1_agent:m0_readdata
	wire          gpio_pio_0_s1_agent_m0_waitrequest;                                                 // gpio_pio_0_s1_translator:uav_waitrequest -> gpio_pio_0_s1_agent:m0_waitrequest
	wire          gpio_pio_0_s1_agent_m0_debugaccess;                                                 // gpio_pio_0_s1_agent:m0_debugaccess -> gpio_pio_0_s1_translator:uav_debugaccess
	wire   [31:0] gpio_pio_0_s1_agent_m0_address;                                                     // gpio_pio_0_s1_agent:m0_address -> gpio_pio_0_s1_translator:uav_address
	wire    [3:0] gpio_pio_0_s1_agent_m0_byteenable;                                                  // gpio_pio_0_s1_agent:m0_byteenable -> gpio_pio_0_s1_translator:uav_byteenable
	wire          gpio_pio_0_s1_agent_m0_read;                                                        // gpio_pio_0_s1_agent:m0_read -> gpio_pio_0_s1_translator:uav_read
	wire          gpio_pio_0_s1_agent_m0_readdatavalid;                                               // gpio_pio_0_s1_translator:uav_readdatavalid -> gpio_pio_0_s1_agent:m0_readdatavalid
	wire          gpio_pio_0_s1_agent_m0_lock;                                                        // gpio_pio_0_s1_agent:m0_lock -> gpio_pio_0_s1_translator:uav_lock
	wire   [31:0] gpio_pio_0_s1_agent_m0_writedata;                                                   // gpio_pio_0_s1_agent:m0_writedata -> gpio_pio_0_s1_translator:uav_writedata
	wire          gpio_pio_0_s1_agent_m0_write;                                                       // gpio_pio_0_s1_agent:m0_write -> gpio_pio_0_s1_translator:uav_write
	wire    [2:0] gpio_pio_0_s1_agent_m0_burstcount;                                                  // gpio_pio_0_s1_agent:m0_burstcount -> gpio_pio_0_s1_translator:uav_burstcount
	wire          gpio_pio_0_s1_agent_rf_source_valid;                                                // gpio_pio_0_s1_agent:rf_source_valid -> gpio_pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] gpio_pio_0_s1_agent_rf_source_data;                                                 // gpio_pio_0_s1_agent:rf_source_data -> gpio_pio_0_s1_agent_rsp_fifo:in_data
	wire          gpio_pio_0_s1_agent_rf_source_ready;                                                // gpio_pio_0_s1_agent_rsp_fifo:in_ready -> gpio_pio_0_s1_agent:rf_source_ready
	wire          gpio_pio_0_s1_agent_rf_source_startofpacket;                                        // gpio_pio_0_s1_agent:rf_source_startofpacket -> gpio_pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          gpio_pio_0_s1_agent_rf_source_endofpacket;                                          // gpio_pio_0_s1_agent:rf_source_endofpacket -> gpio_pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          gpio_pio_0_s1_agent_rsp_fifo_out_valid;                                             // gpio_pio_0_s1_agent_rsp_fifo:out_valid -> gpio_pio_0_s1_agent:rf_sink_valid
	wire  [135:0] gpio_pio_0_s1_agent_rsp_fifo_out_data;                                              // gpio_pio_0_s1_agent_rsp_fifo:out_data -> gpio_pio_0_s1_agent:rf_sink_data
	wire          gpio_pio_0_s1_agent_rsp_fifo_out_ready;                                             // gpio_pio_0_s1_agent:rf_sink_ready -> gpio_pio_0_s1_agent_rsp_fifo:out_ready
	wire          gpio_pio_0_s1_agent_rsp_fifo_out_startofpacket;                                     // gpio_pio_0_s1_agent_rsp_fifo:out_startofpacket -> gpio_pio_0_s1_agent:rf_sink_startofpacket
	wire          gpio_pio_0_s1_agent_rsp_fifo_out_endofpacket;                                       // gpio_pio_0_s1_agent_rsp_fifo:out_endofpacket -> gpio_pio_0_s1_agent:rf_sink_endofpacket
	wire          gpio_pio_0_s1_agent_rdata_fifo_src_valid;                                           // gpio_pio_0_s1_agent:rdata_fifo_src_valid -> gpio_pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpio_pio_0_s1_agent_rdata_fifo_src_data;                                            // gpio_pio_0_s1_agent:rdata_fifo_src_data -> gpio_pio_0_s1_agent_rdata_fifo:in_data
	wire          gpio_pio_0_s1_agent_rdata_fifo_src_ready;                                           // gpio_pio_0_s1_agent_rdata_fifo:in_ready -> gpio_pio_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                                       // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                                    // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                                    // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [31:0] led_pio_s1_agent_m0_address;                                                        // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                                     // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                                           // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                                  // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                                           // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                                      // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                                          // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                                     // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                                   // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] led_pio_s1_agent_rf_source_data;                                                    // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                                   // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                                           // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                                             // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                                                // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [135:0] led_pio_s1_agent_rsp_fifo_out_data;                                                 // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                                                // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                                        // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                                          // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                                              // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                               // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent_rdata_fifo:in_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                                              // led_pio_s1_agent_rdata_fifo:in_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_0_s1_agent_m0_readdata;                                                    // quad_pio_0_s1_translator:uav_readdata -> quad_pio_0_s1_agent:m0_readdata
	wire          quad_pio_0_s1_agent_m0_waitrequest;                                                 // quad_pio_0_s1_translator:uav_waitrequest -> quad_pio_0_s1_agent:m0_waitrequest
	wire          quad_pio_0_s1_agent_m0_debugaccess;                                                 // quad_pio_0_s1_agent:m0_debugaccess -> quad_pio_0_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_0_s1_agent_m0_address;                                                     // quad_pio_0_s1_agent:m0_address -> quad_pio_0_s1_translator:uav_address
	wire    [3:0] quad_pio_0_s1_agent_m0_byteenable;                                                  // quad_pio_0_s1_agent:m0_byteenable -> quad_pio_0_s1_translator:uav_byteenable
	wire          quad_pio_0_s1_agent_m0_read;                                                        // quad_pio_0_s1_agent:m0_read -> quad_pio_0_s1_translator:uav_read
	wire          quad_pio_0_s1_agent_m0_readdatavalid;                                               // quad_pio_0_s1_translator:uav_readdatavalid -> quad_pio_0_s1_agent:m0_readdatavalid
	wire          quad_pio_0_s1_agent_m0_lock;                                                        // quad_pio_0_s1_agent:m0_lock -> quad_pio_0_s1_translator:uav_lock
	wire   [31:0] quad_pio_0_s1_agent_m0_writedata;                                                   // quad_pio_0_s1_agent:m0_writedata -> quad_pio_0_s1_translator:uav_writedata
	wire          quad_pio_0_s1_agent_m0_write;                                                       // quad_pio_0_s1_agent:m0_write -> quad_pio_0_s1_translator:uav_write
	wire    [2:0] quad_pio_0_s1_agent_m0_burstcount;                                                  // quad_pio_0_s1_agent:m0_burstcount -> quad_pio_0_s1_translator:uav_burstcount
	wire          quad_pio_0_s1_agent_rf_source_valid;                                                // quad_pio_0_s1_agent:rf_source_valid -> quad_pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_0_s1_agent_rf_source_data;                                                 // quad_pio_0_s1_agent:rf_source_data -> quad_pio_0_s1_agent_rsp_fifo:in_data
	wire          quad_pio_0_s1_agent_rf_source_ready;                                                // quad_pio_0_s1_agent_rsp_fifo:in_ready -> quad_pio_0_s1_agent:rf_source_ready
	wire          quad_pio_0_s1_agent_rf_source_startofpacket;                                        // quad_pio_0_s1_agent:rf_source_startofpacket -> quad_pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_0_s1_agent_rf_source_endofpacket;                                          // quad_pio_0_s1_agent:rf_source_endofpacket -> quad_pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_0_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_0_s1_agent_rsp_fifo:out_valid -> quad_pio_0_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_0_s1_agent_rsp_fifo_out_data;                                              // quad_pio_0_s1_agent_rsp_fifo:out_data -> quad_pio_0_s1_agent:rf_sink_data
	wire          quad_pio_0_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_0_s1_agent:rf_sink_ready -> quad_pio_0_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_0_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_0_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_0_s1_agent:rf_sink_startofpacket
	wire          quad_pio_0_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_0_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_0_s1_agent:rf_sink_endofpacket
	wire          quad_pio_0_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_0_s1_agent:rdata_fifo_src_valid -> quad_pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_0_s1_agent_rdata_fifo_src_data;                                            // quad_pio_0_s1_agent:rdata_fifo_src_data -> quad_pio_0_s1_agent_rdata_fifo:in_data
	wire          quad_pio_0_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_0_s1_agent_rdata_fifo:in_ready -> quad_pio_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_reset_pio_s1_agent_m0_readdata;                                                // quad_reset_pio_s1_translator:uav_readdata -> quad_reset_pio_s1_agent:m0_readdata
	wire          quad_reset_pio_s1_agent_m0_waitrequest;                                             // quad_reset_pio_s1_translator:uav_waitrequest -> quad_reset_pio_s1_agent:m0_waitrequest
	wire          quad_reset_pio_s1_agent_m0_debugaccess;                                             // quad_reset_pio_s1_agent:m0_debugaccess -> quad_reset_pio_s1_translator:uav_debugaccess
	wire   [31:0] quad_reset_pio_s1_agent_m0_address;                                                 // quad_reset_pio_s1_agent:m0_address -> quad_reset_pio_s1_translator:uav_address
	wire    [3:0] quad_reset_pio_s1_agent_m0_byteenable;                                              // quad_reset_pio_s1_agent:m0_byteenable -> quad_reset_pio_s1_translator:uav_byteenable
	wire          quad_reset_pio_s1_agent_m0_read;                                                    // quad_reset_pio_s1_agent:m0_read -> quad_reset_pio_s1_translator:uav_read
	wire          quad_reset_pio_s1_agent_m0_readdatavalid;                                           // quad_reset_pio_s1_translator:uav_readdatavalid -> quad_reset_pio_s1_agent:m0_readdatavalid
	wire          quad_reset_pio_s1_agent_m0_lock;                                                    // quad_reset_pio_s1_agent:m0_lock -> quad_reset_pio_s1_translator:uav_lock
	wire   [31:0] quad_reset_pio_s1_agent_m0_writedata;                                               // quad_reset_pio_s1_agent:m0_writedata -> quad_reset_pio_s1_translator:uav_writedata
	wire          quad_reset_pio_s1_agent_m0_write;                                                   // quad_reset_pio_s1_agent:m0_write -> quad_reset_pio_s1_translator:uav_write
	wire    [2:0] quad_reset_pio_s1_agent_m0_burstcount;                                              // quad_reset_pio_s1_agent:m0_burstcount -> quad_reset_pio_s1_translator:uav_burstcount
	wire          quad_reset_pio_s1_agent_rf_source_valid;                                            // quad_reset_pio_s1_agent:rf_source_valid -> quad_reset_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_reset_pio_s1_agent_rf_source_data;                                             // quad_reset_pio_s1_agent:rf_source_data -> quad_reset_pio_s1_agent_rsp_fifo:in_data
	wire          quad_reset_pio_s1_agent_rf_source_ready;                                            // quad_reset_pio_s1_agent_rsp_fifo:in_ready -> quad_reset_pio_s1_agent:rf_source_ready
	wire          quad_reset_pio_s1_agent_rf_source_startofpacket;                                    // quad_reset_pio_s1_agent:rf_source_startofpacket -> quad_reset_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_reset_pio_s1_agent_rf_source_endofpacket;                                      // quad_reset_pio_s1_agent:rf_source_endofpacket -> quad_reset_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_reset_pio_s1_agent_rsp_fifo_out_valid;                                         // quad_reset_pio_s1_agent_rsp_fifo:out_valid -> quad_reset_pio_s1_agent:rf_sink_valid
	wire  [135:0] quad_reset_pio_s1_agent_rsp_fifo_out_data;                                          // quad_reset_pio_s1_agent_rsp_fifo:out_data -> quad_reset_pio_s1_agent:rf_sink_data
	wire          quad_reset_pio_s1_agent_rsp_fifo_out_ready;                                         // quad_reset_pio_s1_agent:rf_sink_ready -> quad_reset_pio_s1_agent_rsp_fifo:out_ready
	wire          quad_reset_pio_s1_agent_rsp_fifo_out_startofpacket;                                 // quad_reset_pio_s1_agent_rsp_fifo:out_startofpacket -> quad_reset_pio_s1_agent:rf_sink_startofpacket
	wire          quad_reset_pio_s1_agent_rsp_fifo_out_endofpacket;                                   // quad_reset_pio_s1_agent_rsp_fifo:out_endofpacket -> quad_reset_pio_s1_agent:rf_sink_endofpacket
	wire          quad_reset_pio_s1_agent_rdata_fifo_src_valid;                                       // quad_reset_pio_s1_agent:rdata_fifo_src_valid -> quad_reset_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_reset_pio_s1_agent_rdata_fifo_src_data;                                        // quad_reset_pio_s1_agent:rdata_fifo_src_data -> quad_reset_pio_s1_agent_rdata_fifo:in_data
	wire          quad_reset_pio_s1_agent_rdata_fifo_src_ready;                                       // quad_reset_pio_s1_agent_rdata_fifo:in_ready -> quad_reset_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_0_s1_agent_m0_readdata;                                          // pid_correction_pio_0_s1_translator:uav_readdata -> pid_correction_pio_0_s1_agent:m0_readdata
	wire          pid_correction_pio_0_s1_agent_m0_waitrequest;                                       // pid_correction_pio_0_s1_translator:uav_waitrequest -> pid_correction_pio_0_s1_agent:m0_waitrequest
	wire          pid_correction_pio_0_s1_agent_m0_debugaccess;                                       // pid_correction_pio_0_s1_agent:m0_debugaccess -> pid_correction_pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_0_s1_agent_m0_address;                                           // pid_correction_pio_0_s1_agent:m0_address -> pid_correction_pio_0_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_0_s1_agent_m0_byteenable;                                        // pid_correction_pio_0_s1_agent:m0_byteenable -> pid_correction_pio_0_s1_translator:uav_byteenable
	wire          pid_correction_pio_0_s1_agent_m0_read;                                              // pid_correction_pio_0_s1_agent:m0_read -> pid_correction_pio_0_s1_translator:uav_read
	wire          pid_correction_pio_0_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_0_s1_translator:uav_readdatavalid -> pid_correction_pio_0_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_0_s1_agent_m0_lock;                                              // pid_correction_pio_0_s1_agent:m0_lock -> pid_correction_pio_0_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_0_s1_agent_m0_writedata;                                         // pid_correction_pio_0_s1_agent:m0_writedata -> pid_correction_pio_0_s1_translator:uav_writedata
	wire          pid_correction_pio_0_s1_agent_m0_write;                                             // pid_correction_pio_0_s1_agent:m0_write -> pid_correction_pio_0_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_0_s1_agent_m0_burstcount;                                        // pid_correction_pio_0_s1_agent:m0_burstcount -> pid_correction_pio_0_s1_translator:uav_burstcount
	wire          pid_correction_pio_0_s1_agent_rf_source_valid;                                      // pid_correction_pio_0_s1_agent:rf_source_valid -> pid_correction_pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_0_s1_agent_rf_source_data;                                       // pid_correction_pio_0_s1_agent:rf_source_data -> pid_correction_pio_0_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_0_s1_agent_rf_source_ready;                                      // pid_correction_pio_0_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_0_s1_agent:rf_source_ready
	wire          pid_correction_pio_0_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_0_s1_agent:rf_source_startofpacket -> pid_correction_pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_0_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_0_s1_agent:rf_source_endofpacket -> pid_correction_pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_0_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_0_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_0_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_0_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_0_s1_agent_rsp_fifo:out_data -> pid_correction_pio_0_s1_agent:rf_sink_data
	wire          pid_correction_pio_0_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_0_s1_agent:rf_sink_ready -> pid_correction_pio_0_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_0_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_0_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_0_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_0_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_0_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_0_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_0_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_0_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_0_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_0_s1_agent:rdata_fifo_src_data -> pid_correction_pio_0_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_0_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_0_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_0_s1_agent_m0_readdata;                                               // pid_error_pio_0_s1_translator:uav_readdata -> pid_error_pio_0_s1_agent:m0_readdata
	wire          pid_error_pio_0_s1_agent_m0_waitrequest;                                            // pid_error_pio_0_s1_translator:uav_waitrequest -> pid_error_pio_0_s1_agent:m0_waitrequest
	wire          pid_error_pio_0_s1_agent_m0_debugaccess;                                            // pid_error_pio_0_s1_agent:m0_debugaccess -> pid_error_pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_0_s1_agent_m0_address;                                                // pid_error_pio_0_s1_agent:m0_address -> pid_error_pio_0_s1_translator:uav_address
	wire    [3:0] pid_error_pio_0_s1_agent_m0_byteenable;                                             // pid_error_pio_0_s1_agent:m0_byteenable -> pid_error_pio_0_s1_translator:uav_byteenable
	wire          pid_error_pio_0_s1_agent_m0_read;                                                   // pid_error_pio_0_s1_agent:m0_read -> pid_error_pio_0_s1_translator:uav_read
	wire          pid_error_pio_0_s1_agent_m0_readdatavalid;                                          // pid_error_pio_0_s1_translator:uav_readdatavalid -> pid_error_pio_0_s1_agent:m0_readdatavalid
	wire          pid_error_pio_0_s1_agent_m0_lock;                                                   // pid_error_pio_0_s1_agent:m0_lock -> pid_error_pio_0_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_0_s1_agent_m0_writedata;                                              // pid_error_pio_0_s1_agent:m0_writedata -> pid_error_pio_0_s1_translator:uav_writedata
	wire          pid_error_pio_0_s1_agent_m0_write;                                                  // pid_error_pio_0_s1_agent:m0_write -> pid_error_pio_0_s1_translator:uav_write
	wire    [2:0] pid_error_pio_0_s1_agent_m0_burstcount;                                             // pid_error_pio_0_s1_agent:m0_burstcount -> pid_error_pio_0_s1_translator:uav_burstcount
	wire          pid_error_pio_0_s1_agent_rf_source_valid;                                           // pid_error_pio_0_s1_agent:rf_source_valid -> pid_error_pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_0_s1_agent_rf_source_data;                                            // pid_error_pio_0_s1_agent:rf_source_data -> pid_error_pio_0_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_0_s1_agent_rf_source_ready;                                           // pid_error_pio_0_s1_agent_rsp_fifo:in_ready -> pid_error_pio_0_s1_agent:rf_source_ready
	wire          pid_error_pio_0_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_0_s1_agent:rf_source_startofpacket -> pid_error_pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_0_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_0_s1_agent:rf_source_endofpacket -> pid_error_pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_0_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_0_s1_agent_rsp_fifo:out_valid -> pid_error_pio_0_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_0_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_0_s1_agent_rsp_fifo:out_data -> pid_error_pio_0_s1_agent:rf_sink_data
	wire          pid_error_pio_0_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_0_s1_agent:rf_sink_ready -> pid_error_pio_0_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_0_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_0_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_0_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_0_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_0_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_0_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_0_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_0_s1_agent:rdata_fifo_src_valid -> pid_error_pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_0_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_0_s1_agent:rdata_fifo_src_data -> pid_error_pio_0_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_0_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_0_s1_agent_rdata_fifo:in_ready -> pid_error_pio_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_1_s1_agent_m0_readdata;                                                    // quad_pio_1_s1_translator:uav_readdata -> quad_pio_1_s1_agent:m0_readdata
	wire          quad_pio_1_s1_agent_m0_waitrequest;                                                 // quad_pio_1_s1_translator:uav_waitrequest -> quad_pio_1_s1_agent:m0_waitrequest
	wire          quad_pio_1_s1_agent_m0_debugaccess;                                                 // quad_pio_1_s1_agent:m0_debugaccess -> quad_pio_1_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_1_s1_agent_m0_address;                                                     // quad_pio_1_s1_agent:m0_address -> quad_pio_1_s1_translator:uav_address
	wire    [3:0] quad_pio_1_s1_agent_m0_byteenable;                                                  // quad_pio_1_s1_agent:m0_byteenable -> quad_pio_1_s1_translator:uav_byteenable
	wire          quad_pio_1_s1_agent_m0_read;                                                        // quad_pio_1_s1_agent:m0_read -> quad_pio_1_s1_translator:uav_read
	wire          quad_pio_1_s1_agent_m0_readdatavalid;                                               // quad_pio_1_s1_translator:uav_readdatavalid -> quad_pio_1_s1_agent:m0_readdatavalid
	wire          quad_pio_1_s1_agent_m0_lock;                                                        // quad_pio_1_s1_agent:m0_lock -> quad_pio_1_s1_translator:uav_lock
	wire   [31:0] quad_pio_1_s1_agent_m0_writedata;                                                   // quad_pio_1_s1_agent:m0_writedata -> quad_pio_1_s1_translator:uav_writedata
	wire          quad_pio_1_s1_agent_m0_write;                                                       // quad_pio_1_s1_agent:m0_write -> quad_pio_1_s1_translator:uav_write
	wire    [2:0] quad_pio_1_s1_agent_m0_burstcount;                                                  // quad_pio_1_s1_agent:m0_burstcount -> quad_pio_1_s1_translator:uav_burstcount
	wire          quad_pio_1_s1_agent_rf_source_valid;                                                // quad_pio_1_s1_agent:rf_source_valid -> quad_pio_1_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_1_s1_agent_rf_source_data;                                                 // quad_pio_1_s1_agent:rf_source_data -> quad_pio_1_s1_agent_rsp_fifo:in_data
	wire          quad_pio_1_s1_agent_rf_source_ready;                                                // quad_pio_1_s1_agent_rsp_fifo:in_ready -> quad_pio_1_s1_agent:rf_source_ready
	wire          quad_pio_1_s1_agent_rf_source_startofpacket;                                        // quad_pio_1_s1_agent:rf_source_startofpacket -> quad_pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_1_s1_agent_rf_source_endofpacket;                                          // quad_pio_1_s1_agent:rf_source_endofpacket -> quad_pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_1_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_1_s1_agent_rsp_fifo:out_valid -> quad_pio_1_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_1_s1_agent_rsp_fifo_out_data;                                              // quad_pio_1_s1_agent_rsp_fifo:out_data -> quad_pio_1_s1_agent:rf_sink_data
	wire          quad_pio_1_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_1_s1_agent:rf_sink_ready -> quad_pio_1_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_1_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_1_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_1_s1_agent:rf_sink_startofpacket
	wire          quad_pio_1_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_1_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_1_s1_agent:rf_sink_endofpacket
	wire          quad_pio_1_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_1_s1_agent:rdata_fifo_src_valid -> quad_pio_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_1_s1_agent_rdata_fifo_src_data;                                            // quad_pio_1_s1_agent:rdata_fifo_src_data -> quad_pio_1_s1_agent_rdata_fifo:in_data
	wire          quad_pio_1_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_1_s1_agent_rdata_fifo:in_ready -> quad_pio_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_2_s1_agent_m0_readdata;                                                    // quad_pio_2_s1_translator:uav_readdata -> quad_pio_2_s1_agent:m0_readdata
	wire          quad_pio_2_s1_agent_m0_waitrequest;                                                 // quad_pio_2_s1_translator:uav_waitrequest -> quad_pio_2_s1_agent:m0_waitrequest
	wire          quad_pio_2_s1_agent_m0_debugaccess;                                                 // quad_pio_2_s1_agent:m0_debugaccess -> quad_pio_2_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_2_s1_agent_m0_address;                                                     // quad_pio_2_s1_agent:m0_address -> quad_pio_2_s1_translator:uav_address
	wire    [3:0] quad_pio_2_s1_agent_m0_byteenable;                                                  // quad_pio_2_s1_agent:m0_byteenable -> quad_pio_2_s1_translator:uav_byteenable
	wire          quad_pio_2_s1_agent_m0_read;                                                        // quad_pio_2_s1_agent:m0_read -> quad_pio_2_s1_translator:uav_read
	wire          quad_pio_2_s1_agent_m0_readdatavalid;                                               // quad_pio_2_s1_translator:uav_readdatavalid -> quad_pio_2_s1_agent:m0_readdatavalid
	wire          quad_pio_2_s1_agent_m0_lock;                                                        // quad_pio_2_s1_agent:m0_lock -> quad_pio_2_s1_translator:uav_lock
	wire   [31:0] quad_pio_2_s1_agent_m0_writedata;                                                   // quad_pio_2_s1_agent:m0_writedata -> quad_pio_2_s1_translator:uav_writedata
	wire          quad_pio_2_s1_agent_m0_write;                                                       // quad_pio_2_s1_agent:m0_write -> quad_pio_2_s1_translator:uav_write
	wire    [2:0] quad_pio_2_s1_agent_m0_burstcount;                                                  // quad_pio_2_s1_agent:m0_burstcount -> quad_pio_2_s1_translator:uav_burstcount
	wire          quad_pio_2_s1_agent_rf_source_valid;                                                // quad_pio_2_s1_agent:rf_source_valid -> quad_pio_2_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_2_s1_agent_rf_source_data;                                                 // quad_pio_2_s1_agent:rf_source_data -> quad_pio_2_s1_agent_rsp_fifo:in_data
	wire          quad_pio_2_s1_agent_rf_source_ready;                                                // quad_pio_2_s1_agent_rsp_fifo:in_ready -> quad_pio_2_s1_agent:rf_source_ready
	wire          quad_pio_2_s1_agent_rf_source_startofpacket;                                        // quad_pio_2_s1_agent:rf_source_startofpacket -> quad_pio_2_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_2_s1_agent_rf_source_endofpacket;                                          // quad_pio_2_s1_agent:rf_source_endofpacket -> quad_pio_2_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_2_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_2_s1_agent_rsp_fifo:out_valid -> quad_pio_2_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_2_s1_agent_rsp_fifo_out_data;                                              // quad_pio_2_s1_agent_rsp_fifo:out_data -> quad_pio_2_s1_agent:rf_sink_data
	wire          quad_pio_2_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_2_s1_agent:rf_sink_ready -> quad_pio_2_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_2_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_2_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_2_s1_agent:rf_sink_startofpacket
	wire          quad_pio_2_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_2_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_2_s1_agent:rf_sink_endofpacket
	wire          quad_pio_2_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_2_s1_agent:rdata_fifo_src_valid -> quad_pio_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_2_s1_agent_rdata_fifo_src_data;                                            // quad_pio_2_s1_agent:rdata_fifo_src_data -> quad_pio_2_s1_agent_rdata_fifo:in_data
	wire          quad_pio_2_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_2_s1_agent_rdata_fifo:in_ready -> quad_pio_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_3_s1_agent_m0_readdata;                                                    // quad_pio_3_s1_translator:uav_readdata -> quad_pio_3_s1_agent:m0_readdata
	wire          quad_pio_3_s1_agent_m0_waitrequest;                                                 // quad_pio_3_s1_translator:uav_waitrequest -> quad_pio_3_s1_agent:m0_waitrequest
	wire          quad_pio_3_s1_agent_m0_debugaccess;                                                 // quad_pio_3_s1_agent:m0_debugaccess -> quad_pio_3_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_3_s1_agent_m0_address;                                                     // quad_pio_3_s1_agent:m0_address -> quad_pio_3_s1_translator:uav_address
	wire    [3:0] quad_pio_3_s1_agent_m0_byteenable;                                                  // quad_pio_3_s1_agent:m0_byteenable -> quad_pio_3_s1_translator:uav_byteenable
	wire          quad_pio_3_s1_agent_m0_read;                                                        // quad_pio_3_s1_agent:m0_read -> quad_pio_3_s1_translator:uav_read
	wire          quad_pio_3_s1_agent_m0_readdatavalid;                                               // quad_pio_3_s1_translator:uav_readdatavalid -> quad_pio_3_s1_agent:m0_readdatavalid
	wire          quad_pio_3_s1_agent_m0_lock;                                                        // quad_pio_3_s1_agent:m0_lock -> quad_pio_3_s1_translator:uav_lock
	wire   [31:0] quad_pio_3_s1_agent_m0_writedata;                                                   // quad_pio_3_s1_agent:m0_writedata -> quad_pio_3_s1_translator:uav_writedata
	wire          quad_pio_3_s1_agent_m0_write;                                                       // quad_pio_3_s1_agent:m0_write -> quad_pio_3_s1_translator:uav_write
	wire    [2:0] quad_pio_3_s1_agent_m0_burstcount;                                                  // quad_pio_3_s1_agent:m0_burstcount -> quad_pio_3_s1_translator:uav_burstcount
	wire          quad_pio_3_s1_agent_rf_source_valid;                                                // quad_pio_3_s1_agent:rf_source_valid -> quad_pio_3_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_3_s1_agent_rf_source_data;                                                 // quad_pio_3_s1_agent:rf_source_data -> quad_pio_3_s1_agent_rsp_fifo:in_data
	wire          quad_pio_3_s1_agent_rf_source_ready;                                                // quad_pio_3_s1_agent_rsp_fifo:in_ready -> quad_pio_3_s1_agent:rf_source_ready
	wire          quad_pio_3_s1_agent_rf_source_startofpacket;                                        // quad_pio_3_s1_agent:rf_source_startofpacket -> quad_pio_3_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_3_s1_agent_rf_source_endofpacket;                                          // quad_pio_3_s1_agent:rf_source_endofpacket -> quad_pio_3_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_3_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_3_s1_agent_rsp_fifo:out_valid -> quad_pio_3_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_3_s1_agent_rsp_fifo_out_data;                                              // quad_pio_3_s1_agent_rsp_fifo:out_data -> quad_pio_3_s1_agent:rf_sink_data
	wire          quad_pio_3_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_3_s1_agent:rf_sink_ready -> quad_pio_3_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_3_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_3_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_3_s1_agent:rf_sink_startofpacket
	wire          quad_pio_3_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_3_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_3_s1_agent:rf_sink_endofpacket
	wire          quad_pio_3_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_3_s1_agent:rdata_fifo_src_valid -> quad_pio_3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_3_s1_agent_rdata_fifo_src_data;                                            // quad_pio_3_s1_agent:rdata_fifo_src_data -> quad_pio_3_s1_agent_rdata_fifo:in_data
	wire          quad_pio_3_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_3_s1_agent_rdata_fifo:in_ready -> quad_pio_3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_4_s1_agent_m0_readdata;                                                    // quad_pio_4_s1_translator:uav_readdata -> quad_pio_4_s1_agent:m0_readdata
	wire          quad_pio_4_s1_agent_m0_waitrequest;                                                 // quad_pio_4_s1_translator:uav_waitrequest -> quad_pio_4_s1_agent:m0_waitrequest
	wire          quad_pio_4_s1_agent_m0_debugaccess;                                                 // quad_pio_4_s1_agent:m0_debugaccess -> quad_pio_4_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_4_s1_agent_m0_address;                                                     // quad_pio_4_s1_agent:m0_address -> quad_pio_4_s1_translator:uav_address
	wire    [3:0] quad_pio_4_s1_agent_m0_byteenable;                                                  // quad_pio_4_s1_agent:m0_byteenable -> quad_pio_4_s1_translator:uav_byteenable
	wire          quad_pio_4_s1_agent_m0_read;                                                        // quad_pio_4_s1_agent:m0_read -> quad_pio_4_s1_translator:uav_read
	wire          quad_pio_4_s1_agent_m0_readdatavalid;                                               // quad_pio_4_s1_translator:uav_readdatavalid -> quad_pio_4_s1_agent:m0_readdatavalid
	wire          quad_pio_4_s1_agent_m0_lock;                                                        // quad_pio_4_s1_agent:m0_lock -> quad_pio_4_s1_translator:uav_lock
	wire   [31:0] quad_pio_4_s1_agent_m0_writedata;                                                   // quad_pio_4_s1_agent:m0_writedata -> quad_pio_4_s1_translator:uav_writedata
	wire          quad_pio_4_s1_agent_m0_write;                                                       // quad_pio_4_s1_agent:m0_write -> quad_pio_4_s1_translator:uav_write
	wire    [2:0] quad_pio_4_s1_agent_m0_burstcount;                                                  // quad_pio_4_s1_agent:m0_burstcount -> quad_pio_4_s1_translator:uav_burstcount
	wire          quad_pio_4_s1_agent_rf_source_valid;                                                // quad_pio_4_s1_agent:rf_source_valid -> quad_pio_4_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_4_s1_agent_rf_source_data;                                                 // quad_pio_4_s1_agent:rf_source_data -> quad_pio_4_s1_agent_rsp_fifo:in_data
	wire          quad_pio_4_s1_agent_rf_source_ready;                                                // quad_pio_4_s1_agent_rsp_fifo:in_ready -> quad_pio_4_s1_agent:rf_source_ready
	wire          quad_pio_4_s1_agent_rf_source_startofpacket;                                        // quad_pio_4_s1_agent:rf_source_startofpacket -> quad_pio_4_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_4_s1_agent_rf_source_endofpacket;                                          // quad_pio_4_s1_agent:rf_source_endofpacket -> quad_pio_4_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_4_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_4_s1_agent_rsp_fifo:out_valid -> quad_pio_4_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_4_s1_agent_rsp_fifo_out_data;                                              // quad_pio_4_s1_agent_rsp_fifo:out_data -> quad_pio_4_s1_agent:rf_sink_data
	wire          quad_pio_4_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_4_s1_agent:rf_sink_ready -> quad_pio_4_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_4_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_4_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_4_s1_agent:rf_sink_startofpacket
	wire          quad_pio_4_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_4_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_4_s1_agent:rf_sink_endofpacket
	wire          quad_pio_4_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_4_s1_agent:rdata_fifo_src_valid -> quad_pio_4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_4_s1_agent_rdata_fifo_src_data;                                            // quad_pio_4_s1_agent:rdata_fifo_src_data -> quad_pio_4_s1_agent_rdata_fifo:in_data
	wire          quad_pio_4_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_4_s1_agent_rdata_fifo:in_ready -> quad_pio_4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_5_s1_agent_m0_readdata;                                                    // quad_pio_5_s1_translator:uav_readdata -> quad_pio_5_s1_agent:m0_readdata
	wire          quad_pio_5_s1_agent_m0_waitrequest;                                                 // quad_pio_5_s1_translator:uav_waitrequest -> quad_pio_5_s1_agent:m0_waitrequest
	wire          quad_pio_5_s1_agent_m0_debugaccess;                                                 // quad_pio_5_s1_agent:m0_debugaccess -> quad_pio_5_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_5_s1_agent_m0_address;                                                     // quad_pio_5_s1_agent:m0_address -> quad_pio_5_s1_translator:uav_address
	wire    [3:0] quad_pio_5_s1_agent_m0_byteenable;                                                  // quad_pio_5_s1_agent:m0_byteenable -> quad_pio_5_s1_translator:uav_byteenable
	wire          quad_pio_5_s1_agent_m0_read;                                                        // quad_pio_5_s1_agent:m0_read -> quad_pio_5_s1_translator:uav_read
	wire          quad_pio_5_s1_agent_m0_readdatavalid;                                               // quad_pio_5_s1_translator:uav_readdatavalid -> quad_pio_5_s1_agent:m0_readdatavalid
	wire          quad_pio_5_s1_agent_m0_lock;                                                        // quad_pio_5_s1_agent:m0_lock -> quad_pio_5_s1_translator:uav_lock
	wire   [31:0] quad_pio_5_s1_agent_m0_writedata;                                                   // quad_pio_5_s1_agent:m0_writedata -> quad_pio_5_s1_translator:uav_writedata
	wire          quad_pio_5_s1_agent_m0_write;                                                       // quad_pio_5_s1_agent:m0_write -> quad_pio_5_s1_translator:uav_write
	wire    [2:0] quad_pio_5_s1_agent_m0_burstcount;                                                  // quad_pio_5_s1_agent:m0_burstcount -> quad_pio_5_s1_translator:uav_burstcount
	wire          quad_pio_5_s1_agent_rf_source_valid;                                                // quad_pio_5_s1_agent:rf_source_valid -> quad_pio_5_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_5_s1_agent_rf_source_data;                                                 // quad_pio_5_s1_agent:rf_source_data -> quad_pio_5_s1_agent_rsp_fifo:in_data
	wire          quad_pio_5_s1_agent_rf_source_ready;                                                // quad_pio_5_s1_agent_rsp_fifo:in_ready -> quad_pio_5_s1_agent:rf_source_ready
	wire          quad_pio_5_s1_agent_rf_source_startofpacket;                                        // quad_pio_5_s1_agent:rf_source_startofpacket -> quad_pio_5_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_5_s1_agent_rf_source_endofpacket;                                          // quad_pio_5_s1_agent:rf_source_endofpacket -> quad_pio_5_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_5_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_5_s1_agent_rsp_fifo:out_valid -> quad_pio_5_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_5_s1_agent_rsp_fifo_out_data;                                              // quad_pio_5_s1_agent_rsp_fifo:out_data -> quad_pio_5_s1_agent:rf_sink_data
	wire          quad_pio_5_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_5_s1_agent:rf_sink_ready -> quad_pio_5_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_5_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_5_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_5_s1_agent:rf_sink_startofpacket
	wire          quad_pio_5_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_5_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_5_s1_agent:rf_sink_endofpacket
	wire          quad_pio_5_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_5_s1_agent:rdata_fifo_src_valid -> quad_pio_5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_5_s1_agent_rdata_fifo_src_data;                                            // quad_pio_5_s1_agent:rdata_fifo_src_data -> quad_pio_5_s1_agent_rdata_fifo:in_data
	wire          quad_pio_5_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_5_s1_agent_rdata_fifo:in_ready -> quad_pio_5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_6_s1_agent_m0_readdata;                                                    // quad_pio_6_s1_translator:uav_readdata -> quad_pio_6_s1_agent:m0_readdata
	wire          quad_pio_6_s1_agent_m0_waitrequest;                                                 // quad_pio_6_s1_translator:uav_waitrequest -> quad_pio_6_s1_agent:m0_waitrequest
	wire          quad_pio_6_s1_agent_m0_debugaccess;                                                 // quad_pio_6_s1_agent:m0_debugaccess -> quad_pio_6_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_6_s1_agent_m0_address;                                                     // quad_pio_6_s1_agent:m0_address -> quad_pio_6_s1_translator:uav_address
	wire    [3:0] quad_pio_6_s1_agent_m0_byteenable;                                                  // quad_pio_6_s1_agent:m0_byteenable -> quad_pio_6_s1_translator:uav_byteenable
	wire          quad_pio_6_s1_agent_m0_read;                                                        // quad_pio_6_s1_agent:m0_read -> quad_pio_6_s1_translator:uav_read
	wire          quad_pio_6_s1_agent_m0_readdatavalid;                                               // quad_pio_6_s1_translator:uav_readdatavalid -> quad_pio_6_s1_agent:m0_readdatavalid
	wire          quad_pio_6_s1_agent_m0_lock;                                                        // quad_pio_6_s1_agent:m0_lock -> quad_pio_6_s1_translator:uav_lock
	wire   [31:0] quad_pio_6_s1_agent_m0_writedata;                                                   // quad_pio_6_s1_agent:m0_writedata -> quad_pio_6_s1_translator:uav_writedata
	wire          quad_pio_6_s1_agent_m0_write;                                                       // quad_pio_6_s1_agent:m0_write -> quad_pio_6_s1_translator:uav_write
	wire    [2:0] quad_pio_6_s1_agent_m0_burstcount;                                                  // quad_pio_6_s1_agent:m0_burstcount -> quad_pio_6_s1_translator:uav_burstcount
	wire          quad_pio_6_s1_agent_rf_source_valid;                                                // quad_pio_6_s1_agent:rf_source_valid -> quad_pio_6_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_6_s1_agent_rf_source_data;                                                 // quad_pio_6_s1_agent:rf_source_data -> quad_pio_6_s1_agent_rsp_fifo:in_data
	wire          quad_pio_6_s1_agent_rf_source_ready;                                                // quad_pio_6_s1_agent_rsp_fifo:in_ready -> quad_pio_6_s1_agent:rf_source_ready
	wire          quad_pio_6_s1_agent_rf_source_startofpacket;                                        // quad_pio_6_s1_agent:rf_source_startofpacket -> quad_pio_6_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_6_s1_agent_rf_source_endofpacket;                                          // quad_pio_6_s1_agent:rf_source_endofpacket -> quad_pio_6_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_6_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_6_s1_agent_rsp_fifo:out_valid -> quad_pio_6_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_6_s1_agent_rsp_fifo_out_data;                                              // quad_pio_6_s1_agent_rsp_fifo:out_data -> quad_pio_6_s1_agent:rf_sink_data
	wire          quad_pio_6_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_6_s1_agent:rf_sink_ready -> quad_pio_6_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_6_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_6_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_6_s1_agent:rf_sink_startofpacket
	wire          quad_pio_6_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_6_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_6_s1_agent:rf_sink_endofpacket
	wire          quad_pio_6_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_6_s1_agent:rdata_fifo_src_valid -> quad_pio_6_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_6_s1_agent_rdata_fifo_src_data;                                            // quad_pio_6_s1_agent:rdata_fifo_src_data -> quad_pio_6_s1_agent_rdata_fifo:in_data
	wire          quad_pio_6_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_6_s1_agent_rdata_fifo:in_ready -> quad_pio_6_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_7_s1_agent_m0_readdata;                                                    // quad_pio_7_s1_translator:uav_readdata -> quad_pio_7_s1_agent:m0_readdata
	wire          quad_pio_7_s1_agent_m0_waitrequest;                                                 // quad_pio_7_s1_translator:uav_waitrequest -> quad_pio_7_s1_agent:m0_waitrequest
	wire          quad_pio_7_s1_agent_m0_debugaccess;                                                 // quad_pio_7_s1_agent:m0_debugaccess -> quad_pio_7_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_7_s1_agent_m0_address;                                                     // quad_pio_7_s1_agent:m0_address -> quad_pio_7_s1_translator:uav_address
	wire    [3:0] quad_pio_7_s1_agent_m0_byteenable;                                                  // quad_pio_7_s1_agent:m0_byteenable -> quad_pio_7_s1_translator:uav_byteenable
	wire          quad_pio_7_s1_agent_m0_read;                                                        // quad_pio_7_s1_agent:m0_read -> quad_pio_7_s1_translator:uav_read
	wire          quad_pio_7_s1_agent_m0_readdatavalid;                                               // quad_pio_7_s1_translator:uav_readdatavalid -> quad_pio_7_s1_agent:m0_readdatavalid
	wire          quad_pio_7_s1_agent_m0_lock;                                                        // quad_pio_7_s1_agent:m0_lock -> quad_pio_7_s1_translator:uav_lock
	wire   [31:0] quad_pio_7_s1_agent_m0_writedata;                                                   // quad_pio_7_s1_agent:m0_writedata -> quad_pio_7_s1_translator:uav_writedata
	wire          quad_pio_7_s1_agent_m0_write;                                                       // quad_pio_7_s1_agent:m0_write -> quad_pio_7_s1_translator:uav_write
	wire    [2:0] quad_pio_7_s1_agent_m0_burstcount;                                                  // quad_pio_7_s1_agent:m0_burstcount -> quad_pio_7_s1_translator:uav_burstcount
	wire          quad_pio_7_s1_agent_rf_source_valid;                                                // quad_pio_7_s1_agent:rf_source_valid -> quad_pio_7_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_7_s1_agent_rf_source_data;                                                 // quad_pio_7_s1_agent:rf_source_data -> quad_pio_7_s1_agent_rsp_fifo:in_data
	wire          quad_pio_7_s1_agent_rf_source_ready;                                                // quad_pio_7_s1_agent_rsp_fifo:in_ready -> quad_pio_7_s1_agent:rf_source_ready
	wire          quad_pio_7_s1_agent_rf_source_startofpacket;                                        // quad_pio_7_s1_agent:rf_source_startofpacket -> quad_pio_7_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_7_s1_agent_rf_source_endofpacket;                                          // quad_pio_7_s1_agent:rf_source_endofpacket -> quad_pio_7_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_7_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_7_s1_agent_rsp_fifo:out_valid -> quad_pio_7_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_7_s1_agent_rsp_fifo_out_data;                                              // quad_pio_7_s1_agent_rsp_fifo:out_data -> quad_pio_7_s1_agent:rf_sink_data
	wire          quad_pio_7_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_7_s1_agent:rf_sink_ready -> quad_pio_7_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_7_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_7_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_7_s1_agent:rf_sink_startofpacket
	wire          quad_pio_7_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_7_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_7_s1_agent:rf_sink_endofpacket
	wire          quad_pio_7_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_7_s1_agent:rdata_fifo_src_valid -> quad_pio_7_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_7_s1_agent_rdata_fifo_src_data;                                            // quad_pio_7_s1_agent:rdata_fifo_src_data -> quad_pio_7_s1_agent_rdata_fifo:in_data
	wire          quad_pio_7_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_7_s1_agent_rdata_fifo:in_ready -> quad_pio_7_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_1_s1_agent_m0_readdata;                                               // pid_error_pio_1_s1_translator:uav_readdata -> pid_error_pio_1_s1_agent:m0_readdata
	wire          pid_error_pio_1_s1_agent_m0_waitrequest;                                            // pid_error_pio_1_s1_translator:uav_waitrequest -> pid_error_pio_1_s1_agent:m0_waitrequest
	wire          pid_error_pio_1_s1_agent_m0_debugaccess;                                            // pid_error_pio_1_s1_agent:m0_debugaccess -> pid_error_pio_1_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_1_s1_agent_m0_address;                                                // pid_error_pio_1_s1_agent:m0_address -> pid_error_pio_1_s1_translator:uav_address
	wire    [3:0] pid_error_pio_1_s1_agent_m0_byteenable;                                             // pid_error_pio_1_s1_agent:m0_byteenable -> pid_error_pio_1_s1_translator:uav_byteenable
	wire          pid_error_pio_1_s1_agent_m0_read;                                                   // pid_error_pio_1_s1_agent:m0_read -> pid_error_pio_1_s1_translator:uav_read
	wire          pid_error_pio_1_s1_agent_m0_readdatavalid;                                          // pid_error_pio_1_s1_translator:uav_readdatavalid -> pid_error_pio_1_s1_agent:m0_readdatavalid
	wire          pid_error_pio_1_s1_agent_m0_lock;                                                   // pid_error_pio_1_s1_agent:m0_lock -> pid_error_pio_1_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_1_s1_agent_m0_writedata;                                              // pid_error_pio_1_s1_agent:m0_writedata -> pid_error_pio_1_s1_translator:uav_writedata
	wire          pid_error_pio_1_s1_agent_m0_write;                                                  // pid_error_pio_1_s1_agent:m0_write -> pid_error_pio_1_s1_translator:uav_write
	wire    [2:0] pid_error_pio_1_s1_agent_m0_burstcount;                                             // pid_error_pio_1_s1_agent:m0_burstcount -> pid_error_pio_1_s1_translator:uav_burstcount
	wire          pid_error_pio_1_s1_agent_rf_source_valid;                                           // pid_error_pio_1_s1_agent:rf_source_valid -> pid_error_pio_1_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_1_s1_agent_rf_source_data;                                            // pid_error_pio_1_s1_agent:rf_source_data -> pid_error_pio_1_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_1_s1_agent_rf_source_ready;                                           // pid_error_pio_1_s1_agent_rsp_fifo:in_ready -> pid_error_pio_1_s1_agent:rf_source_ready
	wire          pid_error_pio_1_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_1_s1_agent:rf_source_startofpacket -> pid_error_pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_1_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_1_s1_agent:rf_source_endofpacket -> pid_error_pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_1_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_1_s1_agent_rsp_fifo:out_valid -> pid_error_pio_1_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_1_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_1_s1_agent_rsp_fifo:out_data -> pid_error_pio_1_s1_agent:rf_sink_data
	wire          pid_error_pio_1_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_1_s1_agent:rf_sink_ready -> pid_error_pio_1_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_1_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_1_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_1_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_1_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_1_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_1_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_1_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_1_s1_agent:rdata_fifo_src_valid -> pid_error_pio_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_1_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_1_s1_agent:rdata_fifo_src_data -> pid_error_pio_1_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_1_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_1_s1_agent_rdata_fifo:in_ready -> pid_error_pio_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_2_s1_agent_m0_readdata;                                               // pid_error_pio_2_s1_translator:uav_readdata -> pid_error_pio_2_s1_agent:m0_readdata
	wire          pid_error_pio_2_s1_agent_m0_waitrequest;                                            // pid_error_pio_2_s1_translator:uav_waitrequest -> pid_error_pio_2_s1_agent:m0_waitrequest
	wire          pid_error_pio_2_s1_agent_m0_debugaccess;                                            // pid_error_pio_2_s1_agent:m0_debugaccess -> pid_error_pio_2_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_2_s1_agent_m0_address;                                                // pid_error_pio_2_s1_agent:m0_address -> pid_error_pio_2_s1_translator:uav_address
	wire    [3:0] pid_error_pio_2_s1_agent_m0_byteenable;                                             // pid_error_pio_2_s1_agent:m0_byteenable -> pid_error_pio_2_s1_translator:uav_byteenable
	wire          pid_error_pio_2_s1_agent_m0_read;                                                   // pid_error_pio_2_s1_agent:m0_read -> pid_error_pio_2_s1_translator:uav_read
	wire          pid_error_pio_2_s1_agent_m0_readdatavalid;                                          // pid_error_pio_2_s1_translator:uav_readdatavalid -> pid_error_pio_2_s1_agent:m0_readdatavalid
	wire          pid_error_pio_2_s1_agent_m0_lock;                                                   // pid_error_pio_2_s1_agent:m0_lock -> pid_error_pio_2_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_2_s1_agent_m0_writedata;                                              // pid_error_pio_2_s1_agent:m0_writedata -> pid_error_pio_2_s1_translator:uav_writedata
	wire          pid_error_pio_2_s1_agent_m0_write;                                                  // pid_error_pio_2_s1_agent:m0_write -> pid_error_pio_2_s1_translator:uav_write
	wire    [2:0] pid_error_pio_2_s1_agent_m0_burstcount;                                             // pid_error_pio_2_s1_agent:m0_burstcount -> pid_error_pio_2_s1_translator:uav_burstcount
	wire          pid_error_pio_2_s1_agent_rf_source_valid;                                           // pid_error_pio_2_s1_agent:rf_source_valid -> pid_error_pio_2_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_2_s1_agent_rf_source_data;                                            // pid_error_pio_2_s1_agent:rf_source_data -> pid_error_pio_2_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_2_s1_agent_rf_source_ready;                                           // pid_error_pio_2_s1_agent_rsp_fifo:in_ready -> pid_error_pio_2_s1_agent:rf_source_ready
	wire          pid_error_pio_2_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_2_s1_agent:rf_source_startofpacket -> pid_error_pio_2_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_2_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_2_s1_agent:rf_source_endofpacket -> pid_error_pio_2_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_2_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_2_s1_agent_rsp_fifo:out_valid -> pid_error_pio_2_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_2_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_2_s1_agent_rsp_fifo:out_data -> pid_error_pio_2_s1_agent:rf_sink_data
	wire          pid_error_pio_2_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_2_s1_agent:rf_sink_ready -> pid_error_pio_2_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_2_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_2_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_2_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_2_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_2_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_2_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_2_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_2_s1_agent:rdata_fifo_src_valid -> pid_error_pio_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_2_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_2_s1_agent:rdata_fifo_src_data -> pid_error_pio_2_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_2_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_2_s1_agent_rdata_fifo:in_ready -> pid_error_pio_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_3_s1_agent_m0_readdata;                                               // pid_error_pio_3_s1_translator:uav_readdata -> pid_error_pio_3_s1_agent:m0_readdata
	wire          pid_error_pio_3_s1_agent_m0_waitrequest;                                            // pid_error_pio_3_s1_translator:uav_waitrequest -> pid_error_pio_3_s1_agent:m0_waitrequest
	wire          pid_error_pio_3_s1_agent_m0_debugaccess;                                            // pid_error_pio_3_s1_agent:m0_debugaccess -> pid_error_pio_3_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_3_s1_agent_m0_address;                                                // pid_error_pio_3_s1_agent:m0_address -> pid_error_pio_3_s1_translator:uav_address
	wire    [3:0] pid_error_pio_3_s1_agent_m0_byteenable;                                             // pid_error_pio_3_s1_agent:m0_byteenable -> pid_error_pio_3_s1_translator:uav_byteenable
	wire          pid_error_pio_3_s1_agent_m0_read;                                                   // pid_error_pio_3_s1_agent:m0_read -> pid_error_pio_3_s1_translator:uav_read
	wire          pid_error_pio_3_s1_agent_m0_readdatavalid;                                          // pid_error_pio_3_s1_translator:uav_readdatavalid -> pid_error_pio_3_s1_agent:m0_readdatavalid
	wire          pid_error_pio_3_s1_agent_m0_lock;                                                   // pid_error_pio_3_s1_agent:m0_lock -> pid_error_pio_3_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_3_s1_agent_m0_writedata;                                              // pid_error_pio_3_s1_agent:m0_writedata -> pid_error_pio_3_s1_translator:uav_writedata
	wire          pid_error_pio_3_s1_agent_m0_write;                                                  // pid_error_pio_3_s1_agent:m0_write -> pid_error_pio_3_s1_translator:uav_write
	wire    [2:0] pid_error_pio_3_s1_agent_m0_burstcount;                                             // pid_error_pio_3_s1_agent:m0_burstcount -> pid_error_pio_3_s1_translator:uav_burstcount
	wire          pid_error_pio_3_s1_agent_rf_source_valid;                                           // pid_error_pio_3_s1_agent:rf_source_valid -> pid_error_pio_3_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_3_s1_agent_rf_source_data;                                            // pid_error_pio_3_s1_agent:rf_source_data -> pid_error_pio_3_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_3_s1_agent_rf_source_ready;                                           // pid_error_pio_3_s1_agent_rsp_fifo:in_ready -> pid_error_pio_3_s1_agent:rf_source_ready
	wire          pid_error_pio_3_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_3_s1_agent:rf_source_startofpacket -> pid_error_pio_3_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_3_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_3_s1_agent:rf_source_endofpacket -> pid_error_pio_3_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_3_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_3_s1_agent_rsp_fifo:out_valid -> pid_error_pio_3_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_3_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_3_s1_agent_rsp_fifo:out_data -> pid_error_pio_3_s1_agent:rf_sink_data
	wire          pid_error_pio_3_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_3_s1_agent:rf_sink_ready -> pid_error_pio_3_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_3_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_3_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_3_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_3_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_3_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_3_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_3_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_3_s1_agent:rdata_fifo_src_valid -> pid_error_pio_3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_3_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_3_s1_agent:rdata_fifo_src_data -> pid_error_pio_3_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_3_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_3_s1_agent_rdata_fifo:in_ready -> pid_error_pio_3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_4_s1_agent_m0_readdata;                                               // pid_error_pio_4_s1_translator:uav_readdata -> pid_error_pio_4_s1_agent:m0_readdata
	wire          pid_error_pio_4_s1_agent_m0_waitrequest;                                            // pid_error_pio_4_s1_translator:uav_waitrequest -> pid_error_pio_4_s1_agent:m0_waitrequest
	wire          pid_error_pio_4_s1_agent_m0_debugaccess;                                            // pid_error_pio_4_s1_agent:m0_debugaccess -> pid_error_pio_4_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_4_s1_agent_m0_address;                                                // pid_error_pio_4_s1_agent:m0_address -> pid_error_pio_4_s1_translator:uav_address
	wire    [3:0] pid_error_pio_4_s1_agent_m0_byteenable;                                             // pid_error_pio_4_s1_agent:m0_byteenable -> pid_error_pio_4_s1_translator:uav_byteenable
	wire          pid_error_pio_4_s1_agent_m0_read;                                                   // pid_error_pio_4_s1_agent:m0_read -> pid_error_pio_4_s1_translator:uav_read
	wire          pid_error_pio_4_s1_agent_m0_readdatavalid;                                          // pid_error_pio_4_s1_translator:uav_readdatavalid -> pid_error_pio_4_s1_agent:m0_readdatavalid
	wire          pid_error_pio_4_s1_agent_m0_lock;                                                   // pid_error_pio_4_s1_agent:m0_lock -> pid_error_pio_4_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_4_s1_agent_m0_writedata;                                              // pid_error_pio_4_s1_agent:m0_writedata -> pid_error_pio_4_s1_translator:uav_writedata
	wire          pid_error_pio_4_s1_agent_m0_write;                                                  // pid_error_pio_4_s1_agent:m0_write -> pid_error_pio_4_s1_translator:uav_write
	wire    [2:0] pid_error_pio_4_s1_agent_m0_burstcount;                                             // pid_error_pio_4_s1_agent:m0_burstcount -> pid_error_pio_4_s1_translator:uav_burstcount
	wire          pid_error_pio_4_s1_agent_rf_source_valid;                                           // pid_error_pio_4_s1_agent:rf_source_valid -> pid_error_pio_4_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_4_s1_agent_rf_source_data;                                            // pid_error_pio_4_s1_agent:rf_source_data -> pid_error_pio_4_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_4_s1_agent_rf_source_ready;                                           // pid_error_pio_4_s1_agent_rsp_fifo:in_ready -> pid_error_pio_4_s1_agent:rf_source_ready
	wire          pid_error_pio_4_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_4_s1_agent:rf_source_startofpacket -> pid_error_pio_4_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_4_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_4_s1_agent:rf_source_endofpacket -> pid_error_pio_4_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_4_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_4_s1_agent_rsp_fifo:out_valid -> pid_error_pio_4_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_4_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_4_s1_agent_rsp_fifo:out_data -> pid_error_pio_4_s1_agent:rf_sink_data
	wire          pid_error_pio_4_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_4_s1_agent:rf_sink_ready -> pid_error_pio_4_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_4_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_4_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_4_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_4_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_4_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_4_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_4_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_4_s1_agent:rdata_fifo_src_valid -> pid_error_pio_4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_4_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_4_s1_agent:rdata_fifo_src_data -> pid_error_pio_4_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_4_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_4_s1_agent_rdata_fifo:in_ready -> pid_error_pio_4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_5_s1_agent_m0_readdata;                                               // pid_error_pio_5_s1_translator:uav_readdata -> pid_error_pio_5_s1_agent:m0_readdata
	wire          pid_error_pio_5_s1_agent_m0_waitrequest;                                            // pid_error_pio_5_s1_translator:uav_waitrequest -> pid_error_pio_5_s1_agent:m0_waitrequest
	wire          pid_error_pio_5_s1_agent_m0_debugaccess;                                            // pid_error_pio_5_s1_agent:m0_debugaccess -> pid_error_pio_5_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_5_s1_agent_m0_address;                                                // pid_error_pio_5_s1_agent:m0_address -> pid_error_pio_5_s1_translator:uav_address
	wire    [3:0] pid_error_pio_5_s1_agent_m0_byteenable;                                             // pid_error_pio_5_s1_agent:m0_byteenable -> pid_error_pio_5_s1_translator:uav_byteenable
	wire          pid_error_pio_5_s1_agent_m0_read;                                                   // pid_error_pio_5_s1_agent:m0_read -> pid_error_pio_5_s1_translator:uav_read
	wire          pid_error_pio_5_s1_agent_m0_readdatavalid;                                          // pid_error_pio_5_s1_translator:uav_readdatavalid -> pid_error_pio_5_s1_agent:m0_readdatavalid
	wire          pid_error_pio_5_s1_agent_m0_lock;                                                   // pid_error_pio_5_s1_agent:m0_lock -> pid_error_pio_5_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_5_s1_agent_m0_writedata;                                              // pid_error_pio_5_s1_agent:m0_writedata -> pid_error_pio_5_s1_translator:uav_writedata
	wire          pid_error_pio_5_s1_agent_m0_write;                                                  // pid_error_pio_5_s1_agent:m0_write -> pid_error_pio_5_s1_translator:uav_write
	wire    [2:0] pid_error_pio_5_s1_agent_m0_burstcount;                                             // pid_error_pio_5_s1_agent:m0_burstcount -> pid_error_pio_5_s1_translator:uav_burstcount
	wire          pid_error_pio_5_s1_agent_rf_source_valid;                                           // pid_error_pio_5_s1_agent:rf_source_valid -> pid_error_pio_5_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_5_s1_agent_rf_source_data;                                            // pid_error_pio_5_s1_agent:rf_source_data -> pid_error_pio_5_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_5_s1_agent_rf_source_ready;                                           // pid_error_pio_5_s1_agent_rsp_fifo:in_ready -> pid_error_pio_5_s1_agent:rf_source_ready
	wire          pid_error_pio_5_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_5_s1_agent:rf_source_startofpacket -> pid_error_pio_5_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_5_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_5_s1_agent:rf_source_endofpacket -> pid_error_pio_5_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_5_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_5_s1_agent_rsp_fifo:out_valid -> pid_error_pio_5_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_5_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_5_s1_agent_rsp_fifo:out_data -> pid_error_pio_5_s1_agent:rf_sink_data
	wire          pid_error_pio_5_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_5_s1_agent:rf_sink_ready -> pid_error_pio_5_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_5_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_5_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_5_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_5_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_5_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_5_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_5_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_5_s1_agent:rdata_fifo_src_valid -> pid_error_pio_5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_5_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_5_s1_agent:rdata_fifo_src_data -> pid_error_pio_5_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_5_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_5_s1_agent_rdata_fifo:in_ready -> pid_error_pio_5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_6_s1_agent_m0_readdata;                                               // pid_error_pio_6_s1_translator:uav_readdata -> pid_error_pio_6_s1_agent:m0_readdata
	wire          pid_error_pio_6_s1_agent_m0_waitrequest;                                            // pid_error_pio_6_s1_translator:uav_waitrequest -> pid_error_pio_6_s1_agent:m0_waitrequest
	wire          pid_error_pio_6_s1_agent_m0_debugaccess;                                            // pid_error_pio_6_s1_agent:m0_debugaccess -> pid_error_pio_6_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_6_s1_agent_m0_address;                                                // pid_error_pio_6_s1_agent:m0_address -> pid_error_pio_6_s1_translator:uav_address
	wire    [3:0] pid_error_pio_6_s1_agent_m0_byteenable;                                             // pid_error_pio_6_s1_agent:m0_byteenable -> pid_error_pio_6_s1_translator:uav_byteenable
	wire          pid_error_pio_6_s1_agent_m0_read;                                                   // pid_error_pio_6_s1_agent:m0_read -> pid_error_pio_6_s1_translator:uav_read
	wire          pid_error_pio_6_s1_agent_m0_readdatavalid;                                          // pid_error_pio_6_s1_translator:uav_readdatavalid -> pid_error_pio_6_s1_agent:m0_readdatavalid
	wire          pid_error_pio_6_s1_agent_m0_lock;                                                   // pid_error_pio_6_s1_agent:m0_lock -> pid_error_pio_6_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_6_s1_agent_m0_writedata;                                              // pid_error_pio_6_s1_agent:m0_writedata -> pid_error_pio_6_s1_translator:uav_writedata
	wire          pid_error_pio_6_s1_agent_m0_write;                                                  // pid_error_pio_6_s1_agent:m0_write -> pid_error_pio_6_s1_translator:uav_write
	wire    [2:0] pid_error_pio_6_s1_agent_m0_burstcount;                                             // pid_error_pio_6_s1_agent:m0_burstcount -> pid_error_pio_6_s1_translator:uav_burstcount
	wire          pid_error_pio_6_s1_agent_rf_source_valid;                                           // pid_error_pio_6_s1_agent:rf_source_valid -> pid_error_pio_6_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_6_s1_agent_rf_source_data;                                            // pid_error_pio_6_s1_agent:rf_source_data -> pid_error_pio_6_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_6_s1_agent_rf_source_ready;                                           // pid_error_pio_6_s1_agent_rsp_fifo:in_ready -> pid_error_pio_6_s1_agent:rf_source_ready
	wire          pid_error_pio_6_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_6_s1_agent:rf_source_startofpacket -> pid_error_pio_6_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_6_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_6_s1_agent:rf_source_endofpacket -> pid_error_pio_6_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_6_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_6_s1_agent_rsp_fifo:out_valid -> pid_error_pio_6_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_6_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_6_s1_agent_rsp_fifo:out_data -> pid_error_pio_6_s1_agent:rf_sink_data
	wire          pid_error_pio_6_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_6_s1_agent:rf_sink_ready -> pid_error_pio_6_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_6_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_6_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_6_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_6_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_6_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_6_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_6_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_6_s1_agent:rdata_fifo_src_valid -> pid_error_pio_6_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_6_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_6_s1_agent:rdata_fifo_src_data -> pid_error_pio_6_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_6_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_6_s1_agent_rdata_fifo:in_ready -> pid_error_pio_6_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_error_pio_7_s1_agent_m0_readdata;                                               // pid_error_pio_7_s1_translator:uav_readdata -> pid_error_pio_7_s1_agent:m0_readdata
	wire          pid_error_pio_7_s1_agent_m0_waitrequest;                                            // pid_error_pio_7_s1_translator:uav_waitrequest -> pid_error_pio_7_s1_agent:m0_waitrequest
	wire          pid_error_pio_7_s1_agent_m0_debugaccess;                                            // pid_error_pio_7_s1_agent:m0_debugaccess -> pid_error_pio_7_s1_translator:uav_debugaccess
	wire   [31:0] pid_error_pio_7_s1_agent_m0_address;                                                // pid_error_pio_7_s1_agent:m0_address -> pid_error_pio_7_s1_translator:uav_address
	wire    [3:0] pid_error_pio_7_s1_agent_m0_byteenable;                                             // pid_error_pio_7_s1_agent:m0_byteenable -> pid_error_pio_7_s1_translator:uav_byteenable
	wire          pid_error_pio_7_s1_agent_m0_read;                                                   // pid_error_pio_7_s1_agent:m0_read -> pid_error_pio_7_s1_translator:uav_read
	wire          pid_error_pio_7_s1_agent_m0_readdatavalid;                                          // pid_error_pio_7_s1_translator:uav_readdatavalid -> pid_error_pio_7_s1_agent:m0_readdatavalid
	wire          pid_error_pio_7_s1_agent_m0_lock;                                                   // pid_error_pio_7_s1_agent:m0_lock -> pid_error_pio_7_s1_translator:uav_lock
	wire   [31:0] pid_error_pio_7_s1_agent_m0_writedata;                                              // pid_error_pio_7_s1_agent:m0_writedata -> pid_error_pio_7_s1_translator:uav_writedata
	wire          pid_error_pio_7_s1_agent_m0_write;                                                  // pid_error_pio_7_s1_agent:m0_write -> pid_error_pio_7_s1_translator:uav_write
	wire    [2:0] pid_error_pio_7_s1_agent_m0_burstcount;                                             // pid_error_pio_7_s1_agent:m0_burstcount -> pid_error_pio_7_s1_translator:uav_burstcount
	wire          pid_error_pio_7_s1_agent_rf_source_valid;                                           // pid_error_pio_7_s1_agent:rf_source_valid -> pid_error_pio_7_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_error_pio_7_s1_agent_rf_source_data;                                            // pid_error_pio_7_s1_agent:rf_source_data -> pid_error_pio_7_s1_agent_rsp_fifo:in_data
	wire          pid_error_pio_7_s1_agent_rf_source_ready;                                           // pid_error_pio_7_s1_agent_rsp_fifo:in_ready -> pid_error_pio_7_s1_agent:rf_source_ready
	wire          pid_error_pio_7_s1_agent_rf_source_startofpacket;                                   // pid_error_pio_7_s1_agent:rf_source_startofpacket -> pid_error_pio_7_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_error_pio_7_s1_agent_rf_source_endofpacket;                                     // pid_error_pio_7_s1_agent:rf_source_endofpacket -> pid_error_pio_7_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_error_pio_7_s1_agent_rsp_fifo_out_valid;                                        // pid_error_pio_7_s1_agent_rsp_fifo:out_valid -> pid_error_pio_7_s1_agent:rf_sink_valid
	wire  [135:0] pid_error_pio_7_s1_agent_rsp_fifo_out_data;                                         // pid_error_pio_7_s1_agent_rsp_fifo:out_data -> pid_error_pio_7_s1_agent:rf_sink_data
	wire          pid_error_pio_7_s1_agent_rsp_fifo_out_ready;                                        // pid_error_pio_7_s1_agent:rf_sink_ready -> pid_error_pio_7_s1_agent_rsp_fifo:out_ready
	wire          pid_error_pio_7_s1_agent_rsp_fifo_out_startofpacket;                                // pid_error_pio_7_s1_agent_rsp_fifo:out_startofpacket -> pid_error_pio_7_s1_agent:rf_sink_startofpacket
	wire          pid_error_pio_7_s1_agent_rsp_fifo_out_endofpacket;                                  // pid_error_pio_7_s1_agent_rsp_fifo:out_endofpacket -> pid_error_pio_7_s1_agent:rf_sink_endofpacket
	wire          pid_error_pio_7_s1_agent_rdata_fifo_src_valid;                                      // pid_error_pio_7_s1_agent:rdata_fifo_src_valid -> pid_error_pio_7_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_error_pio_7_s1_agent_rdata_fifo_src_data;                                       // pid_error_pio_7_s1_agent:rdata_fifo_src_data -> pid_error_pio_7_s1_agent_rdata_fifo:in_data
	wire          pid_error_pio_7_s1_agent_rdata_fifo_src_ready;                                      // pid_error_pio_7_s1_agent_rdata_fifo:in_ready -> pid_error_pio_7_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_1_s1_agent_m0_readdata;                                          // pid_correction_pio_1_s1_translator:uav_readdata -> pid_correction_pio_1_s1_agent:m0_readdata
	wire          pid_correction_pio_1_s1_agent_m0_waitrequest;                                       // pid_correction_pio_1_s1_translator:uav_waitrequest -> pid_correction_pio_1_s1_agent:m0_waitrequest
	wire          pid_correction_pio_1_s1_agent_m0_debugaccess;                                       // pid_correction_pio_1_s1_agent:m0_debugaccess -> pid_correction_pio_1_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_1_s1_agent_m0_address;                                           // pid_correction_pio_1_s1_agent:m0_address -> pid_correction_pio_1_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_1_s1_agent_m0_byteenable;                                        // pid_correction_pio_1_s1_agent:m0_byteenable -> pid_correction_pio_1_s1_translator:uav_byteenable
	wire          pid_correction_pio_1_s1_agent_m0_read;                                              // pid_correction_pio_1_s1_agent:m0_read -> pid_correction_pio_1_s1_translator:uav_read
	wire          pid_correction_pio_1_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_1_s1_translator:uav_readdatavalid -> pid_correction_pio_1_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_1_s1_agent_m0_lock;                                              // pid_correction_pio_1_s1_agent:m0_lock -> pid_correction_pio_1_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_1_s1_agent_m0_writedata;                                         // pid_correction_pio_1_s1_agent:m0_writedata -> pid_correction_pio_1_s1_translator:uav_writedata
	wire          pid_correction_pio_1_s1_agent_m0_write;                                             // pid_correction_pio_1_s1_agent:m0_write -> pid_correction_pio_1_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_1_s1_agent_m0_burstcount;                                        // pid_correction_pio_1_s1_agent:m0_burstcount -> pid_correction_pio_1_s1_translator:uav_burstcount
	wire          pid_correction_pio_1_s1_agent_rf_source_valid;                                      // pid_correction_pio_1_s1_agent:rf_source_valid -> pid_correction_pio_1_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_1_s1_agent_rf_source_data;                                       // pid_correction_pio_1_s1_agent:rf_source_data -> pid_correction_pio_1_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_1_s1_agent_rf_source_ready;                                      // pid_correction_pio_1_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_1_s1_agent:rf_source_ready
	wire          pid_correction_pio_1_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_1_s1_agent:rf_source_startofpacket -> pid_correction_pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_1_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_1_s1_agent:rf_source_endofpacket -> pid_correction_pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_1_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_1_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_1_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_1_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_1_s1_agent_rsp_fifo:out_data -> pid_correction_pio_1_s1_agent:rf_sink_data
	wire          pid_correction_pio_1_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_1_s1_agent:rf_sink_ready -> pid_correction_pio_1_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_1_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_1_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_1_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_1_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_1_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_1_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_1_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_1_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_1_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_1_s1_agent:rdata_fifo_src_data -> pid_correction_pio_1_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_1_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_1_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_2_s1_agent_m0_readdata;                                          // pid_correction_pio_2_s1_translator:uav_readdata -> pid_correction_pio_2_s1_agent:m0_readdata
	wire          pid_correction_pio_2_s1_agent_m0_waitrequest;                                       // pid_correction_pio_2_s1_translator:uav_waitrequest -> pid_correction_pio_2_s1_agent:m0_waitrequest
	wire          pid_correction_pio_2_s1_agent_m0_debugaccess;                                       // pid_correction_pio_2_s1_agent:m0_debugaccess -> pid_correction_pio_2_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_2_s1_agent_m0_address;                                           // pid_correction_pio_2_s1_agent:m0_address -> pid_correction_pio_2_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_2_s1_agent_m0_byteenable;                                        // pid_correction_pio_2_s1_agent:m0_byteenable -> pid_correction_pio_2_s1_translator:uav_byteenable
	wire          pid_correction_pio_2_s1_agent_m0_read;                                              // pid_correction_pio_2_s1_agent:m0_read -> pid_correction_pio_2_s1_translator:uav_read
	wire          pid_correction_pio_2_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_2_s1_translator:uav_readdatavalid -> pid_correction_pio_2_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_2_s1_agent_m0_lock;                                              // pid_correction_pio_2_s1_agent:m0_lock -> pid_correction_pio_2_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_2_s1_agent_m0_writedata;                                         // pid_correction_pio_2_s1_agent:m0_writedata -> pid_correction_pio_2_s1_translator:uav_writedata
	wire          pid_correction_pio_2_s1_agent_m0_write;                                             // pid_correction_pio_2_s1_agent:m0_write -> pid_correction_pio_2_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_2_s1_agent_m0_burstcount;                                        // pid_correction_pio_2_s1_agent:m0_burstcount -> pid_correction_pio_2_s1_translator:uav_burstcount
	wire          pid_correction_pio_2_s1_agent_rf_source_valid;                                      // pid_correction_pio_2_s1_agent:rf_source_valid -> pid_correction_pio_2_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_2_s1_agent_rf_source_data;                                       // pid_correction_pio_2_s1_agent:rf_source_data -> pid_correction_pio_2_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_2_s1_agent_rf_source_ready;                                      // pid_correction_pio_2_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_2_s1_agent:rf_source_ready
	wire          pid_correction_pio_2_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_2_s1_agent:rf_source_startofpacket -> pid_correction_pio_2_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_2_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_2_s1_agent:rf_source_endofpacket -> pid_correction_pio_2_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_2_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_2_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_2_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_2_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_2_s1_agent_rsp_fifo:out_data -> pid_correction_pio_2_s1_agent:rf_sink_data
	wire          pid_correction_pio_2_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_2_s1_agent:rf_sink_ready -> pid_correction_pio_2_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_2_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_2_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_2_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_2_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_2_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_2_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_2_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_2_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_2_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_2_s1_agent:rdata_fifo_src_data -> pid_correction_pio_2_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_2_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_2_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_3_s1_agent_m0_readdata;                                          // pid_correction_pio_3_s1_translator:uav_readdata -> pid_correction_pio_3_s1_agent:m0_readdata
	wire          pid_correction_pio_3_s1_agent_m0_waitrequest;                                       // pid_correction_pio_3_s1_translator:uav_waitrequest -> pid_correction_pio_3_s1_agent:m0_waitrequest
	wire          pid_correction_pio_3_s1_agent_m0_debugaccess;                                       // pid_correction_pio_3_s1_agent:m0_debugaccess -> pid_correction_pio_3_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_3_s1_agent_m0_address;                                           // pid_correction_pio_3_s1_agent:m0_address -> pid_correction_pio_3_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_3_s1_agent_m0_byteenable;                                        // pid_correction_pio_3_s1_agent:m0_byteenable -> pid_correction_pio_3_s1_translator:uav_byteenable
	wire          pid_correction_pio_3_s1_agent_m0_read;                                              // pid_correction_pio_3_s1_agent:m0_read -> pid_correction_pio_3_s1_translator:uav_read
	wire          pid_correction_pio_3_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_3_s1_translator:uav_readdatavalid -> pid_correction_pio_3_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_3_s1_agent_m0_lock;                                              // pid_correction_pio_3_s1_agent:m0_lock -> pid_correction_pio_3_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_3_s1_agent_m0_writedata;                                         // pid_correction_pio_3_s1_agent:m0_writedata -> pid_correction_pio_3_s1_translator:uav_writedata
	wire          pid_correction_pio_3_s1_agent_m0_write;                                             // pid_correction_pio_3_s1_agent:m0_write -> pid_correction_pio_3_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_3_s1_agent_m0_burstcount;                                        // pid_correction_pio_3_s1_agent:m0_burstcount -> pid_correction_pio_3_s1_translator:uav_burstcount
	wire          pid_correction_pio_3_s1_agent_rf_source_valid;                                      // pid_correction_pio_3_s1_agent:rf_source_valid -> pid_correction_pio_3_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_3_s1_agent_rf_source_data;                                       // pid_correction_pio_3_s1_agent:rf_source_data -> pid_correction_pio_3_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_3_s1_agent_rf_source_ready;                                      // pid_correction_pio_3_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_3_s1_agent:rf_source_ready
	wire          pid_correction_pio_3_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_3_s1_agent:rf_source_startofpacket -> pid_correction_pio_3_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_3_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_3_s1_agent:rf_source_endofpacket -> pid_correction_pio_3_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_3_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_3_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_3_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_3_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_3_s1_agent_rsp_fifo:out_data -> pid_correction_pio_3_s1_agent:rf_sink_data
	wire          pid_correction_pio_3_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_3_s1_agent:rf_sink_ready -> pid_correction_pio_3_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_3_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_3_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_3_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_3_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_3_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_3_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_3_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_3_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_3_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_3_s1_agent:rdata_fifo_src_data -> pid_correction_pio_3_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_3_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_3_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_5_s1_agent_m0_readdata;                                          // pid_correction_pio_5_s1_translator:uav_readdata -> pid_correction_pio_5_s1_agent:m0_readdata
	wire          pid_correction_pio_5_s1_agent_m0_waitrequest;                                       // pid_correction_pio_5_s1_translator:uav_waitrequest -> pid_correction_pio_5_s1_agent:m0_waitrequest
	wire          pid_correction_pio_5_s1_agent_m0_debugaccess;                                       // pid_correction_pio_5_s1_agent:m0_debugaccess -> pid_correction_pio_5_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_5_s1_agent_m0_address;                                           // pid_correction_pio_5_s1_agent:m0_address -> pid_correction_pio_5_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_5_s1_agent_m0_byteenable;                                        // pid_correction_pio_5_s1_agent:m0_byteenable -> pid_correction_pio_5_s1_translator:uav_byteenable
	wire          pid_correction_pio_5_s1_agent_m0_read;                                              // pid_correction_pio_5_s1_agent:m0_read -> pid_correction_pio_5_s1_translator:uav_read
	wire          pid_correction_pio_5_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_5_s1_translator:uav_readdatavalid -> pid_correction_pio_5_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_5_s1_agent_m0_lock;                                              // pid_correction_pio_5_s1_agent:m0_lock -> pid_correction_pio_5_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_5_s1_agent_m0_writedata;                                         // pid_correction_pio_5_s1_agent:m0_writedata -> pid_correction_pio_5_s1_translator:uav_writedata
	wire          pid_correction_pio_5_s1_agent_m0_write;                                             // pid_correction_pio_5_s1_agent:m0_write -> pid_correction_pio_5_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_5_s1_agent_m0_burstcount;                                        // pid_correction_pio_5_s1_agent:m0_burstcount -> pid_correction_pio_5_s1_translator:uav_burstcount
	wire          pid_correction_pio_5_s1_agent_rf_source_valid;                                      // pid_correction_pio_5_s1_agent:rf_source_valid -> pid_correction_pio_5_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_5_s1_agent_rf_source_data;                                       // pid_correction_pio_5_s1_agent:rf_source_data -> pid_correction_pio_5_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_5_s1_agent_rf_source_ready;                                      // pid_correction_pio_5_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_5_s1_agent:rf_source_ready
	wire          pid_correction_pio_5_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_5_s1_agent:rf_source_startofpacket -> pid_correction_pio_5_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_5_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_5_s1_agent:rf_source_endofpacket -> pid_correction_pio_5_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_5_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_5_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_5_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_5_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_5_s1_agent_rsp_fifo:out_data -> pid_correction_pio_5_s1_agent:rf_sink_data
	wire          pid_correction_pio_5_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_5_s1_agent:rf_sink_ready -> pid_correction_pio_5_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_5_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_5_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_5_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_5_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_5_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_5_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_5_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_5_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_5_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_5_s1_agent:rdata_fifo_src_data -> pid_correction_pio_5_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_5_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_5_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_6_s1_agent_m0_readdata;                                          // pid_correction_pio_6_s1_translator:uav_readdata -> pid_correction_pio_6_s1_agent:m0_readdata
	wire          pid_correction_pio_6_s1_agent_m0_waitrequest;                                       // pid_correction_pio_6_s1_translator:uav_waitrequest -> pid_correction_pio_6_s1_agent:m0_waitrequest
	wire          pid_correction_pio_6_s1_agent_m0_debugaccess;                                       // pid_correction_pio_6_s1_agent:m0_debugaccess -> pid_correction_pio_6_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_6_s1_agent_m0_address;                                           // pid_correction_pio_6_s1_agent:m0_address -> pid_correction_pio_6_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_6_s1_agent_m0_byteenable;                                        // pid_correction_pio_6_s1_agent:m0_byteenable -> pid_correction_pio_6_s1_translator:uav_byteenable
	wire          pid_correction_pio_6_s1_agent_m0_read;                                              // pid_correction_pio_6_s1_agent:m0_read -> pid_correction_pio_6_s1_translator:uav_read
	wire          pid_correction_pio_6_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_6_s1_translator:uav_readdatavalid -> pid_correction_pio_6_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_6_s1_agent_m0_lock;                                              // pid_correction_pio_6_s1_agent:m0_lock -> pid_correction_pio_6_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_6_s1_agent_m0_writedata;                                         // pid_correction_pio_6_s1_agent:m0_writedata -> pid_correction_pio_6_s1_translator:uav_writedata
	wire          pid_correction_pio_6_s1_agent_m0_write;                                             // pid_correction_pio_6_s1_agent:m0_write -> pid_correction_pio_6_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_6_s1_agent_m0_burstcount;                                        // pid_correction_pio_6_s1_agent:m0_burstcount -> pid_correction_pio_6_s1_translator:uav_burstcount
	wire          pid_correction_pio_6_s1_agent_rf_source_valid;                                      // pid_correction_pio_6_s1_agent:rf_source_valid -> pid_correction_pio_6_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_6_s1_agent_rf_source_data;                                       // pid_correction_pio_6_s1_agent:rf_source_data -> pid_correction_pio_6_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_6_s1_agent_rf_source_ready;                                      // pid_correction_pio_6_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_6_s1_agent:rf_source_ready
	wire          pid_correction_pio_6_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_6_s1_agent:rf_source_startofpacket -> pid_correction_pio_6_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_6_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_6_s1_agent:rf_source_endofpacket -> pid_correction_pio_6_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_6_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_6_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_6_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_6_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_6_s1_agent_rsp_fifo:out_data -> pid_correction_pio_6_s1_agent:rf_sink_data
	wire          pid_correction_pio_6_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_6_s1_agent:rf_sink_ready -> pid_correction_pio_6_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_6_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_6_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_6_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_6_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_6_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_6_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_6_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_6_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_6_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_6_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_6_s1_agent:rdata_fifo_src_data -> pid_correction_pio_6_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_6_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_6_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_6_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_7_s1_agent_m0_readdata;                                          // pid_correction_pio_7_s1_translator:uav_readdata -> pid_correction_pio_7_s1_agent:m0_readdata
	wire          pid_correction_pio_7_s1_agent_m0_waitrequest;                                       // pid_correction_pio_7_s1_translator:uav_waitrequest -> pid_correction_pio_7_s1_agent:m0_waitrequest
	wire          pid_correction_pio_7_s1_agent_m0_debugaccess;                                       // pid_correction_pio_7_s1_agent:m0_debugaccess -> pid_correction_pio_7_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_7_s1_agent_m0_address;                                           // pid_correction_pio_7_s1_agent:m0_address -> pid_correction_pio_7_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_7_s1_agent_m0_byteenable;                                        // pid_correction_pio_7_s1_agent:m0_byteenable -> pid_correction_pio_7_s1_translator:uav_byteenable
	wire          pid_correction_pio_7_s1_agent_m0_read;                                              // pid_correction_pio_7_s1_agent:m0_read -> pid_correction_pio_7_s1_translator:uav_read
	wire          pid_correction_pio_7_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_7_s1_translator:uav_readdatavalid -> pid_correction_pio_7_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_7_s1_agent_m0_lock;                                              // pid_correction_pio_7_s1_agent:m0_lock -> pid_correction_pio_7_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_7_s1_agent_m0_writedata;                                         // pid_correction_pio_7_s1_agent:m0_writedata -> pid_correction_pio_7_s1_translator:uav_writedata
	wire          pid_correction_pio_7_s1_agent_m0_write;                                             // pid_correction_pio_7_s1_agent:m0_write -> pid_correction_pio_7_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_7_s1_agent_m0_burstcount;                                        // pid_correction_pio_7_s1_agent:m0_burstcount -> pid_correction_pio_7_s1_translator:uav_burstcount
	wire          pid_correction_pio_7_s1_agent_rf_source_valid;                                      // pid_correction_pio_7_s1_agent:rf_source_valid -> pid_correction_pio_7_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_7_s1_agent_rf_source_data;                                       // pid_correction_pio_7_s1_agent:rf_source_data -> pid_correction_pio_7_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_7_s1_agent_rf_source_ready;                                      // pid_correction_pio_7_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_7_s1_agent:rf_source_ready
	wire          pid_correction_pio_7_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_7_s1_agent:rf_source_startofpacket -> pid_correction_pio_7_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_7_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_7_s1_agent:rf_source_endofpacket -> pid_correction_pio_7_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_7_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_7_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_7_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_7_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_7_s1_agent_rsp_fifo:out_data -> pid_correction_pio_7_s1_agent:rf_sink_data
	wire          pid_correction_pio_7_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_7_s1_agent:rf_sink_ready -> pid_correction_pio_7_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_7_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_7_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_7_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_7_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_7_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_7_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_7_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_7_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_7_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_7_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_7_s1_agent:rdata_fifo_src_data -> pid_correction_pio_7_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_7_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_7_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_7_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_correction_pio_4_s1_agent_m0_readdata;                                          // pid_correction_pio_4_s1_translator:uav_readdata -> pid_correction_pio_4_s1_agent:m0_readdata
	wire          pid_correction_pio_4_s1_agent_m0_waitrequest;                                       // pid_correction_pio_4_s1_translator:uav_waitrequest -> pid_correction_pio_4_s1_agent:m0_waitrequest
	wire          pid_correction_pio_4_s1_agent_m0_debugaccess;                                       // pid_correction_pio_4_s1_agent:m0_debugaccess -> pid_correction_pio_4_s1_translator:uav_debugaccess
	wire   [31:0] pid_correction_pio_4_s1_agent_m0_address;                                           // pid_correction_pio_4_s1_agent:m0_address -> pid_correction_pio_4_s1_translator:uav_address
	wire    [3:0] pid_correction_pio_4_s1_agent_m0_byteenable;                                        // pid_correction_pio_4_s1_agent:m0_byteenable -> pid_correction_pio_4_s1_translator:uav_byteenable
	wire          pid_correction_pio_4_s1_agent_m0_read;                                              // pid_correction_pio_4_s1_agent:m0_read -> pid_correction_pio_4_s1_translator:uav_read
	wire          pid_correction_pio_4_s1_agent_m0_readdatavalid;                                     // pid_correction_pio_4_s1_translator:uav_readdatavalid -> pid_correction_pio_4_s1_agent:m0_readdatavalid
	wire          pid_correction_pio_4_s1_agent_m0_lock;                                              // pid_correction_pio_4_s1_agent:m0_lock -> pid_correction_pio_4_s1_translator:uav_lock
	wire   [31:0] pid_correction_pio_4_s1_agent_m0_writedata;                                         // pid_correction_pio_4_s1_agent:m0_writedata -> pid_correction_pio_4_s1_translator:uav_writedata
	wire          pid_correction_pio_4_s1_agent_m0_write;                                             // pid_correction_pio_4_s1_agent:m0_write -> pid_correction_pio_4_s1_translator:uav_write
	wire    [2:0] pid_correction_pio_4_s1_agent_m0_burstcount;                                        // pid_correction_pio_4_s1_agent:m0_burstcount -> pid_correction_pio_4_s1_translator:uav_burstcount
	wire          pid_correction_pio_4_s1_agent_rf_source_valid;                                      // pid_correction_pio_4_s1_agent:rf_source_valid -> pid_correction_pio_4_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_correction_pio_4_s1_agent_rf_source_data;                                       // pid_correction_pio_4_s1_agent:rf_source_data -> pid_correction_pio_4_s1_agent_rsp_fifo:in_data
	wire          pid_correction_pio_4_s1_agent_rf_source_ready;                                      // pid_correction_pio_4_s1_agent_rsp_fifo:in_ready -> pid_correction_pio_4_s1_agent:rf_source_ready
	wire          pid_correction_pio_4_s1_agent_rf_source_startofpacket;                              // pid_correction_pio_4_s1_agent:rf_source_startofpacket -> pid_correction_pio_4_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_correction_pio_4_s1_agent_rf_source_endofpacket;                                // pid_correction_pio_4_s1_agent:rf_source_endofpacket -> pid_correction_pio_4_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_correction_pio_4_s1_agent_rsp_fifo_out_valid;                                   // pid_correction_pio_4_s1_agent_rsp_fifo:out_valid -> pid_correction_pio_4_s1_agent:rf_sink_valid
	wire  [135:0] pid_correction_pio_4_s1_agent_rsp_fifo_out_data;                                    // pid_correction_pio_4_s1_agent_rsp_fifo:out_data -> pid_correction_pio_4_s1_agent:rf_sink_data
	wire          pid_correction_pio_4_s1_agent_rsp_fifo_out_ready;                                   // pid_correction_pio_4_s1_agent:rf_sink_ready -> pid_correction_pio_4_s1_agent_rsp_fifo:out_ready
	wire          pid_correction_pio_4_s1_agent_rsp_fifo_out_startofpacket;                           // pid_correction_pio_4_s1_agent_rsp_fifo:out_startofpacket -> pid_correction_pio_4_s1_agent:rf_sink_startofpacket
	wire          pid_correction_pio_4_s1_agent_rsp_fifo_out_endofpacket;                             // pid_correction_pio_4_s1_agent_rsp_fifo:out_endofpacket -> pid_correction_pio_4_s1_agent:rf_sink_endofpacket
	wire          pid_correction_pio_4_s1_agent_rdata_fifo_src_valid;                                 // pid_correction_pio_4_s1_agent:rdata_fifo_src_valid -> pid_correction_pio_4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_correction_pio_4_s1_agent_rdata_fifo_src_data;                                  // pid_correction_pio_4_s1_agent:rdata_fifo_src_data -> pid_correction_pio_4_s1_agent_rdata_fifo:in_data
	wire          pid_correction_pio_4_s1_agent_rdata_fifo_src_ready;                                 // pid_correction_pio_4_s1_agent_rdata_fifo:in_ready -> pid_correction_pio_4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pid_values_pio_s1_agent_m0_readdata;                                                // pid_values_pio_s1_translator:uav_readdata -> pid_values_pio_s1_agent:m0_readdata
	wire          pid_values_pio_s1_agent_m0_waitrequest;                                             // pid_values_pio_s1_translator:uav_waitrequest -> pid_values_pio_s1_agent:m0_waitrequest
	wire          pid_values_pio_s1_agent_m0_debugaccess;                                             // pid_values_pio_s1_agent:m0_debugaccess -> pid_values_pio_s1_translator:uav_debugaccess
	wire   [31:0] pid_values_pio_s1_agent_m0_address;                                                 // pid_values_pio_s1_agent:m0_address -> pid_values_pio_s1_translator:uav_address
	wire    [3:0] pid_values_pio_s1_agent_m0_byteenable;                                              // pid_values_pio_s1_agent:m0_byteenable -> pid_values_pio_s1_translator:uav_byteenable
	wire          pid_values_pio_s1_agent_m0_read;                                                    // pid_values_pio_s1_agent:m0_read -> pid_values_pio_s1_translator:uav_read
	wire          pid_values_pio_s1_agent_m0_readdatavalid;                                           // pid_values_pio_s1_translator:uav_readdatavalid -> pid_values_pio_s1_agent:m0_readdatavalid
	wire          pid_values_pio_s1_agent_m0_lock;                                                    // pid_values_pio_s1_agent:m0_lock -> pid_values_pio_s1_translator:uav_lock
	wire   [31:0] pid_values_pio_s1_agent_m0_writedata;                                               // pid_values_pio_s1_agent:m0_writedata -> pid_values_pio_s1_translator:uav_writedata
	wire          pid_values_pio_s1_agent_m0_write;                                                   // pid_values_pio_s1_agent:m0_write -> pid_values_pio_s1_translator:uav_write
	wire    [2:0] pid_values_pio_s1_agent_m0_burstcount;                                              // pid_values_pio_s1_agent:m0_burstcount -> pid_values_pio_s1_translator:uav_burstcount
	wire          pid_values_pio_s1_agent_rf_source_valid;                                            // pid_values_pio_s1_agent:rf_source_valid -> pid_values_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pid_values_pio_s1_agent_rf_source_data;                                             // pid_values_pio_s1_agent:rf_source_data -> pid_values_pio_s1_agent_rsp_fifo:in_data
	wire          pid_values_pio_s1_agent_rf_source_ready;                                            // pid_values_pio_s1_agent_rsp_fifo:in_ready -> pid_values_pio_s1_agent:rf_source_ready
	wire          pid_values_pio_s1_agent_rf_source_startofpacket;                                    // pid_values_pio_s1_agent:rf_source_startofpacket -> pid_values_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          pid_values_pio_s1_agent_rf_source_endofpacket;                                      // pid_values_pio_s1_agent:rf_source_endofpacket -> pid_values_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          pid_values_pio_s1_agent_rsp_fifo_out_valid;                                         // pid_values_pio_s1_agent_rsp_fifo:out_valid -> pid_values_pio_s1_agent:rf_sink_valid
	wire  [135:0] pid_values_pio_s1_agent_rsp_fifo_out_data;                                          // pid_values_pio_s1_agent_rsp_fifo:out_data -> pid_values_pio_s1_agent:rf_sink_data
	wire          pid_values_pio_s1_agent_rsp_fifo_out_ready;                                         // pid_values_pio_s1_agent:rf_sink_ready -> pid_values_pio_s1_agent_rsp_fifo:out_ready
	wire          pid_values_pio_s1_agent_rsp_fifo_out_startofpacket;                                 // pid_values_pio_s1_agent_rsp_fifo:out_startofpacket -> pid_values_pio_s1_agent:rf_sink_startofpacket
	wire          pid_values_pio_s1_agent_rsp_fifo_out_endofpacket;                                   // pid_values_pio_s1_agent_rsp_fifo:out_endofpacket -> pid_values_pio_s1_agent:rf_sink_endofpacket
	wire          pid_values_pio_s1_agent_rdata_fifo_src_valid;                                       // pid_values_pio_s1_agent:rdata_fifo_src_valid -> pid_values_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pid_values_pio_s1_agent_rdata_fifo_src_data;                                        // pid_values_pio_s1_agent:rdata_fifo_src_data -> pid_values_pio_s1_agent_rdata_fifo:in_data
	wire          pid_values_pio_s1_agent_rdata_fifo_src_ready;                                       // pid_values_pio_s1_agent_rdata_fifo:in_ready -> pid_values_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_0_s1_agent_m0_readdata;                                                     // pwm_pio_0_s1_translator:uav_readdata -> pwm_pio_0_s1_agent:m0_readdata
	wire          pwm_pio_0_s1_agent_m0_waitrequest;                                                  // pwm_pio_0_s1_translator:uav_waitrequest -> pwm_pio_0_s1_agent:m0_waitrequest
	wire          pwm_pio_0_s1_agent_m0_debugaccess;                                                  // pwm_pio_0_s1_agent:m0_debugaccess -> pwm_pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_0_s1_agent_m0_address;                                                      // pwm_pio_0_s1_agent:m0_address -> pwm_pio_0_s1_translator:uav_address
	wire    [3:0] pwm_pio_0_s1_agent_m0_byteenable;                                                   // pwm_pio_0_s1_agent:m0_byteenable -> pwm_pio_0_s1_translator:uav_byteenable
	wire          pwm_pio_0_s1_agent_m0_read;                                                         // pwm_pio_0_s1_agent:m0_read -> pwm_pio_0_s1_translator:uav_read
	wire          pwm_pio_0_s1_agent_m0_readdatavalid;                                                // pwm_pio_0_s1_translator:uav_readdatavalid -> pwm_pio_0_s1_agent:m0_readdatavalid
	wire          pwm_pio_0_s1_agent_m0_lock;                                                         // pwm_pio_0_s1_agent:m0_lock -> pwm_pio_0_s1_translator:uav_lock
	wire   [31:0] pwm_pio_0_s1_agent_m0_writedata;                                                    // pwm_pio_0_s1_agent:m0_writedata -> pwm_pio_0_s1_translator:uav_writedata
	wire          pwm_pio_0_s1_agent_m0_write;                                                        // pwm_pio_0_s1_agent:m0_write -> pwm_pio_0_s1_translator:uav_write
	wire    [2:0] pwm_pio_0_s1_agent_m0_burstcount;                                                   // pwm_pio_0_s1_agent:m0_burstcount -> pwm_pio_0_s1_translator:uav_burstcount
	wire          pwm_pio_0_s1_agent_rf_source_valid;                                                 // pwm_pio_0_s1_agent:rf_source_valid -> pwm_pio_0_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_0_s1_agent_rf_source_data;                                                  // pwm_pio_0_s1_agent:rf_source_data -> pwm_pio_0_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_0_s1_agent_rf_source_ready;                                                 // pwm_pio_0_s1_agent_rsp_fifo:in_ready -> pwm_pio_0_s1_agent:rf_source_ready
	wire          pwm_pio_0_s1_agent_rf_source_startofpacket;                                         // pwm_pio_0_s1_agent:rf_source_startofpacket -> pwm_pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_0_s1_agent_rf_source_endofpacket;                                           // pwm_pio_0_s1_agent:rf_source_endofpacket -> pwm_pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_0_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_0_s1_agent_rsp_fifo:out_valid -> pwm_pio_0_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_0_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_0_s1_agent_rsp_fifo:out_data -> pwm_pio_0_s1_agent:rf_sink_data
	wire          pwm_pio_0_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_0_s1_agent:rf_sink_ready -> pwm_pio_0_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_0_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_0_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_0_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_0_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_0_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_0_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_0_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_0_s1_agent:rdata_fifo_src_valid -> pwm_pio_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_0_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_0_s1_agent:rdata_fifo_src_data -> pwm_pio_0_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_0_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_0_s1_agent_rdata_fifo:in_ready -> pwm_pio_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] gpio_pio_1_s1_agent_m0_readdata;                                                    // gpio_pio_1_s1_translator:uav_readdata -> gpio_pio_1_s1_agent:m0_readdata
	wire          gpio_pio_1_s1_agent_m0_waitrequest;                                                 // gpio_pio_1_s1_translator:uav_waitrequest -> gpio_pio_1_s1_agent:m0_waitrequest
	wire          gpio_pio_1_s1_agent_m0_debugaccess;                                                 // gpio_pio_1_s1_agent:m0_debugaccess -> gpio_pio_1_s1_translator:uav_debugaccess
	wire   [31:0] gpio_pio_1_s1_agent_m0_address;                                                     // gpio_pio_1_s1_agent:m0_address -> gpio_pio_1_s1_translator:uav_address
	wire    [3:0] gpio_pio_1_s1_agent_m0_byteenable;                                                  // gpio_pio_1_s1_agent:m0_byteenable -> gpio_pio_1_s1_translator:uav_byteenable
	wire          gpio_pio_1_s1_agent_m0_read;                                                        // gpio_pio_1_s1_agent:m0_read -> gpio_pio_1_s1_translator:uav_read
	wire          gpio_pio_1_s1_agent_m0_readdatavalid;                                               // gpio_pio_1_s1_translator:uav_readdatavalid -> gpio_pio_1_s1_agent:m0_readdatavalid
	wire          gpio_pio_1_s1_agent_m0_lock;                                                        // gpio_pio_1_s1_agent:m0_lock -> gpio_pio_1_s1_translator:uav_lock
	wire   [31:0] gpio_pio_1_s1_agent_m0_writedata;                                                   // gpio_pio_1_s1_agent:m0_writedata -> gpio_pio_1_s1_translator:uav_writedata
	wire          gpio_pio_1_s1_agent_m0_write;                                                       // gpio_pio_1_s1_agent:m0_write -> gpio_pio_1_s1_translator:uav_write
	wire    [2:0] gpio_pio_1_s1_agent_m0_burstcount;                                                  // gpio_pio_1_s1_agent:m0_burstcount -> gpio_pio_1_s1_translator:uav_burstcount
	wire          gpio_pio_1_s1_agent_rf_source_valid;                                                // gpio_pio_1_s1_agent:rf_source_valid -> gpio_pio_1_s1_agent_rsp_fifo:in_valid
	wire  [135:0] gpio_pio_1_s1_agent_rf_source_data;                                                 // gpio_pio_1_s1_agent:rf_source_data -> gpio_pio_1_s1_agent_rsp_fifo:in_data
	wire          gpio_pio_1_s1_agent_rf_source_ready;                                                // gpio_pio_1_s1_agent_rsp_fifo:in_ready -> gpio_pio_1_s1_agent:rf_source_ready
	wire          gpio_pio_1_s1_agent_rf_source_startofpacket;                                        // gpio_pio_1_s1_agent:rf_source_startofpacket -> gpio_pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          gpio_pio_1_s1_agent_rf_source_endofpacket;                                          // gpio_pio_1_s1_agent:rf_source_endofpacket -> gpio_pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          gpio_pio_1_s1_agent_rsp_fifo_out_valid;                                             // gpio_pio_1_s1_agent_rsp_fifo:out_valid -> gpio_pio_1_s1_agent:rf_sink_valid
	wire  [135:0] gpio_pio_1_s1_agent_rsp_fifo_out_data;                                              // gpio_pio_1_s1_agent_rsp_fifo:out_data -> gpio_pio_1_s1_agent:rf_sink_data
	wire          gpio_pio_1_s1_agent_rsp_fifo_out_ready;                                             // gpio_pio_1_s1_agent:rf_sink_ready -> gpio_pio_1_s1_agent_rsp_fifo:out_ready
	wire          gpio_pio_1_s1_agent_rsp_fifo_out_startofpacket;                                     // gpio_pio_1_s1_agent_rsp_fifo:out_startofpacket -> gpio_pio_1_s1_agent:rf_sink_startofpacket
	wire          gpio_pio_1_s1_agent_rsp_fifo_out_endofpacket;                                       // gpio_pio_1_s1_agent_rsp_fifo:out_endofpacket -> gpio_pio_1_s1_agent:rf_sink_endofpacket
	wire          gpio_pio_1_s1_agent_rdata_fifo_src_valid;                                           // gpio_pio_1_s1_agent:rdata_fifo_src_valid -> gpio_pio_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpio_pio_1_s1_agent_rdata_fifo_src_data;                                            // gpio_pio_1_s1_agent:rdata_fifo_src_data -> gpio_pio_1_s1_agent_rdata_fifo:in_data
	wire          gpio_pio_1_s1_agent_rdata_fifo_src_ready;                                           // gpio_pio_1_s1_agent_rdata_fifo:in_ready -> gpio_pio_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_1_s1_agent_m0_readdata;                                                     // pwm_pio_1_s1_translator:uav_readdata -> pwm_pio_1_s1_agent:m0_readdata
	wire          pwm_pio_1_s1_agent_m0_waitrequest;                                                  // pwm_pio_1_s1_translator:uav_waitrequest -> pwm_pio_1_s1_agent:m0_waitrequest
	wire          pwm_pio_1_s1_agent_m0_debugaccess;                                                  // pwm_pio_1_s1_agent:m0_debugaccess -> pwm_pio_1_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_1_s1_agent_m0_address;                                                      // pwm_pio_1_s1_agent:m0_address -> pwm_pio_1_s1_translator:uav_address
	wire    [3:0] pwm_pio_1_s1_agent_m0_byteenable;                                                   // pwm_pio_1_s1_agent:m0_byteenable -> pwm_pio_1_s1_translator:uav_byteenable
	wire          pwm_pio_1_s1_agent_m0_read;                                                         // pwm_pio_1_s1_agent:m0_read -> pwm_pio_1_s1_translator:uav_read
	wire          pwm_pio_1_s1_agent_m0_readdatavalid;                                                // pwm_pio_1_s1_translator:uav_readdatavalid -> pwm_pio_1_s1_agent:m0_readdatavalid
	wire          pwm_pio_1_s1_agent_m0_lock;                                                         // pwm_pio_1_s1_agent:m0_lock -> pwm_pio_1_s1_translator:uav_lock
	wire   [31:0] pwm_pio_1_s1_agent_m0_writedata;                                                    // pwm_pio_1_s1_agent:m0_writedata -> pwm_pio_1_s1_translator:uav_writedata
	wire          pwm_pio_1_s1_agent_m0_write;                                                        // pwm_pio_1_s1_agent:m0_write -> pwm_pio_1_s1_translator:uav_write
	wire    [2:0] pwm_pio_1_s1_agent_m0_burstcount;                                                   // pwm_pio_1_s1_agent:m0_burstcount -> pwm_pio_1_s1_translator:uav_burstcount
	wire          pwm_pio_1_s1_agent_rf_source_valid;                                                 // pwm_pio_1_s1_agent:rf_source_valid -> pwm_pio_1_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_1_s1_agent_rf_source_data;                                                  // pwm_pio_1_s1_agent:rf_source_data -> pwm_pio_1_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_1_s1_agent_rf_source_ready;                                                 // pwm_pio_1_s1_agent_rsp_fifo:in_ready -> pwm_pio_1_s1_agent:rf_source_ready
	wire          pwm_pio_1_s1_agent_rf_source_startofpacket;                                         // pwm_pio_1_s1_agent:rf_source_startofpacket -> pwm_pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_1_s1_agent_rf_source_endofpacket;                                           // pwm_pio_1_s1_agent:rf_source_endofpacket -> pwm_pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_1_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_1_s1_agent_rsp_fifo:out_valid -> pwm_pio_1_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_1_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_1_s1_agent_rsp_fifo:out_data -> pwm_pio_1_s1_agent:rf_sink_data
	wire          pwm_pio_1_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_1_s1_agent:rf_sink_ready -> pwm_pio_1_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_1_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_1_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_1_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_1_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_1_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_1_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_1_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_1_s1_agent:rdata_fifo_src_valid -> pwm_pio_1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_1_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_1_s1_agent:rdata_fifo_src_data -> pwm_pio_1_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_1_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_1_s1_agent_rdata_fifo:in_ready -> pwm_pio_1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_2_s1_agent_m0_readdata;                                                     // pwm_pio_2_s1_translator:uav_readdata -> pwm_pio_2_s1_agent:m0_readdata
	wire          pwm_pio_2_s1_agent_m0_waitrequest;                                                  // pwm_pio_2_s1_translator:uav_waitrequest -> pwm_pio_2_s1_agent:m0_waitrequest
	wire          pwm_pio_2_s1_agent_m0_debugaccess;                                                  // pwm_pio_2_s1_agent:m0_debugaccess -> pwm_pio_2_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_2_s1_agent_m0_address;                                                      // pwm_pio_2_s1_agent:m0_address -> pwm_pio_2_s1_translator:uav_address
	wire    [3:0] pwm_pio_2_s1_agent_m0_byteenable;                                                   // pwm_pio_2_s1_agent:m0_byteenable -> pwm_pio_2_s1_translator:uav_byteenable
	wire          pwm_pio_2_s1_agent_m0_read;                                                         // pwm_pio_2_s1_agent:m0_read -> pwm_pio_2_s1_translator:uav_read
	wire          pwm_pio_2_s1_agent_m0_readdatavalid;                                                // pwm_pio_2_s1_translator:uav_readdatavalid -> pwm_pio_2_s1_agent:m0_readdatavalid
	wire          pwm_pio_2_s1_agent_m0_lock;                                                         // pwm_pio_2_s1_agent:m0_lock -> pwm_pio_2_s1_translator:uav_lock
	wire   [31:0] pwm_pio_2_s1_agent_m0_writedata;                                                    // pwm_pio_2_s1_agent:m0_writedata -> pwm_pio_2_s1_translator:uav_writedata
	wire          pwm_pio_2_s1_agent_m0_write;                                                        // pwm_pio_2_s1_agent:m0_write -> pwm_pio_2_s1_translator:uav_write
	wire    [2:0] pwm_pio_2_s1_agent_m0_burstcount;                                                   // pwm_pio_2_s1_agent:m0_burstcount -> pwm_pio_2_s1_translator:uav_burstcount
	wire          pwm_pio_2_s1_agent_rf_source_valid;                                                 // pwm_pio_2_s1_agent:rf_source_valid -> pwm_pio_2_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_2_s1_agent_rf_source_data;                                                  // pwm_pio_2_s1_agent:rf_source_data -> pwm_pio_2_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_2_s1_agent_rf_source_ready;                                                 // pwm_pio_2_s1_agent_rsp_fifo:in_ready -> pwm_pio_2_s1_agent:rf_source_ready
	wire          pwm_pio_2_s1_agent_rf_source_startofpacket;                                         // pwm_pio_2_s1_agent:rf_source_startofpacket -> pwm_pio_2_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_2_s1_agent_rf_source_endofpacket;                                           // pwm_pio_2_s1_agent:rf_source_endofpacket -> pwm_pio_2_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_2_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_2_s1_agent_rsp_fifo:out_valid -> pwm_pio_2_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_2_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_2_s1_agent_rsp_fifo:out_data -> pwm_pio_2_s1_agent:rf_sink_data
	wire          pwm_pio_2_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_2_s1_agent:rf_sink_ready -> pwm_pio_2_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_2_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_2_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_2_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_2_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_2_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_2_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_2_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_2_s1_agent:rdata_fifo_src_valid -> pwm_pio_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_2_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_2_s1_agent:rdata_fifo_src_data -> pwm_pio_2_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_2_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_2_s1_agent_rdata_fifo:in_ready -> pwm_pio_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_3_s1_agent_m0_readdata;                                                     // pwm_pio_3_s1_translator:uav_readdata -> pwm_pio_3_s1_agent:m0_readdata
	wire          pwm_pio_3_s1_agent_m0_waitrequest;                                                  // pwm_pio_3_s1_translator:uav_waitrequest -> pwm_pio_3_s1_agent:m0_waitrequest
	wire          pwm_pio_3_s1_agent_m0_debugaccess;                                                  // pwm_pio_3_s1_agent:m0_debugaccess -> pwm_pio_3_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_3_s1_agent_m0_address;                                                      // pwm_pio_3_s1_agent:m0_address -> pwm_pio_3_s1_translator:uav_address
	wire    [3:0] pwm_pio_3_s1_agent_m0_byteenable;                                                   // pwm_pio_3_s1_agent:m0_byteenable -> pwm_pio_3_s1_translator:uav_byteenable
	wire          pwm_pio_3_s1_agent_m0_read;                                                         // pwm_pio_3_s1_agent:m0_read -> pwm_pio_3_s1_translator:uav_read
	wire          pwm_pio_3_s1_agent_m0_readdatavalid;                                                // pwm_pio_3_s1_translator:uav_readdatavalid -> pwm_pio_3_s1_agent:m0_readdatavalid
	wire          pwm_pio_3_s1_agent_m0_lock;                                                         // pwm_pio_3_s1_agent:m0_lock -> pwm_pio_3_s1_translator:uav_lock
	wire   [31:0] pwm_pio_3_s1_agent_m0_writedata;                                                    // pwm_pio_3_s1_agent:m0_writedata -> pwm_pio_3_s1_translator:uav_writedata
	wire          pwm_pio_3_s1_agent_m0_write;                                                        // pwm_pio_3_s1_agent:m0_write -> pwm_pio_3_s1_translator:uav_write
	wire    [2:0] pwm_pio_3_s1_agent_m0_burstcount;                                                   // pwm_pio_3_s1_agent:m0_burstcount -> pwm_pio_3_s1_translator:uav_burstcount
	wire          pwm_pio_3_s1_agent_rf_source_valid;                                                 // pwm_pio_3_s1_agent:rf_source_valid -> pwm_pio_3_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_3_s1_agent_rf_source_data;                                                  // pwm_pio_3_s1_agent:rf_source_data -> pwm_pio_3_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_3_s1_agent_rf_source_ready;                                                 // pwm_pio_3_s1_agent_rsp_fifo:in_ready -> pwm_pio_3_s1_agent:rf_source_ready
	wire          pwm_pio_3_s1_agent_rf_source_startofpacket;                                         // pwm_pio_3_s1_agent:rf_source_startofpacket -> pwm_pio_3_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_3_s1_agent_rf_source_endofpacket;                                           // pwm_pio_3_s1_agent:rf_source_endofpacket -> pwm_pio_3_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_3_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_3_s1_agent_rsp_fifo:out_valid -> pwm_pio_3_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_3_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_3_s1_agent_rsp_fifo:out_data -> pwm_pio_3_s1_agent:rf_sink_data
	wire          pwm_pio_3_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_3_s1_agent:rf_sink_ready -> pwm_pio_3_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_3_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_3_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_3_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_3_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_3_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_3_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_3_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_3_s1_agent:rdata_fifo_src_valid -> pwm_pio_3_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_3_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_3_s1_agent:rdata_fifo_src_data -> pwm_pio_3_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_3_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_3_s1_agent_rdata_fifo:in_ready -> pwm_pio_3_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_4_s1_agent_m0_readdata;                                                     // pwm_pio_4_s1_translator:uav_readdata -> pwm_pio_4_s1_agent:m0_readdata
	wire          pwm_pio_4_s1_agent_m0_waitrequest;                                                  // pwm_pio_4_s1_translator:uav_waitrequest -> pwm_pio_4_s1_agent:m0_waitrequest
	wire          pwm_pio_4_s1_agent_m0_debugaccess;                                                  // pwm_pio_4_s1_agent:m0_debugaccess -> pwm_pio_4_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_4_s1_agent_m0_address;                                                      // pwm_pio_4_s1_agent:m0_address -> pwm_pio_4_s1_translator:uav_address
	wire    [3:0] pwm_pio_4_s1_agent_m0_byteenable;                                                   // pwm_pio_4_s1_agent:m0_byteenable -> pwm_pio_4_s1_translator:uav_byteenable
	wire          pwm_pio_4_s1_agent_m0_read;                                                         // pwm_pio_4_s1_agent:m0_read -> pwm_pio_4_s1_translator:uav_read
	wire          pwm_pio_4_s1_agent_m0_readdatavalid;                                                // pwm_pio_4_s1_translator:uav_readdatavalid -> pwm_pio_4_s1_agent:m0_readdatavalid
	wire          pwm_pio_4_s1_agent_m0_lock;                                                         // pwm_pio_4_s1_agent:m0_lock -> pwm_pio_4_s1_translator:uav_lock
	wire   [31:0] pwm_pio_4_s1_agent_m0_writedata;                                                    // pwm_pio_4_s1_agent:m0_writedata -> pwm_pio_4_s1_translator:uav_writedata
	wire          pwm_pio_4_s1_agent_m0_write;                                                        // pwm_pio_4_s1_agent:m0_write -> pwm_pio_4_s1_translator:uav_write
	wire    [2:0] pwm_pio_4_s1_agent_m0_burstcount;                                                   // pwm_pio_4_s1_agent:m0_burstcount -> pwm_pio_4_s1_translator:uav_burstcount
	wire          pwm_pio_4_s1_agent_rf_source_valid;                                                 // pwm_pio_4_s1_agent:rf_source_valid -> pwm_pio_4_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_4_s1_agent_rf_source_data;                                                  // pwm_pio_4_s1_agent:rf_source_data -> pwm_pio_4_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_4_s1_agent_rf_source_ready;                                                 // pwm_pio_4_s1_agent_rsp_fifo:in_ready -> pwm_pio_4_s1_agent:rf_source_ready
	wire          pwm_pio_4_s1_agent_rf_source_startofpacket;                                         // pwm_pio_4_s1_agent:rf_source_startofpacket -> pwm_pio_4_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_4_s1_agent_rf_source_endofpacket;                                           // pwm_pio_4_s1_agent:rf_source_endofpacket -> pwm_pio_4_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_4_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_4_s1_agent_rsp_fifo:out_valid -> pwm_pio_4_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_4_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_4_s1_agent_rsp_fifo:out_data -> pwm_pio_4_s1_agent:rf_sink_data
	wire          pwm_pio_4_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_4_s1_agent:rf_sink_ready -> pwm_pio_4_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_4_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_4_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_4_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_4_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_4_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_4_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_4_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_4_s1_agent:rdata_fifo_src_valid -> pwm_pio_4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_4_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_4_s1_agent:rdata_fifo_src_data -> pwm_pio_4_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_4_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_4_s1_agent_rdata_fifo:in_ready -> pwm_pio_4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_5_s1_agent_m0_readdata;                                                     // pwm_pio_5_s1_translator:uav_readdata -> pwm_pio_5_s1_agent:m0_readdata
	wire          pwm_pio_5_s1_agent_m0_waitrequest;                                                  // pwm_pio_5_s1_translator:uav_waitrequest -> pwm_pio_5_s1_agent:m0_waitrequest
	wire          pwm_pio_5_s1_agent_m0_debugaccess;                                                  // pwm_pio_5_s1_agent:m0_debugaccess -> pwm_pio_5_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_5_s1_agent_m0_address;                                                      // pwm_pio_5_s1_agent:m0_address -> pwm_pio_5_s1_translator:uav_address
	wire    [3:0] pwm_pio_5_s1_agent_m0_byteenable;                                                   // pwm_pio_5_s1_agent:m0_byteenable -> pwm_pio_5_s1_translator:uav_byteenable
	wire          pwm_pio_5_s1_agent_m0_read;                                                         // pwm_pio_5_s1_agent:m0_read -> pwm_pio_5_s1_translator:uav_read
	wire          pwm_pio_5_s1_agent_m0_readdatavalid;                                                // pwm_pio_5_s1_translator:uav_readdatavalid -> pwm_pio_5_s1_agent:m0_readdatavalid
	wire          pwm_pio_5_s1_agent_m0_lock;                                                         // pwm_pio_5_s1_agent:m0_lock -> pwm_pio_5_s1_translator:uav_lock
	wire   [31:0] pwm_pio_5_s1_agent_m0_writedata;                                                    // pwm_pio_5_s1_agent:m0_writedata -> pwm_pio_5_s1_translator:uav_writedata
	wire          pwm_pio_5_s1_agent_m0_write;                                                        // pwm_pio_5_s1_agent:m0_write -> pwm_pio_5_s1_translator:uav_write
	wire    [2:0] pwm_pio_5_s1_agent_m0_burstcount;                                                   // pwm_pio_5_s1_agent:m0_burstcount -> pwm_pio_5_s1_translator:uav_burstcount
	wire          pwm_pio_5_s1_agent_rf_source_valid;                                                 // pwm_pio_5_s1_agent:rf_source_valid -> pwm_pio_5_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_5_s1_agent_rf_source_data;                                                  // pwm_pio_5_s1_agent:rf_source_data -> pwm_pio_5_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_5_s1_agent_rf_source_ready;                                                 // pwm_pio_5_s1_agent_rsp_fifo:in_ready -> pwm_pio_5_s1_agent:rf_source_ready
	wire          pwm_pio_5_s1_agent_rf_source_startofpacket;                                         // pwm_pio_5_s1_agent:rf_source_startofpacket -> pwm_pio_5_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_5_s1_agent_rf_source_endofpacket;                                           // pwm_pio_5_s1_agent:rf_source_endofpacket -> pwm_pio_5_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_5_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_5_s1_agent_rsp_fifo:out_valid -> pwm_pio_5_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_5_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_5_s1_agent_rsp_fifo:out_data -> pwm_pio_5_s1_agent:rf_sink_data
	wire          pwm_pio_5_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_5_s1_agent:rf_sink_ready -> pwm_pio_5_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_5_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_5_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_5_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_5_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_5_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_5_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_5_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_5_s1_agent:rdata_fifo_src_valid -> pwm_pio_5_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_5_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_5_s1_agent:rdata_fifo_src_data -> pwm_pio_5_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_5_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_5_s1_agent_rdata_fifo:in_ready -> pwm_pio_5_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_6_s1_agent_m0_readdata;                                                     // pwm_pio_6_s1_translator:uav_readdata -> pwm_pio_6_s1_agent:m0_readdata
	wire          pwm_pio_6_s1_agent_m0_waitrequest;                                                  // pwm_pio_6_s1_translator:uav_waitrequest -> pwm_pio_6_s1_agent:m0_waitrequest
	wire          pwm_pio_6_s1_agent_m0_debugaccess;                                                  // pwm_pio_6_s1_agent:m0_debugaccess -> pwm_pio_6_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_6_s1_agent_m0_address;                                                      // pwm_pio_6_s1_agent:m0_address -> pwm_pio_6_s1_translator:uav_address
	wire    [3:0] pwm_pio_6_s1_agent_m0_byteenable;                                                   // pwm_pio_6_s1_agent:m0_byteenable -> pwm_pio_6_s1_translator:uav_byteenable
	wire          pwm_pio_6_s1_agent_m0_read;                                                         // pwm_pio_6_s1_agent:m0_read -> pwm_pio_6_s1_translator:uav_read
	wire          pwm_pio_6_s1_agent_m0_readdatavalid;                                                // pwm_pio_6_s1_translator:uav_readdatavalid -> pwm_pio_6_s1_agent:m0_readdatavalid
	wire          pwm_pio_6_s1_agent_m0_lock;                                                         // pwm_pio_6_s1_agent:m0_lock -> pwm_pio_6_s1_translator:uav_lock
	wire   [31:0] pwm_pio_6_s1_agent_m0_writedata;                                                    // pwm_pio_6_s1_agent:m0_writedata -> pwm_pio_6_s1_translator:uav_writedata
	wire          pwm_pio_6_s1_agent_m0_write;                                                        // pwm_pio_6_s1_agent:m0_write -> pwm_pio_6_s1_translator:uav_write
	wire    [2:0] pwm_pio_6_s1_agent_m0_burstcount;                                                   // pwm_pio_6_s1_agent:m0_burstcount -> pwm_pio_6_s1_translator:uav_burstcount
	wire          pwm_pio_6_s1_agent_rf_source_valid;                                                 // pwm_pio_6_s1_agent:rf_source_valid -> pwm_pio_6_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_6_s1_agent_rf_source_data;                                                  // pwm_pio_6_s1_agent:rf_source_data -> pwm_pio_6_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_6_s1_agent_rf_source_ready;                                                 // pwm_pio_6_s1_agent_rsp_fifo:in_ready -> pwm_pio_6_s1_agent:rf_source_ready
	wire          pwm_pio_6_s1_agent_rf_source_startofpacket;                                         // pwm_pio_6_s1_agent:rf_source_startofpacket -> pwm_pio_6_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_6_s1_agent_rf_source_endofpacket;                                           // pwm_pio_6_s1_agent:rf_source_endofpacket -> pwm_pio_6_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_6_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_6_s1_agent_rsp_fifo:out_valid -> pwm_pio_6_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_6_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_6_s1_agent_rsp_fifo:out_data -> pwm_pio_6_s1_agent:rf_sink_data
	wire          pwm_pio_6_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_6_s1_agent:rf_sink_ready -> pwm_pio_6_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_6_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_6_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_6_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_6_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_6_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_6_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_6_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_6_s1_agent:rdata_fifo_src_valid -> pwm_pio_6_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_6_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_6_s1_agent:rdata_fifo_src_data -> pwm_pio_6_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_6_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_6_s1_agent_rdata_fifo:in_ready -> pwm_pio_6_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pwm_pio_7_s1_agent_m0_readdata;                                                     // pwm_pio_7_s1_translator:uav_readdata -> pwm_pio_7_s1_agent:m0_readdata
	wire          pwm_pio_7_s1_agent_m0_waitrequest;                                                  // pwm_pio_7_s1_translator:uav_waitrequest -> pwm_pio_7_s1_agent:m0_waitrequest
	wire          pwm_pio_7_s1_agent_m0_debugaccess;                                                  // pwm_pio_7_s1_agent:m0_debugaccess -> pwm_pio_7_s1_translator:uav_debugaccess
	wire   [31:0] pwm_pio_7_s1_agent_m0_address;                                                      // pwm_pio_7_s1_agent:m0_address -> pwm_pio_7_s1_translator:uav_address
	wire    [3:0] pwm_pio_7_s1_agent_m0_byteenable;                                                   // pwm_pio_7_s1_agent:m0_byteenable -> pwm_pio_7_s1_translator:uav_byteenable
	wire          pwm_pio_7_s1_agent_m0_read;                                                         // pwm_pio_7_s1_agent:m0_read -> pwm_pio_7_s1_translator:uav_read
	wire          pwm_pio_7_s1_agent_m0_readdatavalid;                                                // pwm_pio_7_s1_translator:uav_readdatavalid -> pwm_pio_7_s1_agent:m0_readdatavalid
	wire          pwm_pio_7_s1_agent_m0_lock;                                                         // pwm_pio_7_s1_agent:m0_lock -> pwm_pio_7_s1_translator:uav_lock
	wire   [31:0] pwm_pio_7_s1_agent_m0_writedata;                                                    // pwm_pio_7_s1_agent:m0_writedata -> pwm_pio_7_s1_translator:uav_writedata
	wire          pwm_pio_7_s1_agent_m0_write;                                                        // pwm_pio_7_s1_agent:m0_write -> pwm_pio_7_s1_translator:uav_write
	wire    [2:0] pwm_pio_7_s1_agent_m0_burstcount;                                                   // pwm_pio_7_s1_agent:m0_burstcount -> pwm_pio_7_s1_translator:uav_burstcount
	wire          pwm_pio_7_s1_agent_rf_source_valid;                                                 // pwm_pio_7_s1_agent:rf_source_valid -> pwm_pio_7_s1_agent_rsp_fifo:in_valid
	wire  [135:0] pwm_pio_7_s1_agent_rf_source_data;                                                  // pwm_pio_7_s1_agent:rf_source_data -> pwm_pio_7_s1_agent_rsp_fifo:in_data
	wire          pwm_pio_7_s1_agent_rf_source_ready;                                                 // pwm_pio_7_s1_agent_rsp_fifo:in_ready -> pwm_pio_7_s1_agent:rf_source_ready
	wire          pwm_pio_7_s1_agent_rf_source_startofpacket;                                         // pwm_pio_7_s1_agent:rf_source_startofpacket -> pwm_pio_7_s1_agent_rsp_fifo:in_startofpacket
	wire          pwm_pio_7_s1_agent_rf_source_endofpacket;                                           // pwm_pio_7_s1_agent:rf_source_endofpacket -> pwm_pio_7_s1_agent_rsp_fifo:in_endofpacket
	wire          pwm_pio_7_s1_agent_rsp_fifo_out_valid;                                              // pwm_pio_7_s1_agent_rsp_fifo:out_valid -> pwm_pio_7_s1_agent:rf_sink_valid
	wire  [135:0] pwm_pio_7_s1_agent_rsp_fifo_out_data;                                               // pwm_pio_7_s1_agent_rsp_fifo:out_data -> pwm_pio_7_s1_agent:rf_sink_data
	wire          pwm_pio_7_s1_agent_rsp_fifo_out_ready;                                              // pwm_pio_7_s1_agent:rf_sink_ready -> pwm_pio_7_s1_agent_rsp_fifo:out_ready
	wire          pwm_pio_7_s1_agent_rsp_fifo_out_startofpacket;                                      // pwm_pio_7_s1_agent_rsp_fifo:out_startofpacket -> pwm_pio_7_s1_agent:rf_sink_startofpacket
	wire          pwm_pio_7_s1_agent_rsp_fifo_out_endofpacket;                                        // pwm_pio_7_s1_agent_rsp_fifo:out_endofpacket -> pwm_pio_7_s1_agent:rf_sink_endofpacket
	wire          pwm_pio_7_s1_agent_rdata_fifo_src_valid;                                            // pwm_pio_7_s1_agent:rdata_fifo_src_valid -> pwm_pio_7_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pwm_pio_7_s1_agent_rdata_fifo_src_data;                                             // pwm_pio_7_s1_agent:rdata_fifo_src_data -> pwm_pio_7_s1_agent_rdata_fifo:in_data
	wire          pwm_pio_7_s1_agent_rdata_fifo_src_ready;                                            // pwm_pio_7_s1_agent_rdata_fifo:in_ready -> pwm_pio_7_s1_agent:rdata_fifo_src_ready
	wire   [31:0] limit_pio_s1_agent_m0_readdata;                                                     // limit_pio_s1_translator:uav_readdata -> limit_pio_s1_agent:m0_readdata
	wire          limit_pio_s1_agent_m0_waitrequest;                                                  // limit_pio_s1_translator:uav_waitrequest -> limit_pio_s1_agent:m0_waitrequest
	wire          limit_pio_s1_agent_m0_debugaccess;                                                  // limit_pio_s1_agent:m0_debugaccess -> limit_pio_s1_translator:uav_debugaccess
	wire   [31:0] limit_pio_s1_agent_m0_address;                                                      // limit_pio_s1_agent:m0_address -> limit_pio_s1_translator:uav_address
	wire    [3:0] limit_pio_s1_agent_m0_byteenable;                                                   // limit_pio_s1_agent:m0_byteenable -> limit_pio_s1_translator:uav_byteenable
	wire          limit_pio_s1_agent_m0_read;                                                         // limit_pio_s1_agent:m0_read -> limit_pio_s1_translator:uav_read
	wire          limit_pio_s1_agent_m0_readdatavalid;                                                // limit_pio_s1_translator:uav_readdatavalid -> limit_pio_s1_agent:m0_readdatavalid
	wire          limit_pio_s1_agent_m0_lock;                                                         // limit_pio_s1_agent:m0_lock -> limit_pio_s1_translator:uav_lock
	wire   [31:0] limit_pio_s1_agent_m0_writedata;                                                    // limit_pio_s1_agent:m0_writedata -> limit_pio_s1_translator:uav_writedata
	wire          limit_pio_s1_agent_m0_write;                                                        // limit_pio_s1_agent:m0_write -> limit_pio_s1_translator:uav_write
	wire    [2:0] limit_pio_s1_agent_m0_burstcount;                                                   // limit_pio_s1_agent:m0_burstcount -> limit_pio_s1_translator:uav_burstcount
	wire          limit_pio_s1_agent_rf_source_valid;                                                 // limit_pio_s1_agent:rf_source_valid -> limit_pio_s1_agent_rsp_fifo:in_valid
	wire  [135:0] limit_pio_s1_agent_rf_source_data;                                                  // limit_pio_s1_agent:rf_source_data -> limit_pio_s1_agent_rsp_fifo:in_data
	wire          limit_pio_s1_agent_rf_source_ready;                                                 // limit_pio_s1_agent_rsp_fifo:in_ready -> limit_pio_s1_agent:rf_source_ready
	wire          limit_pio_s1_agent_rf_source_startofpacket;                                         // limit_pio_s1_agent:rf_source_startofpacket -> limit_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          limit_pio_s1_agent_rf_source_endofpacket;                                           // limit_pio_s1_agent:rf_source_endofpacket -> limit_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          limit_pio_s1_agent_rsp_fifo_out_valid;                                              // limit_pio_s1_agent_rsp_fifo:out_valid -> limit_pio_s1_agent:rf_sink_valid
	wire  [135:0] limit_pio_s1_agent_rsp_fifo_out_data;                                               // limit_pio_s1_agent_rsp_fifo:out_data -> limit_pio_s1_agent:rf_sink_data
	wire          limit_pio_s1_agent_rsp_fifo_out_ready;                                              // limit_pio_s1_agent:rf_sink_ready -> limit_pio_s1_agent_rsp_fifo:out_ready
	wire          limit_pio_s1_agent_rsp_fifo_out_startofpacket;                                      // limit_pio_s1_agent_rsp_fifo:out_startofpacket -> limit_pio_s1_agent:rf_sink_startofpacket
	wire          limit_pio_s1_agent_rsp_fifo_out_endofpacket;                                        // limit_pio_s1_agent_rsp_fifo:out_endofpacket -> limit_pio_s1_agent:rf_sink_endofpacket
	wire          limit_pio_s1_agent_rdata_fifo_src_valid;                                            // limit_pio_s1_agent:rdata_fifo_src_valid -> limit_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] limit_pio_s1_agent_rdata_fifo_src_data;                                             // limit_pio_s1_agent:rdata_fifo_src_data -> limit_pio_s1_agent_rdata_fifo:in_data
	wire          limit_pio_s1_agent_rdata_fifo_src_ready;                                            // limit_pio_s1_agent_rdata_fifo:in_ready -> limit_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_8_s1_agent_m0_readdata;                                                    // quad_pio_8_s1_translator:uav_readdata -> quad_pio_8_s1_agent:m0_readdata
	wire          quad_pio_8_s1_agent_m0_waitrequest;                                                 // quad_pio_8_s1_translator:uav_waitrequest -> quad_pio_8_s1_agent:m0_waitrequest
	wire          quad_pio_8_s1_agent_m0_debugaccess;                                                 // quad_pio_8_s1_agent:m0_debugaccess -> quad_pio_8_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_8_s1_agent_m0_address;                                                     // quad_pio_8_s1_agent:m0_address -> quad_pio_8_s1_translator:uav_address
	wire    [3:0] quad_pio_8_s1_agent_m0_byteenable;                                                  // quad_pio_8_s1_agent:m0_byteenable -> quad_pio_8_s1_translator:uav_byteenable
	wire          quad_pio_8_s1_agent_m0_read;                                                        // quad_pio_8_s1_agent:m0_read -> quad_pio_8_s1_translator:uav_read
	wire          quad_pio_8_s1_agent_m0_readdatavalid;                                               // quad_pio_8_s1_translator:uav_readdatavalid -> quad_pio_8_s1_agent:m0_readdatavalid
	wire          quad_pio_8_s1_agent_m0_lock;                                                        // quad_pio_8_s1_agent:m0_lock -> quad_pio_8_s1_translator:uav_lock
	wire   [31:0] quad_pio_8_s1_agent_m0_writedata;                                                   // quad_pio_8_s1_agent:m0_writedata -> quad_pio_8_s1_translator:uav_writedata
	wire          quad_pio_8_s1_agent_m0_write;                                                       // quad_pio_8_s1_agent:m0_write -> quad_pio_8_s1_translator:uav_write
	wire    [2:0] quad_pio_8_s1_agent_m0_burstcount;                                                  // quad_pio_8_s1_agent:m0_burstcount -> quad_pio_8_s1_translator:uav_burstcount
	wire          quad_pio_8_s1_agent_rf_source_valid;                                                // quad_pio_8_s1_agent:rf_source_valid -> quad_pio_8_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_8_s1_agent_rf_source_data;                                                 // quad_pio_8_s1_agent:rf_source_data -> quad_pio_8_s1_agent_rsp_fifo:in_data
	wire          quad_pio_8_s1_agent_rf_source_ready;                                                // quad_pio_8_s1_agent_rsp_fifo:in_ready -> quad_pio_8_s1_agent:rf_source_ready
	wire          quad_pio_8_s1_agent_rf_source_startofpacket;                                        // quad_pio_8_s1_agent:rf_source_startofpacket -> quad_pio_8_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_8_s1_agent_rf_source_endofpacket;                                          // quad_pio_8_s1_agent:rf_source_endofpacket -> quad_pio_8_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_8_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_8_s1_agent_rsp_fifo:out_valid -> quad_pio_8_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_8_s1_agent_rsp_fifo_out_data;                                              // quad_pio_8_s1_agent_rsp_fifo:out_data -> quad_pio_8_s1_agent:rf_sink_data
	wire          quad_pio_8_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_8_s1_agent:rf_sink_ready -> quad_pio_8_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_8_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_8_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_8_s1_agent:rf_sink_startofpacket
	wire          quad_pio_8_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_8_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_8_s1_agent:rf_sink_endofpacket
	wire          quad_pio_8_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_8_s1_agent:rdata_fifo_src_valid -> quad_pio_8_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_8_s1_agent_rdata_fifo_src_data;                                            // quad_pio_8_s1_agent:rdata_fifo_src_data -> quad_pio_8_s1_agent_rdata_fifo:in_data
	wire          quad_pio_8_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_8_s1_agent_rdata_fifo:in_ready -> quad_pio_8_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_9_s1_agent_m0_readdata;                                                    // quad_pio_9_s1_translator:uav_readdata -> quad_pio_9_s1_agent:m0_readdata
	wire          quad_pio_9_s1_agent_m0_waitrequest;                                                 // quad_pio_9_s1_translator:uav_waitrequest -> quad_pio_9_s1_agent:m0_waitrequest
	wire          quad_pio_9_s1_agent_m0_debugaccess;                                                 // quad_pio_9_s1_agent:m0_debugaccess -> quad_pio_9_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_9_s1_agent_m0_address;                                                     // quad_pio_9_s1_agent:m0_address -> quad_pio_9_s1_translator:uav_address
	wire    [3:0] quad_pio_9_s1_agent_m0_byteenable;                                                  // quad_pio_9_s1_agent:m0_byteenable -> quad_pio_9_s1_translator:uav_byteenable
	wire          quad_pio_9_s1_agent_m0_read;                                                        // quad_pio_9_s1_agent:m0_read -> quad_pio_9_s1_translator:uav_read
	wire          quad_pio_9_s1_agent_m0_readdatavalid;                                               // quad_pio_9_s1_translator:uav_readdatavalid -> quad_pio_9_s1_agent:m0_readdatavalid
	wire          quad_pio_9_s1_agent_m0_lock;                                                        // quad_pio_9_s1_agent:m0_lock -> quad_pio_9_s1_translator:uav_lock
	wire   [31:0] quad_pio_9_s1_agent_m0_writedata;                                                   // quad_pio_9_s1_agent:m0_writedata -> quad_pio_9_s1_translator:uav_writedata
	wire          quad_pio_9_s1_agent_m0_write;                                                       // quad_pio_9_s1_agent:m0_write -> quad_pio_9_s1_translator:uav_write
	wire    [2:0] quad_pio_9_s1_agent_m0_burstcount;                                                  // quad_pio_9_s1_agent:m0_burstcount -> quad_pio_9_s1_translator:uav_burstcount
	wire          quad_pio_9_s1_agent_rf_source_valid;                                                // quad_pio_9_s1_agent:rf_source_valid -> quad_pio_9_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_9_s1_agent_rf_source_data;                                                 // quad_pio_9_s1_agent:rf_source_data -> quad_pio_9_s1_agent_rsp_fifo:in_data
	wire          quad_pio_9_s1_agent_rf_source_ready;                                                // quad_pio_9_s1_agent_rsp_fifo:in_ready -> quad_pio_9_s1_agent:rf_source_ready
	wire          quad_pio_9_s1_agent_rf_source_startofpacket;                                        // quad_pio_9_s1_agent:rf_source_startofpacket -> quad_pio_9_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_9_s1_agent_rf_source_endofpacket;                                          // quad_pio_9_s1_agent:rf_source_endofpacket -> quad_pio_9_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_9_s1_agent_rsp_fifo_out_valid;                                             // quad_pio_9_s1_agent_rsp_fifo:out_valid -> quad_pio_9_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_9_s1_agent_rsp_fifo_out_data;                                              // quad_pio_9_s1_agent_rsp_fifo:out_data -> quad_pio_9_s1_agent:rf_sink_data
	wire          quad_pio_9_s1_agent_rsp_fifo_out_ready;                                             // quad_pio_9_s1_agent:rf_sink_ready -> quad_pio_9_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_9_s1_agent_rsp_fifo_out_startofpacket;                                     // quad_pio_9_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_9_s1_agent:rf_sink_startofpacket
	wire          quad_pio_9_s1_agent_rsp_fifo_out_endofpacket;                                       // quad_pio_9_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_9_s1_agent:rf_sink_endofpacket
	wire          quad_pio_9_s1_agent_rdata_fifo_src_valid;                                           // quad_pio_9_s1_agent:rdata_fifo_src_valid -> quad_pio_9_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_9_s1_agent_rdata_fifo_src_data;                                            // quad_pio_9_s1_agent:rdata_fifo_src_data -> quad_pio_9_s1_agent_rdata_fifo:in_data
	wire          quad_pio_9_s1_agent_rdata_fifo_src_ready;                                           // quad_pio_9_s1_agent_rdata_fifo:in_ready -> quad_pio_9_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_10_s1_agent_m0_readdata;                                                   // quad_pio_10_s1_translator:uav_readdata -> quad_pio_10_s1_agent:m0_readdata
	wire          quad_pio_10_s1_agent_m0_waitrequest;                                                // quad_pio_10_s1_translator:uav_waitrequest -> quad_pio_10_s1_agent:m0_waitrequest
	wire          quad_pio_10_s1_agent_m0_debugaccess;                                                // quad_pio_10_s1_agent:m0_debugaccess -> quad_pio_10_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_10_s1_agent_m0_address;                                                    // quad_pio_10_s1_agent:m0_address -> quad_pio_10_s1_translator:uav_address
	wire    [3:0] quad_pio_10_s1_agent_m0_byteenable;                                                 // quad_pio_10_s1_agent:m0_byteenable -> quad_pio_10_s1_translator:uav_byteenable
	wire          quad_pio_10_s1_agent_m0_read;                                                       // quad_pio_10_s1_agent:m0_read -> quad_pio_10_s1_translator:uav_read
	wire          quad_pio_10_s1_agent_m0_readdatavalid;                                              // quad_pio_10_s1_translator:uav_readdatavalid -> quad_pio_10_s1_agent:m0_readdatavalid
	wire          quad_pio_10_s1_agent_m0_lock;                                                       // quad_pio_10_s1_agent:m0_lock -> quad_pio_10_s1_translator:uav_lock
	wire   [31:0] quad_pio_10_s1_agent_m0_writedata;                                                  // quad_pio_10_s1_agent:m0_writedata -> quad_pio_10_s1_translator:uav_writedata
	wire          quad_pio_10_s1_agent_m0_write;                                                      // quad_pio_10_s1_agent:m0_write -> quad_pio_10_s1_translator:uav_write
	wire    [2:0] quad_pio_10_s1_agent_m0_burstcount;                                                 // quad_pio_10_s1_agent:m0_burstcount -> quad_pio_10_s1_translator:uav_burstcount
	wire          quad_pio_10_s1_agent_rf_source_valid;                                               // quad_pio_10_s1_agent:rf_source_valid -> quad_pio_10_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_10_s1_agent_rf_source_data;                                                // quad_pio_10_s1_agent:rf_source_data -> quad_pio_10_s1_agent_rsp_fifo:in_data
	wire          quad_pio_10_s1_agent_rf_source_ready;                                               // quad_pio_10_s1_agent_rsp_fifo:in_ready -> quad_pio_10_s1_agent:rf_source_ready
	wire          quad_pio_10_s1_agent_rf_source_startofpacket;                                       // quad_pio_10_s1_agent:rf_source_startofpacket -> quad_pio_10_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_10_s1_agent_rf_source_endofpacket;                                         // quad_pio_10_s1_agent:rf_source_endofpacket -> quad_pio_10_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_10_s1_agent_rsp_fifo_out_valid;                                            // quad_pio_10_s1_agent_rsp_fifo:out_valid -> quad_pio_10_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_10_s1_agent_rsp_fifo_out_data;                                             // quad_pio_10_s1_agent_rsp_fifo:out_data -> quad_pio_10_s1_agent:rf_sink_data
	wire          quad_pio_10_s1_agent_rsp_fifo_out_ready;                                            // quad_pio_10_s1_agent:rf_sink_ready -> quad_pio_10_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_10_s1_agent_rsp_fifo_out_startofpacket;                                    // quad_pio_10_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_10_s1_agent:rf_sink_startofpacket
	wire          quad_pio_10_s1_agent_rsp_fifo_out_endofpacket;                                      // quad_pio_10_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_10_s1_agent:rf_sink_endofpacket
	wire          quad_pio_10_s1_agent_rdata_fifo_src_valid;                                          // quad_pio_10_s1_agent:rdata_fifo_src_valid -> quad_pio_10_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_10_s1_agent_rdata_fifo_src_data;                                           // quad_pio_10_s1_agent:rdata_fifo_src_data -> quad_pio_10_s1_agent_rdata_fifo:in_data
	wire          quad_pio_10_s1_agent_rdata_fifo_src_ready;                                          // quad_pio_10_s1_agent_rdata_fifo:in_ready -> quad_pio_10_s1_agent:rdata_fifo_src_ready
	wire   [31:0] quad_pio_11_s1_agent_m0_readdata;                                                   // quad_pio_11_s1_translator:uav_readdata -> quad_pio_11_s1_agent:m0_readdata
	wire          quad_pio_11_s1_agent_m0_waitrequest;                                                // quad_pio_11_s1_translator:uav_waitrequest -> quad_pio_11_s1_agent:m0_waitrequest
	wire          quad_pio_11_s1_agent_m0_debugaccess;                                                // quad_pio_11_s1_agent:m0_debugaccess -> quad_pio_11_s1_translator:uav_debugaccess
	wire   [31:0] quad_pio_11_s1_agent_m0_address;                                                    // quad_pio_11_s1_agent:m0_address -> quad_pio_11_s1_translator:uav_address
	wire    [3:0] quad_pio_11_s1_agent_m0_byteenable;                                                 // quad_pio_11_s1_agent:m0_byteenable -> quad_pio_11_s1_translator:uav_byteenable
	wire          quad_pio_11_s1_agent_m0_read;                                                       // quad_pio_11_s1_agent:m0_read -> quad_pio_11_s1_translator:uav_read
	wire          quad_pio_11_s1_agent_m0_readdatavalid;                                              // quad_pio_11_s1_translator:uav_readdatavalid -> quad_pio_11_s1_agent:m0_readdatavalid
	wire          quad_pio_11_s1_agent_m0_lock;                                                       // quad_pio_11_s1_agent:m0_lock -> quad_pio_11_s1_translator:uav_lock
	wire   [31:0] quad_pio_11_s1_agent_m0_writedata;                                                  // quad_pio_11_s1_agent:m0_writedata -> quad_pio_11_s1_translator:uav_writedata
	wire          quad_pio_11_s1_agent_m0_write;                                                      // quad_pio_11_s1_agent:m0_write -> quad_pio_11_s1_translator:uav_write
	wire    [2:0] quad_pio_11_s1_agent_m0_burstcount;                                                 // quad_pio_11_s1_agent:m0_burstcount -> quad_pio_11_s1_translator:uav_burstcount
	wire          quad_pio_11_s1_agent_rf_source_valid;                                               // quad_pio_11_s1_agent:rf_source_valid -> quad_pio_11_s1_agent_rsp_fifo:in_valid
	wire  [135:0] quad_pio_11_s1_agent_rf_source_data;                                                // quad_pio_11_s1_agent:rf_source_data -> quad_pio_11_s1_agent_rsp_fifo:in_data
	wire          quad_pio_11_s1_agent_rf_source_ready;                                               // quad_pio_11_s1_agent_rsp_fifo:in_ready -> quad_pio_11_s1_agent:rf_source_ready
	wire          quad_pio_11_s1_agent_rf_source_startofpacket;                                       // quad_pio_11_s1_agent:rf_source_startofpacket -> quad_pio_11_s1_agent_rsp_fifo:in_startofpacket
	wire          quad_pio_11_s1_agent_rf_source_endofpacket;                                         // quad_pio_11_s1_agent:rf_source_endofpacket -> quad_pio_11_s1_agent_rsp_fifo:in_endofpacket
	wire          quad_pio_11_s1_agent_rsp_fifo_out_valid;                                            // quad_pio_11_s1_agent_rsp_fifo:out_valid -> quad_pio_11_s1_agent:rf_sink_valid
	wire  [135:0] quad_pio_11_s1_agent_rsp_fifo_out_data;                                             // quad_pio_11_s1_agent_rsp_fifo:out_data -> quad_pio_11_s1_agent:rf_sink_data
	wire          quad_pio_11_s1_agent_rsp_fifo_out_ready;                                            // quad_pio_11_s1_agent:rf_sink_ready -> quad_pio_11_s1_agent_rsp_fifo:out_ready
	wire          quad_pio_11_s1_agent_rsp_fifo_out_startofpacket;                                    // quad_pio_11_s1_agent_rsp_fifo:out_startofpacket -> quad_pio_11_s1_agent:rf_sink_startofpacket
	wire          quad_pio_11_s1_agent_rsp_fifo_out_endofpacket;                                      // quad_pio_11_s1_agent_rsp_fifo:out_endofpacket -> quad_pio_11_s1_agent:rf_sink_endofpacket
	wire          quad_pio_11_s1_agent_rdata_fifo_src_valid;                                          // quad_pio_11_s1_agent:rdata_fifo_src_valid -> quad_pio_11_s1_agent_rdata_fifo:in_valid
	wire   [33:0] quad_pio_11_s1_agent_rdata_fifo_src_data;                                           // quad_pio_11_s1_agent:rdata_fifo_src_data -> quad_pio_11_s1_agent_rdata_fifo:in_data
	wire          quad_pio_11_s1_agent_rdata_fifo_src_ready;                                          // quad_pio_11_s1_agent_rdata_fifo:in_ready -> quad_pio_11_s1_agent:rdata_fifo_src_ready
	wire   [31:0] heartbeat_s1_agent_m0_readdata;                                                     // heartbeat_s1_translator:uav_readdata -> heartbeat_s1_agent:m0_readdata
	wire          heartbeat_s1_agent_m0_waitrequest;                                                  // heartbeat_s1_translator:uav_waitrequest -> heartbeat_s1_agent:m0_waitrequest
	wire          heartbeat_s1_agent_m0_debugaccess;                                                  // heartbeat_s1_agent:m0_debugaccess -> heartbeat_s1_translator:uav_debugaccess
	wire   [31:0] heartbeat_s1_agent_m0_address;                                                      // heartbeat_s1_agent:m0_address -> heartbeat_s1_translator:uav_address
	wire    [3:0] heartbeat_s1_agent_m0_byteenable;                                                   // heartbeat_s1_agent:m0_byteenable -> heartbeat_s1_translator:uav_byteenable
	wire          heartbeat_s1_agent_m0_read;                                                         // heartbeat_s1_agent:m0_read -> heartbeat_s1_translator:uav_read
	wire          heartbeat_s1_agent_m0_readdatavalid;                                                // heartbeat_s1_translator:uav_readdatavalid -> heartbeat_s1_agent:m0_readdatavalid
	wire          heartbeat_s1_agent_m0_lock;                                                         // heartbeat_s1_agent:m0_lock -> heartbeat_s1_translator:uav_lock
	wire   [31:0] heartbeat_s1_agent_m0_writedata;                                                    // heartbeat_s1_agent:m0_writedata -> heartbeat_s1_translator:uav_writedata
	wire          heartbeat_s1_agent_m0_write;                                                        // heartbeat_s1_agent:m0_write -> heartbeat_s1_translator:uav_write
	wire    [2:0] heartbeat_s1_agent_m0_burstcount;                                                   // heartbeat_s1_agent:m0_burstcount -> heartbeat_s1_translator:uav_burstcount
	wire          heartbeat_s1_agent_rf_source_valid;                                                 // heartbeat_s1_agent:rf_source_valid -> heartbeat_s1_agent_rsp_fifo:in_valid
	wire  [135:0] heartbeat_s1_agent_rf_source_data;                                                  // heartbeat_s1_agent:rf_source_data -> heartbeat_s1_agent_rsp_fifo:in_data
	wire          heartbeat_s1_agent_rf_source_ready;                                                 // heartbeat_s1_agent_rsp_fifo:in_ready -> heartbeat_s1_agent:rf_source_ready
	wire          heartbeat_s1_agent_rf_source_startofpacket;                                         // heartbeat_s1_agent:rf_source_startofpacket -> heartbeat_s1_agent_rsp_fifo:in_startofpacket
	wire          heartbeat_s1_agent_rf_source_endofpacket;                                           // heartbeat_s1_agent:rf_source_endofpacket -> heartbeat_s1_agent_rsp_fifo:in_endofpacket
	wire          heartbeat_s1_agent_rsp_fifo_out_valid;                                              // heartbeat_s1_agent_rsp_fifo:out_valid -> heartbeat_s1_agent:rf_sink_valid
	wire  [135:0] heartbeat_s1_agent_rsp_fifo_out_data;                                               // heartbeat_s1_agent_rsp_fifo:out_data -> heartbeat_s1_agent:rf_sink_data
	wire          heartbeat_s1_agent_rsp_fifo_out_ready;                                              // heartbeat_s1_agent:rf_sink_ready -> heartbeat_s1_agent_rsp_fifo:out_ready
	wire          heartbeat_s1_agent_rsp_fifo_out_startofpacket;                                      // heartbeat_s1_agent_rsp_fifo:out_startofpacket -> heartbeat_s1_agent:rf_sink_startofpacket
	wire          heartbeat_s1_agent_rsp_fifo_out_endofpacket;                                        // heartbeat_s1_agent_rsp_fifo:out_endofpacket -> heartbeat_s1_agent:rf_sink_endofpacket
	wire          heartbeat_s1_agent_rdata_fifo_src_valid;                                            // heartbeat_s1_agent:rdata_fifo_src_valid -> heartbeat_s1_agent_rdata_fifo:in_valid
	wire   [33:0] heartbeat_s1_agent_rdata_fifo_src_data;                                             // heartbeat_s1_agent:rdata_fifo_src_data -> heartbeat_s1_agent_rdata_fifo:in_data
	wire          heartbeat_s1_agent_rdata_fifo_src_ready;                                            // heartbeat_s1_agent_rdata_fifo:in_ready -> heartbeat_s1_agent:rdata_fifo_src_ready
	wire   [31:0] e_stop_s1_agent_m0_readdata;                                                        // e_stop_s1_translator:uav_readdata -> e_stop_s1_agent:m0_readdata
	wire          e_stop_s1_agent_m0_waitrequest;                                                     // e_stop_s1_translator:uav_waitrequest -> e_stop_s1_agent:m0_waitrequest
	wire          e_stop_s1_agent_m0_debugaccess;                                                     // e_stop_s1_agent:m0_debugaccess -> e_stop_s1_translator:uav_debugaccess
	wire   [31:0] e_stop_s1_agent_m0_address;                                                         // e_stop_s1_agent:m0_address -> e_stop_s1_translator:uav_address
	wire    [3:0] e_stop_s1_agent_m0_byteenable;                                                      // e_stop_s1_agent:m0_byteenable -> e_stop_s1_translator:uav_byteenable
	wire          e_stop_s1_agent_m0_read;                                                            // e_stop_s1_agent:m0_read -> e_stop_s1_translator:uav_read
	wire          e_stop_s1_agent_m0_readdatavalid;                                                   // e_stop_s1_translator:uav_readdatavalid -> e_stop_s1_agent:m0_readdatavalid
	wire          e_stop_s1_agent_m0_lock;                                                            // e_stop_s1_agent:m0_lock -> e_stop_s1_translator:uav_lock
	wire   [31:0] e_stop_s1_agent_m0_writedata;                                                       // e_stop_s1_agent:m0_writedata -> e_stop_s1_translator:uav_writedata
	wire          e_stop_s1_agent_m0_write;                                                           // e_stop_s1_agent:m0_write -> e_stop_s1_translator:uav_write
	wire    [2:0] e_stop_s1_agent_m0_burstcount;                                                      // e_stop_s1_agent:m0_burstcount -> e_stop_s1_translator:uav_burstcount
	wire          e_stop_s1_agent_rf_source_valid;                                                    // e_stop_s1_agent:rf_source_valid -> e_stop_s1_agent_rsp_fifo:in_valid
	wire  [135:0] e_stop_s1_agent_rf_source_data;                                                     // e_stop_s1_agent:rf_source_data -> e_stop_s1_agent_rsp_fifo:in_data
	wire          e_stop_s1_agent_rf_source_ready;                                                    // e_stop_s1_agent_rsp_fifo:in_ready -> e_stop_s1_agent:rf_source_ready
	wire          e_stop_s1_agent_rf_source_startofpacket;                                            // e_stop_s1_agent:rf_source_startofpacket -> e_stop_s1_agent_rsp_fifo:in_startofpacket
	wire          e_stop_s1_agent_rf_source_endofpacket;                                              // e_stop_s1_agent:rf_source_endofpacket -> e_stop_s1_agent_rsp_fifo:in_endofpacket
	wire          e_stop_s1_agent_rsp_fifo_out_valid;                                                 // e_stop_s1_agent_rsp_fifo:out_valid -> e_stop_s1_agent:rf_sink_valid
	wire  [135:0] e_stop_s1_agent_rsp_fifo_out_data;                                                  // e_stop_s1_agent_rsp_fifo:out_data -> e_stop_s1_agent:rf_sink_data
	wire          e_stop_s1_agent_rsp_fifo_out_ready;                                                 // e_stop_s1_agent:rf_sink_ready -> e_stop_s1_agent_rsp_fifo:out_ready
	wire          e_stop_s1_agent_rsp_fifo_out_startofpacket;                                         // e_stop_s1_agent_rsp_fifo:out_startofpacket -> e_stop_s1_agent:rf_sink_startofpacket
	wire          e_stop_s1_agent_rsp_fifo_out_endofpacket;                                           // e_stop_s1_agent_rsp_fifo:out_endofpacket -> e_stop_s1_agent:rf_sink_endofpacket
	wire          e_stop_s1_agent_rdata_fifo_src_valid;                                               // e_stop_s1_agent:rdata_fifo_src_valid -> e_stop_s1_agent_rdata_fifo:in_valid
	wire   [33:0] e_stop_s1_agent_rdata_fifo_src_data;                                                // e_stop_s1_agent:rdata_fifo_src_data -> e_stop_s1_agent_rdata_fifo:in_data
	wire          e_stop_s1_agent_rdata_fifo_src_ready;                                               // e_stop_s1_agent_rdata_fifo:in_ready -> e_stop_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                          // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [170:0] hps_0_h2f_axi_master_agent_write_cp_data;                                           // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                          // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                  // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                    // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [170:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [50:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                           // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [170:0] hps_0_h2f_axi_master_agent_read_cp_data;                                            // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                           // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                   // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                     // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [170:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [50:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          fpga_only_master_master_agent_cp_valid;                                             // fpga_only_master_master_agent:cp_valid -> router_002:sink_valid
	wire  [134:0] fpga_only_master_master_agent_cp_data;                                              // fpga_only_master_master_agent:cp_data -> router_002:sink_data
	wire          fpga_only_master_master_agent_cp_ready;                                             // router_002:sink_ready -> fpga_only_master_master_agent:cp_ready
	wire          fpga_only_master_master_agent_cp_startofpacket;                                     // fpga_only_master_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          fpga_only_master_master_agent_cp_endofpacket;                                       // fpga_only_master_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_003:sink_valid
	wire  [134:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_003:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                       // router_003:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_003:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_004:sink_valid
	wire  [134:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_004:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                        // router_004:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_004:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> router_005:sink_valid
	wire  [170:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> router_005:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // router_005:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux:sink_valid
	wire  [170:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux:sink_ready -> router_005:src_ready
	wire   [50:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          adc_0_adc_slave_agent_rp_valid;                                                     // adc_0_adc_slave_agent:rp_valid -> router_006:sink_valid
	wire  [134:0] adc_0_adc_slave_agent_rp_data;                                                      // adc_0_adc_slave_agent:rp_data -> router_006:sink_data
	wire          adc_0_adc_slave_agent_rp_ready;                                                     // router_006:sink_ready -> adc_0_adc_slave_agent:rp_ready
	wire          adc_0_adc_slave_agent_rp_startofpacket;                                             // adc_0_adc_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          adc_0_adc_slave_agent_rp_endofpacket;                                               // adc_0_adc_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [134:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [50:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_007:sink_valid
	wire  [134:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                          // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_007:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                         // router_007:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [134:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [50:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_valid;                                      // intr_capturer_0_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [134:0] intr_capturer_0_avalon_slave_0_agent_rp_data;                                       // intr_capturer_0_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          intr_capturer_0_avalon_slave_0_agent_rp_ready;                                      // router_008:sink_ready -> intr_capturer_0_avalon_slave_0_agent:rp_ready
	wire          intr_capturer_0_avalon_slave_0_agent_rp_startofpacket;                              // intr_capturer_0_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          intr_capturer_0_avalon_slave_0_agent_rp_endofpacket;                                // intr_capturer_0_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [134:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [50:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                            // sysid_qsys_control_slave_agent:rp_valid -> router_009:sink_valid
	wire  [134:0] sysid_qsys_control_slave_agent_rp_data;                                             // sysid_qsys_control_slave_agent:rp_data -> router_009:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                            // router_009:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                    // sysid_qsys_control_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                      // sysid_qsys_control_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [134:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [50:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          dipsw_pio_s1_agent_rp_valid;                                                        // dipsw_pio_s1_agent:rp_valid -> router_010:sink_valid
	wire  [134:0] dipsw_pio_s1_agent_rp_data;                                                         // dipsw_pio_s1_agent:rp_data -> router_010:sink_data
	wire          dipsw_pio_s1_agent_rp_ready;                                                        // router_010:sink_ready -> dipsw_pio_s1_agent:rp_ready
	wire          dipsw_pio_s1_agent_rp_startofpacket;                                                // dipsw_pio_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          dipsw_pio_s1_agent_rp_endofpacket;                                                  // dipsw_pio_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [134:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [50:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          button_pio_s1_agent_rp_valid;                                                       // button_pio_s1_agent:rp_valid -> router_011:sink_valid
	wire  [134:0] button_pio_s1_agent_rp_data;                                                        // button_pio_s1_agent:rp_data -> router_011:sink_data
	wire          button_pio_s1_agent_rp_ready;                                                       // router_011:sink_ready -> button_pio_s1_agent:rp_ready
	wire          button_pio_s1_agent_rp_startofpacket;                                               // button_pio_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          button_pio_s1_agent_rp_endofpacket;                                                 // button_pio_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [134:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [50:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          gpio_pio_0_s1_agent_rp_valid;                                                       // gpio_pio_0_s1_agent:rp_valid -> router_012:sink_valid
	wire  [134:0] gpio_pio_0_s1_agent_rp_data;                                                        // gpio_pio_0_s1_agent:rp_data -> router_012:sink_data
	wire          gpio_pio_0_s1_agent_rp_ready;                                                       // router_012:sink_ready -> gpio_pio_0_s1_agent:rp_ready
	wire          gpio_pio_0_s1_agent_rp_startofpacket;                                               // gpio_pio_0_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          gpio_pio_0_s1_agent_rp_endofpacket;                                                 // gpio_pio_0_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [134:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [50:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                                          // led_pio_s1_agent:rp_valid -> router_013:sink_valid
	wire  [134:0] led_pio_s1_agent_rp_data;                                                           // led_pio_s1_agent:rp_data -> router_013:sink_data
	wire          led_pio_s1_agent_rp_ready;                                                          // router_013:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                                  // led_pio_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                                    // led_pio_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [134:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [50:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          quad_pio_0_s1_agent_rp_valid;                                                       // quad_pio_0_s1_agent:rp_valid -> router_014:sink_valid
	wire  [134:0] quad_pio_0_s1_agent_rp_data;                                                        // quad_pio_0_s1_agent:rp_data -> router_014:sink_data
	wire          quad_pio_0_s1_agent_rp_ready;                                                       // router_014:sink_ready -> quad_pio_0_s1_agent:rp_ready
	wire          quad_pio_0_s1_agent_rp_startofpacket;                                               // quad_pio_0_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          quad_pio_0_s1_agent_rp_endofpacket;                                                 // quad_pio_0_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [134:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [50:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          quad_reset_pio_s1_agent_rp_valid;                                                   // quad_reset_pio_s1_agent:rp_valid -> router_015:sink_valid
	wire  [134:0] quad_reset_pio_s1_agent_rp_data;                                                    // quad_reset_pio_s1_agent:rp_data -> router_015:sink_data
	wire          quad_reset_pio_s1_agent_rp_ready;                                                   // router_015:sink_ready -> quad_reset_pio_s1_agent:rp_ready
	wire          quad_reset_pio_s1_agent_rp_startofpacket;                                           // quad_reset_pio_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          quad_reset_pio_s1_agent_rp_endofpacket;                                             // quad_reset_pio_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [134:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [50:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          pid_correction_pio_0_s1_agent_rp_valid;                                             // pid_correction_pio_0_s1_agent:rp_valid -> router_016:sink_valid
	wire  [134:0] pid_correction_pio_0_s1_agent_rp_data;                                              // pid_correction_pio_0_s1_agent:rp_data -> router_016:sink_data
	wire          pid_correction_pio_0_s1_agent_rp_ready;                                             // router_016:sink_ready -> pid_correction_pio_0_s1_agent:rp_ready
	wire          pid_correction_pio_0_s1_agent_rp_startofpacket;                                     // pid_correction_pio_0_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          pid_correction_pio_0_s1_agent_rp_endofpacket;                                       // pid_correction_pio_0_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [134:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [50:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          pid_error_pio_0_s1_agent_rp_valid;                                                  // pid_error_pio_0_s1_agent:rp_valid -> router_017:sink_valid
	wire  [134:0] pid_error_pio_0_s1_agent_rp_data;                                                   // pid_error_pio_0_s1_agent:rp_data -> router_017:sink_data
	wire          pid_error_pio_0_s1_agent_rp_ready;                                                  // router_017:sink_ready -> pid_error_pio_0_s1_agent:rp_ready
	wire          pid_error_pio_0_s1_agent_rp_startofpacket;                                          // pid_error_pio_0_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          pid_error_pio_0_s1_agent_rp_endofpacket;                                            // pid_error_pio_0_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [134:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [50:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          quad_pio_1_s1_agent_rp_valid;                                                       // quad_pio_1_s1_agent:rp_valid -> router_018:sink_valid
	wire  [134:0] quad_pio_1_s1_agent_rp_data;                                                        // quad_pio_1_s1_agent:rp_data -> router_018:sink_data
	wire          quad_pio_1_s1_agent_rp_ready;                                                       // router_018:sink_ready -> quad_pio_1_s1_agent:rp_ready
	wire          quad_pio_1_s1_agent_rp_startofpacket;                                               // quad_pio_1_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          quad_pio_1_s1_agent_rp_endofpacket;                                                 // quad_pio_1_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_013:sink_valid
	wire  [134:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_013:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_013:sink_ready -> router_018:src_ready
	wire   [50:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          quad_pio_2_s1_agent_rp_valid;                                                       // quad_pio_2_s1_agent:rp_valid -> router_019:sink_valid
	wire  [134:0] quad_pio_2_s1_agent_rp_data;                                                        // quad_pio_2_s1_agent:rp_data -> router_019:sink_data
	wire          quad_pio_2_s1_agent_rp_ready;                                                       // router_019:sink_ready -> quad_pio_2_s1_agent:rp_ready
	wire          quad_pio_2_s1_agent_rp_startofpacket;                                               // quad_pio_2_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          quad_pio_2_s1_agent_rp_endofpacket;                                                 // quad_pio_2_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_014:sink_valid
	wire  [134:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_014:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_014:sink_ready -> router_019:src_ready
	wire   [50:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_014:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          quad_pio_3_s1_agent_rp_valid;                                                       // quad_pio_3_s1_agent:rp_valid -> router_020:sink_valid
	wire  [134:0] quad_pio_3_s1_agent_rp_data;                                                        // quad_pio_3_s1_agent:rp_data -> router_020:sink_data
	wire          quad_pio_3_s1_agent_rp_ready;                                                       // router_020:sink_ready -> quad_pio_3_s1_agent:rp_ready
	wire          quad_pio_3_s1_agent_rp_startofpacket;                                               // quad_pio_3_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          quad_pio_3_s1_agent_rp_endofpacket;                                                 // quad_pio_3_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_015:sink_valid
	wire  [134:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_015:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_015:sink_ready -> router_020:src_ready
	wire   [50:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_015:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          quad_pio_4_s1_agent_rp_valid;                                                       // quad_pio_4_s1_agent:rp_valid -> router_021:sink_valid
	wire  [134:0] quad_pio_4_s1_agent_rp_data;                                                        // quad_pio_4_s1_agent:rp_data -> router_021:sink_data
	wire          quad_pio_4_s1_agent_rp_ready;                                                       // router_021:sink_ready -> quad_pio_4_s1_agent:rp_ready
	wire          quad_pio_4_s1_agent_rp_startofpacket;                                               // quad_pio_4_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          quad_pio_4_s1_agent_rp_endofpacket;                                                 // quad_pio_4_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_016:sink_valid
	wire  [134:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_016:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_016:sink_ready -> router_021:src_ready
	wire   [50:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_016:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          quad_pio_5_s1_agent_rp_valid;                                                       // quad_pio_5_s1_agent:rp_valid -> router_022:sink_valid
	wire  [134:0] quad_pio_5_s1_agent_rp_data;                                                        // quad_pio_5_s1_agent:rp_data -> router_022:sink_data
	wire          quad_pio_5_s1_agent_rp_ready;                                                       // router_022:sink_ready -> quad_pio_5_s1_agent:rp_ready
	wire          quad_pio_5_s1_agent_rp_startofpacket;                                               // quad_pio_5_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          quad_pio_5_s1_agent_rp_endofpacket;                                                 // quad_pio_5_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_017:sink_valid
	wire  [134:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_017:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_017:sink_ready -> router_022:src_ready
	wire   [50:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_017:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          quad_pio_6_s1_agent_rp_valid;                                                       // quad_pio_6_s1_agent:rp_valid -> router_023:sink_valid
	wire  [134:0] quad_pio_6_s1_agent_rp_data;                                                        // quad_pio_6_s1_agent:rp_data -> router_023:sink_data
	wire          quad_pio_6_s1_agent_rp_ready;                                                       // router_023:sink_ready -> quad_pio_6_s1_agent:rp_ready
	wire          quad_pio_6_s1_agent_rp_startofpacket;                                               // quad_pio_6_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          quad_pio_6_s1_agent_rp_endofpacket;                                                 // quad_pio_6_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_018:sink_valid
	wire  [134:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_018:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_018:sink_ready -> router_023:src_ready
	wire   [50:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_018:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          quad_pio_7_s1_agent_rp_valid;                                                       // quad_pio_7_s1_agent:rp_valid -> router_024:sink_valid
	wire  [134:0] quad_pio_7_s1_agent_rp_data;                                                        // quad_pio_7_s1_agent:rp_data -> router_024:sink_data
	wire          quad_pio_7_s1_agent_rp_ready;                                                       // router_024:sink_ready -> quad_pio_7_s1_agent:rp_ready
	wire          quad_pio_7_s1_agent_rp_startofpacket;                                               // quad_pio_7_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          quad_pio_7_s1_agent_rp_endofpacket;                                                 // quad_pio_7_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_019:sink_valid
	wire  [134:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_019:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_019:sink_ready -> router_024:src_ready
	wire   [50:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_019:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          pid_error_pio_1_s1_agent_rp_valid;                                                  // pid_error_pio_1_s1_agent:rp_valid -> router_025:sink_valid
	wire  [134:0] pid_error_pio_1_s1_agent_rp_data;                                                   // pid_error_pio_1_s1_agent:rp_data -> router_025:sink_data
	wire          pid_error_pio_1_s1_agent_rp_ready;                                                  // router_025:sink_ready -> pid_error_pio_1_s1_agent:rp_ready
	wire          pid_error_pio_1_s1_agent_rp_startofpacket;                                          // pid_error_pio_1_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          pid_error_pio_1_s1_agent_rp_endofpacket;                                            // pid_error_pio_1_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_020:sink_valid
	wire  [134:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_020:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_020:sink_ready -> router_025:src_ready
	wire   [50:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_020:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          pid_error_pio_2_s1_agent_rp_valid;                                                  // pid_error_pio_2_s1_agent:rp_valid -> router_026:sink_valid
	wire  [134:0] pid_error_pio_2_s1_agent_rp_data;                                                   // pid_error_pio_2_s1_agent:rp_data -> router_026:sink_data
	wire          pid_error_pio_2_s1_agent_rp_ready;                                                  // router_026:sink_ready -> pid_error_pio_2_s1_agent:rp_ready
	wire          pid_error_pio_2_s1_agent_rp_startofpacket;                                          // pid_error_pio_2_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          pid_error_pio_2_s1_agent_rp_endofpacket;                                            // pid_error_pio_2_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_021:sink_valid
	wire  [134:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_021:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_021:sink_ready -> router_026:src_ready
	wire   [50:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_021:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          pid_error_pio_3_s1_agent_rp_valid;                                                  // pid_error_pio_3_s1_agent:rp_valid -> router_027:sink_valid
	wire  [134:0] pid_error_pio_3_s1_agent_rp_data;                                                   // pid_error_pio_3_s1_agent:rp_data -> router_027:sink_data
	wire          pid_error_pio_3_s1_agent_rp_ready;                                                  // router_027:sink_ready -> pid_error_pio_3_s1_agent:rp_ready
	wire          pid_error_pio_3_s1_agent_rp_startofpacket;                                          // pid_error_pio_3_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          pid_error_pio_3_s1_agent_rp_endofpacket;                                            // pid_error_pio_3_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_022:sink_valid
	wire  [134:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_022:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_022:sink_ready -> router_027:src_ready
	wire   [50:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_022:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          pid_error_pio_4_s1_agent_rp_valid;                                                  // pid_error_pio_4_s1_agent:rp_valid -> router_028:sink_valid
	wire  [134:0] pid_error_pio_4_s1_agent_rp_data;                                                   // pid_error_pio_4_s1_agent:rp_data -> router_028:sink_data
	wire          pid_error_pio_4_s1_agent_rp_ready;                                                  // router_028:sink_ready -> pid_error_pio_4_s1_agent:rp_ready
	wire          pid_error_pio_4_s1_agent_rp_startofpacket;                                          // pid_error_pio_4_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          pid_error_pio_4_s1_agent_rp_endofpacket;                                            // pid_error_pio_4_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_023:sink_valid
	wire  [134:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_023:sink_data
	wire          router_028_src_ready;                                                               // rsp_demux_023:sink_ready -> router_028:src_ready
	wire   [50:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_023:sink_channel
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          pid_error_pio_5_s1_agent_rp_valid;                                                  // pid_error_pio_5_s1_agent:rp_valid -> router_029:sink_valid
	wire  [134:0] pid_error_pio_5_s1_agent_rp_data;                                                   // pid_error_pio_5_s1_agent:rp_data -> router_029:sink_data
	wire          pid_error_pio_5_s1_agent_rp_ready;                                                  // router_029:sink_ready -> pid_error_pio_5_s1_agent:rp_ready
	wire          pid_error_pio_5_s1_agent_rp_startofpacket;                                          // pid_error_pio_5_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          pid_error_pio_5_s1_agent_rp_endofpacket;                                            // pid_error_pio_5_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_024:sink_valid
	wire  [134:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_024:sink_data
	wire          router_029_src_ready;                                                               // rsp_demux_024:sink_ready -> router_029:src_ready
	wire   [50:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_024:sink_channel
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          pid_error_pio_6_s1_agent_rp_valid;                                                  // pid_error_pio_6_s1_agent:rp_valid -> router_030:sink_valid
	wire  [134:0] pid_error_pio_6_s1_agent_rp_data;                                                   // pid_error_pio_6_s1_agent:rp_data -> router_030:sink_data
	wire          pid_error_pio_6_s1_agent_rp_ready;                                                  // router_030:sink_ready -> pid_error_pio_6_s1_agent:rp_ready
	wire          pid_error_pio_6_s1_agent_rp_startofpacket;                                          // pid_error_pio_6_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          pid_error_pio_6_s1_agent_rp_endofpacket;                                            // pid_error_pio_6_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                               // router_030:src_valid -> rsp_demux_025:sink_valid
	wire  [134:0] router_030_src_data;                                                                // router_030:src_data -> rsp_demux_025:sink_data
	wire          router_030_src_ready;                                                               // rsp_demux_025:sink_ready -> router_030:src_ready
	wire   [50:0] router_030_src_channel;                                                             // router_030:src_channel -> rsp_demux_025:sink_channel
	wire          router_030_src_startofpacket;                                                       // router_030:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_030_src_endofpacket;                                                         // router_030:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          pid_error_pio_7_s1_agent_rp_valid;                                                  // pid_error_pio_7_s1_agent:rp_valid -> router_031:sink_valid
	wire  [134:0] pid_error_pio_7_s1_agent_rp_data;                                                   // pid_error_pio_7_s1_agent:rp_data -> router_031:sink_data
	wire          pid_error_pio_7_s1_agent_rp_ready;                                                  // router_031:sink_ready -> pid_error_pio_7_s1_agent:rp_ready
	wire          pid_error_pio_7_s1_agent_rp_startofpacket;                                          // pid_error_pio_7_s1_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          pid_error_pio_7_s1_agent_rp_endofpacket;                                            // pid_error_pio_7_s1_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                               // router_031:src_valid -> rsp_demux_026:sink_valid
	wire  [134:0] router_031_src_data;                                                                // router_031:src_data -> rsp_demux_026:sink_data
	wire          router_031_src_ready;                                                               // rsp_demux_026:sink_ready -> router_031:src_ready
	wire   [50:0] router_031_src_channel;                                                             // router_031:src_channel -> rsp_demux_026:sink_channel
	wire          router_031_src_startofpacket;                                                       // router_031:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_031_src_endofpacket;                                                         // router_031:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          pid_correction_pio_1_s1_agent_rp_valid;                                             // pid_correction_pio_1_s1_agent:rp_valid -> router_032:sink_valid
	wire  [134:0] pid_correction_pio_1_s1_agent_rp_data;                                              // pid_correction_pio_1_s1_agent:rp_data -> router_032:sink_data
	wire          pid_correction_pio_1_s1_agent_rp_ready;                                             // router_032:sink_ready -> pid_correction_pio_1_s1_agent:rp_ready
	wire          pid_correction_pio_1_s1_agent_rp_startofpacket;                                     // pid_correction_pio_1_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          pid_correction_pio_1_s1_agent_rp_endofpacket;                                       // pid_correction_pio_1_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                               // router_032:src_valid -> rsp_demux_027:sink_valid
	wire  [134:0] router_032_src_data;                                                                // router_032:src_data -> rsp_demux_027:sink_data
	wire          router_032_src_ready;                                                               // rsp_demux_027:sink_ready -> router_032:src_ready
	wire   [50:0] router_032_src_channel;                                                             // router_032:src_channel -> rsp_demux_027:sink_channel
	wire          router_032_src_startofpacket;                                                       // router_032:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_032_src_endofpacket;                                                         // router_032:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          pid_correction_pio_2_s1_agent_rp_valid;                                             // pid_correction_pio_2_s1_agent:rp_valid -> router_033:sink_valid
	wire  [134:0] pid_correction_pio_2_s1_agent_rp_data;                                              // pid_correction_pio_2_s1_agent:rp_data -> router_033:sink_data
	wire          pid_correction_pio_2_s1_agent_rp_ready;                                             // router_033:sink_ready -> pid_correction_pio_2_s1_agent:rp_ready
	wire          pid_correction_pio_2_s1_agent_rp_startofpacket;                                     // pid_correction_pio_2_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          pid_correction_pio_2_s1_agent_rp_endofpacket;                                       // pid_correction_pio_2_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                               // router_033:src_valid -> rsp_demux_028:sink_valid
	wire  [134:0] router_033_src_data;                                                                // router_033:src_data -> rsp_demux_028:sink_data
	wire          router_033_src_ready;                                                               // rsp_demux_028:sink_ready -> router_033:src_ready
	wire   [50:0] router_033_src_channel;                                                             // router_033:src_channel -> rsp_demux_028:sink_channel
	wire          router_033_src_startofpacket;                                                       // router_033:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_033_src_endofpacket;                                                         // router_033:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          pid_correction_pio_3_s1_agent_rp_valid;                                             // pid_correction_pio_3_s1_agent:rp_valid -> router_034:sink_valid
	wire  [134:0] pid_correction_pio_3_s1_agent_rp_data;                                              // pid_correction_pio_3_s1_agent:rp_data -> router_034:sink_data
	wire          pid_correction_pio_3_s1_agent_rp_ready;                                             // router_034:sink_ready -> pid_correction_pio_3_s1_agent:rp_ready
	wire          pid_correction_pio_3_s1_agent_rp_startofpacket;                                     // pid_correction_pio_3_s1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          pid_correction_pio_3_s1_agent_rp_endofpacket;                                       // pid_correction_pio_3_s1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                               // router_034:src_valid -> rsp_demux_029:sink_valid
	wire  [134:0] router_034_src_data;                                                                // router_034:src_data -> rsp_demux_029:sink_data
	wire          router_034_src_ready;                                                               // rsp_demux_029:sink_ready -> router_034:src_ready
	wire   [50:0] router_034_src_channel;                                                             // router_034:src_channel -> rsp_demux_029:sink_channel
	wire          router_034_src_startofpacket;                                                       // router_034:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_034_src_endofpacket;                                                         // router_034:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          pid_correction_pio_5_s1_agent_rp_valid;                                             // pid_correction_pio_5_s1_agent:rp_valid -> router_035:sink_valid
	wire  [134:0] pid_correction_pio_5_s1_agent_rp_data;                                              // pid_correction_pio_5_s1_agent:rp_data -> router_035:sink_data
	wire          pid_correction_pio_5_s1_agent_rp_ready;                                             // router_035:sink_ready -> pid_correction_pio_5_s1_agent:rp_ready
	wire          pid_correction_pio_5_s1_agent_rp_startofpacket;                                     // pid_correction_pio_5_s1_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          pid_correction_pio_5_s1_agent_rp_endofpacket;                                       // pid_correction_pio_5_s1_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                               // router_035:src_valid -> rsp_demux_030:sink_valid
	wire  [134:0] router_035_src_data;                                                                // router_035:src_data -> rsp_demux_030:sink_data
	wire          router_035_src_ready;                                                               // rsp_demux_030:sink_ready -> router_035:src_ready
	wire   [50:0] router_035_src_channel;                                                             // router_035:src_channel -> rsp_demux_030:sink_channel
	wire          router_035_src_startofpacket;                                                       // router_035:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_035_src_endofpacket;                                                         // router_035:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          pid_correction_pio_6_s1_agent_rp_valid;                                             // pid_correction_pio_6_s1_agent:rp_valid -> router_036:sink_valid
	wire  [134:0] pid_correction_pio_6_s1_agent_rp_data;                                              // pid_correction_pio_6_s1_agent:rp_data -> router_036:sink_data
	wire          pid_correction_pio_6_s1_agent_rp_ready;                                             // router_036:sink_ready -> pid_correction_pio_6_s1_agent:rp_ready
	wire          pid_correction_pio_6_s1_agent_rp_startofpacket;                                     // pid_correction_pio_6_s1_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          pid_correction_pio_6_s1_agent_rp_endofpacket;                                       // pid_correction_pio_6_s1_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                               // router_036:src_valid -> rsp_demux_031:sink_valid
	wire  [134:0] router_036_src_data;                                                                // router_036:src_data -> rsp_demux_031:sink_data
	wire          router_036_src_ready;                                                               // rsp_demux_031:sink_ready -> router_036:src_ready
	wire   [50:0] router_036_src_channel;                                                             // router_036:src_channel -> rsp_demux_031:sink_channel
	wire          router_036_src_startofpacket;                                                       // router_036:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_036_src_endofpacket;                                                         // router_036:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          pid_correction_pio_7_s1_agent_rp_valid;                                             // pid_correction_pio_7_s1_agent:rp_valid -> router_037:sink_valid
	wire  [134:0] pid_correction_pio_7_s1_agent_rp_data;                                              // pid_correction_pio_7_s1_agent:rp_data -> router_037:sink_data
	wire          pid_correction_pio_7_s1_agent_rp_ready;                                             // router_037:sink_ready -> pid_correction_pio_7_s1_agent:rp_ready
	wire          pid_correction_pio_7_s1_agent_rp_startofpacket;                                     // pid_correction_pio_7_s1_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          pid_correction_pio_7_s1_agent_rp_endofpacket;                                       // pid_correction_pio_7_s1_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                               // router_037:src_valid -> rsp_demux_032:sink_valid
	wire  [134:0] router_037_src_data;                                                                // router_037:src_data -> rsp_demux_032:sink_data
	wire          router_037_src_ready;                                                               // rsp_demux_032:sink_ready -> router_037:src_ready
	wire   [50:0] router_037_src_channel;                                                             // router_037:src_channel -> rsp_demux_032:sink_channel
	wire          router_037_src_startofpacket;                                                       // router_037:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_037_src_endofpacket;                                                         // router_037:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          pid_correction_pio_4_s1_agent_rp_valid;                                             // pid_correction_pio_4_s1_agent:rp_valid -> router_038:sink_valid
	wire  [134:0] pid_correction_pio_4_s1_agent_rp_data;                                              // pid_correction_pio_4_s1_agent:rp_data -> router_038:sink_data
	wire          pid_correction_pio_4_s1_agent_rp_ready;                                             // router_038:sink_ready -> pid_correction_pio_4_s1_agent:rp_ready
	wire          pid_correction_pio_4_s1_agent_rp_startofpacket;                                     // pid_correction_pio_4_s1_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          pid_correction_pio_4_s1_agent_rp_endofpacket;                                       // pid_correction_pio_4_s1_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                               // router_038:src_valid -> rsp_demux_033:sink_valid
	wire  [134:0] router_038_src_data;                                                                // router_038:src_data -> rsp_demux_033:sink_data
	wire          router_038_src_ready;                                                               // rsp_demux_033:sink_ready -> router_038:src_ready
	wire   [50:0] router_038_src_channel;                                                             // router_038:src_channel -> rsp_demux_033:sink_channel
	wire          router_038_src_startofpacket;                                                       // router_038:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_038_src_endofpacket;                                                         // router_038:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          pid_values_pio_s1_agent_rp_valid;                                                   // pid_values_pio_s1_agent:rp_valid -> router_039:sink_valid
	wire  [134:0] pid_values_pio_s1_agent_rp_data;                                                    // pid_values_pio_s1_agent:rp_data -> router_039:sink_data
	wire          pid_values_pio_s1_agent_rp_ready;                                                   // router_039:sink_ready -> pid_values_pio_s1_agent:rp_ready
	wire          pid_values_pio_s1_agent_rp_startofpacket;                                           // pid_values_pio_s1_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          pid_values_pio_s1_agent_rp_endofpacket;                                             // pid_values_pio_s1_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                               // router_039:src_valid -> rsp_demux_034:sink_valid
	wire  [134:0] router_039_src_data;                                                                // router_039:src_data -> rsp_demux_034:sink_data
	wire          router_039_src_ready;                                                               // rsp_demux_034:sink_ready -> router_039:src_ready
	wire   [50:0] router_039_src_channel;                                                             // router_039:src_channel -> rsp_demux_034:sink_channel
	wire          router_039_src_startofpacket;                                                       // router_039:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_039_src_endofpacket;                                                         // router_039:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          pwm_pio_0_s1_agent_rp_valid;                                                        // pwm_pio_0_s1_agent:rp_valid -> router_040:sink_valid
	wire  [134:0] pwm_pio_0_s1_agent_rp_data;                                                         // pwm_pio_0_s1_agent:rp_data -> router_040:sink_data
	wire          pwm_pio_0_s1_agent_rp_ready;                                                        // router_040:sink_ready -> pwm_pio_0_s1_agent:rp_ready
	wire          pwm_pio_0_s1_agent_rp_startofpacket;                                                // pwm_pio_0_s1_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          pwm_pio_0_s1_agent_rp_endofpacket;                                                  // pwm_pio_0_s1_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                               // router_040:src_valid -> rsp_demux_035:sink_valid
	wire  [134:0] router_040_src_data;                                                                // router_040:src_data -> rsp_demux_035:sink_data
	wire          router_040_src_ready;                                                               // rsp_demux_035:sink_ready -> router_040:src_ready
	wire   [50:0] router_040_src_channel;                                                             // router_040:src_channel -> rsp_demux_035:sink_channel
	wire          router_040_src_startofpacket;                                                       // router_040:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_040_src_endofpacket;                                                         // router_040:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          gpio_pio_1_s1_agent_rp_valid;                                                       // gpio_pio_1_s1_agent:rp_valid -> router_041:sink_valid
	wire  [134:0] gpio_pio_1_s1_agent_rp_data;                                                        // gpio_pio_1_s1_agent:rp_data -> router_041:sink_data
	wire          gpio_pio_1_s1_agent_rp_ready;                                                       // router_041:sink_ready -> gpio_pio_1_s1_agent:rp_ready
	wire          gpio_pio_1_s1_agent_rp_startofpacket;                                               // gpio_pio_1_s1_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          gpio_pio_1_s1_agent_rp_endofpacket;                                                 // gpio_pio_1_s1_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                               // router_041:src_valid -> rsp_demux_036:sink_valid
	wire  [134:0] router_041_src_data;                                                                // router_041:src_data -> rsp_demux_036:sink_data
	wire          router_041_src_ready;                                                               // rsp_demux_036:sink_ready -> router_041:src_ready
	wire   [50:0] router_041_src_channel;                                                             // router_041:src_channel -> rsp_demux_036:sink_channel
	wire          router_041_src_startofpacket;                                                       // router_041:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_041_src_endofpacket;                                                         // router_041:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          pwm_pio_1_s1_agent_rp_valid;                                                        // pwm_pio_1_s1_agent:rp_valid -> router_042:sink_valid
	wire  [134:0] pwm_pio_1_s1_agent_rp_data;                                                         // pwm_pio_1_s1_agent:rp_data -> router_042:sink_data
	wire          pwm_pio_1_s1_agent_rp_ready;                                                        // router_042:sink_ready -> pwm_pio_1_s1_agent:rp_ready
	wire          pwm_pio_1_s1_agent_rp_startofpacket;                                                // pwm_pio_1_s1_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          pwm_pio_1_s1_agent_rp_endofpacket;                                                  // pwm_pio_1_s1_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                               // router_042:src_valid -> rsp_demux_037:sink_valid
	wire  [134:0] router_042_src_data;                                                                // router_042:src_data -> rsp_demux_037:sink_data
	wire          router_042_src_ready;                                                               // rsp_demux_037:sink_ready -> router_042:src_ready
	wire   [50:0] router_042_src_channel;                                                             // router_042:src_channel -> rsp_demux_037:sink_channel
	wire          router_042_src_startofpacket;                                                       // router_042:src_startofpacket -> rsp_demux_037:sink_startofpacket
	wire          router_042_src_endofpacket;                                                         // router_042:src_endofpacket -> rsp_demux_037:sink_endofpacket
	wire          pwm_pio_2_s1_agent_rp_valid;                                                        // pwm_pio_2_s1_agent:rp_valid -> router_043:sink_valid
	wire  [134:0] pwm_pio_2_s1_agent_rp_data;                                                         // pwm_pio_2_s1_agent:rp_data -> router_043:sink_data
	wire          pwm_pio_2_s1_agent_rp_ready;                                                        // router_043:sink_ready -> pwm_pio_2_s1_agent:rp_ready
	wire          pwm_pio_2_s1_agent_rp_startofpacket;                                                // pwm_pio_2_s1_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          pwm_pio_2_s1_agent_rp_endofpacket;                                                  // pwm_pio_2_s1_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                               // router_043:src_valid -> rsp_demux_038:sink_valid
	wire  [134:0] router_043_src_data;                                                                // router_043:src_data -> rsp_demux_038:sink_data
	wire          router_043_src_ready;                                                               // rsp_demux_038:sink_ready -> router_043:src_ready
	wire   [50:0] router_043_src_channel;                                                             // router_043:src_channel -> rsp_demux_038:sink_channel
	wire          router_043_src_startofpacket;                                                       // router_043:src_startofpacket -> rsp_demux_038:sink_startofpacket
	wire          router_043_src_endofpacket;                                                         // router_043:src_endofpacket -> rsp_demux_038:sink_endofpacket
	wire          pwm_pio_3_s1_agent_rp_valid;                                                        // pwm_pio_3_s1_agent:rp_valid -> router_044:sink_valid
	wire  [134:0] pwm_pio_3_s1_agent_rp_data;                                                         // pwm_pio_3_s1_agent:rp_data -> router_044:sink_data
	wire          pwm_pio_3_s1_agent_rp_ready;                                                        // router_044:sink_ready -> pwm_pio_3_s1_agent:rp_ready
	wire          pwm_pio_3_s1_agent_rp_startofpacket;                                                // pwm_pio_3_s1_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          pwm_pio_3_s1_agent_rp_endofpacket;                                                  // pwm_pio_3_s1_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                               // router_044:src_valid -> rsp_demux_039:sink_valid
	wire  [134:0] router_044_src_data;                                                                // router_044:src_data -> rsp_demux_039:sink_data
	wire          router_044_src_ready;                                                               // rsp_demux_039:sink_ready -> router_044:src_ready
	wire   [50:0] router_044_src_channel;                                                             // router_044:src_channel -> rsp_demux_039:sink_channel
	wire          router_044_src_startofpacket;                                                       // router_044:src_startofpacket -> rsp_demux_039:sink_startofpacket
	wire          router_044_src_endofpacket;                                                         // router_044:src_endofpacket -> rsp_demux_039:sink_endofpacket
	wire          pwm_pio_4_s1_agent_rp_valid;                                                        // pwm_pio_4_s1_agent:rp_valid -> router_045:sink_valid
	wire  [134:0] pwm_pio_4_s1_agent_rp_data;                                                         // pwm_pio_4_s1_agent:rp_data -> router_045:sink_data
	wire          pwm_pio_4_s1_agent_rp_ready;                                                        // router_045:sink_ready -> pwm_pio_4_s1_agent:rp_ready
	wire          pwm_pio_4_s1_agent_rp_startofpacket;                                                // pwm_pio_4_s1_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          pwm_pio_4_s1_agent_rp_endofpacket;                                                  // pwm_pio_4_s1_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                               // router_045:src_valid -> rsp_demux_040:sink_valid
	wire  [134:0] router_045_src_data;                                                                // router_045:src_data -> rsp_demux_040:sink_data
	wire          router_045_src_ready;                                                               // rsp_demux_040:sink_ready -> router_045:src_ready
	wire   [50:0] router_045_src_channel;                                                             // router_045:src_channel -> rsp_demux_040:sink_channel
	wire          router_045_src_startofpacket;                                                       // router_045:src_startofpacket -> rsp_demux_040:sink_startofpacket
	wire          router_045_src_endofpacket;                                                         // router_045:src_endofpacket -> rsp_demux_040:sink_endofpacket
	wire          pwm_pio_5_s1_agent_rp_valid;                                                        // pwm_pio_5_s1_agent:rp_valid -> router_046:sink_valid
	wire  [134:0] pwm_pio_5_s1_agent_rp_data;                                                         // pwm_pio_5_s1_agent:rp_data -> router_046:sink_data
	wire          pwm_pio_5_s1_agent_rp_ready;                                                        // router_046:sink_ready -> pwm_pio_5_s1_agent:rp_ready
	wire          pwm_pio_5_s1_agent_rp_startofpacket;                                                // pwm_pio_5_s1_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          pwm_pio_5_s1_agent_rp_endofpacket;                                                  // pwm_pio_5_s1_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                               // router_046:src_valid -> rsp_demux_041:sink_valid
	wire  [134:0] router_046_src_data;                                                                // router_046:src_data -> rsp_demux_041:sink_data
	wire          router_046_src_ready;                                                               // rsp_demux_041:sink_ready -> router_046:src_ready
	wire   [50:0] router_046_src_channel;                                                             // router_046:src_channel -> rsp_demux_041:sink_channel
	wire          router_046_src_startofpacket;                                                       // router_046:src_startofpacket -> rsp_demux_041:sink_startofpacket
	wire          router_046_src_endofpacket;                                                         // router_046:src_endofpacket -> rsp_demux_041:sink_endofpacket
	wire          pwm_pio_6_s1_agent_rp_valid;                                                        // pwm_pio_6_s1_agent:rp_valid -> router_047:sink_valid
	wire  [134:0] pwm_pio_6_s1_agent_rp_data;                                                         // pwm_pio_6_s1_agent:rp_data -> router_047:sink_data
	wire          pwm_pio_6_s1_agent_rp_ready;                                                        // router_047:sink_ready -> pwm_pio_6_s1_agent:rp_ready
	wire          pwm_pio_6_s1_agent_rp_startofpacket;                                                // pwm_pio_6_s1_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          pwm_pio_6_s1_agent_rp_endofpacket;                                                  // pwm_pio_6_s1_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                               // router_047:src_valid -> rsp_demux_042:sink_valid
	wire  [134:0] router_047_src_data;                                                                // router_047:src_data -> rsp_demux_042:sink_data
	wire          router_047_src_ready;                                                               // rsp_demux_042:sink_ready -> router_047:src_ready
	wire   [50:0] router_047_src_channel;                                                             // router_047:src_channel -> rsp_demux_042:sink_channel
	wire          router_047_src_startofpacket;                                                       // router_047:src_startofpacket -> rsp_demux_042:sink_startofpacket
	wire          router_047_src_endofpacket;                                                         // router_047:src_endofpacket -> rsp_demux_042:sink_endofpacket
	wire          pwm_pio_7_s1_agent_rp_valid;                                                        // pwm_pio_7_s1_agent:rp_valid -> router_048:sink_valid
	wire  [134:0] pwm_pio_7_s1_agent_rp_data;                                                         // pwm_pio_7_s1_agent:rp_data -> router_048:sink_data
	wire          pwm_pio_7_s1_agent_rp_ready;                                                        // router_048:sink_ready -> pwm_pio_7_s1_agent:rp_ready
	wire          pwm_pio_7_s1_agent_rp_startofpacket;                                                // pwm_pio_7_s1_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          pwm_pio_7_s1_agent_rp_endofpacket;                                                  // pwm_pio_7_s1_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                               // router_048:src_valid -> rsp_demux_043:sink_valid
	wire  [134:0] router_048_src_data;                                                                // router_048:src_data -> rsp_demux_043:sink_data
	wire          router_048_src_ready;                                                               // rsp_demux_043:sink_ready -> router_048:src_ready
	wire   [50:0] router_048_src_channel;                                                             // router_048:src_channel -> rsp_demux_043:sink_channel
	wire          router_048_src_startofpacket;                                                       // router_048:src_startofpacket -> rsp_demux_043:sink_startofpacket
	wire          router_048_src_endofpacket;                                                         // router_048:src_endofpacket -> rsp_demux_043:sink_endofpacket
	wire          limit_pio_s1_agent_rp_valid;                                                        // limit_pio_s1_agent:rp_valid -> router_049:sink_valid
	wire  [134:0] limit_pio_s1_agent_rp_data;                                                         // limit_pio_s1_agent:rp_data -> router_049:sink_data
	wire          limit_pio_s1_agent_rp_ready;                                                        // router_049:sink_ready -> limit_pio_s1_agent:rp_ready
	wire          limit_pio_s1_agent_rp_startofpacket;                                                // limit_pio_s1_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          limit_pio_s1_agent_rp_endofpacket;                                                  // limit_pio_s1_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                               // router_049:src_valid -> rsp_demux_044:sink_valid
	wire  [134:0] router_049_src_data;                                                                // router_049:src_data -> rsp_demux_044:sink_data
	wire          router_049_src_ready;                                                               // rsp_demux_044:sink_ready -> router_049:src_ready
	wire   [50:0] router_049_src_channel;                                                             // router_049:src_channel -> rsp_demux_044:sink_channel
	wire          router_049_src_startofpacket;                                                       // router_049:src_startofpacket -> rsp_demux_044:sink_startofpacket
	wire          router_049_src_endofpacket;                                                         // router_049:src_endofpacket -> rsp_demux_044:sink_endofpacket
	wire          quad_pio_8_s1_agent_rp_valid;                                                       // quad_pio_8_s1_agent:rp_valid -> router_050:sink_valid
	wire  [134:0] quad_pio_8_s1_agent_rp_data;                                                        // quad_pio_8_s1_agent:rp_data -> router_050:sink_data
	wire          quad_pio_8_s1_agent_rp_ready;                                                       // router_050:sink_ready -> quad_pio_8_s1_agent:rp_ready
	wire          quad_pio_8_s1_agent_rp_startofpacket;                                               // quad_pio_8_s1_agent:rp_startofpacket -> router_050:sink_startofpacket
	wire          quad_pio_8_s1_agent_rp_endofpacket;                                                 // quad_pio_8_s1_agent:rp_endofpacket -> router_050:sink_endofpacket
	wire          router_050_src_valid;                                                               // router_050:src_valid -> rsp_demux_045:sink_valid
	wire  [134:0] router_050_src_data;                                                                // router_050:src_data -> rsp_demux_045:sink_data
	wire          router_050_src_ready;                                                               // rsp_demux_045:sink_ready -> router_050:src_ready
	wire   [50:0] router_050_src_channel;                                                             // router_050:src_channel -> rsp_demux_045:sink_channel
	wire          router_050_src_startofpacket;                                                       // router_050:src_startofpacket -> rsp_demux_045:sink_startofpacket
	wire          router_050_src_endofpacket;                                                         // router_050:src_endofpacket -> rsp_demux_045:sink_endofpacket
	wire          quad_pio_9_s1_agent_rp_valid;                                                       // quad_pio_9_s1_agent:rp_valid -> router_051:sink_valid
	wire  [134:0] quad_pio_9_s1_agent_rp_data;                                                        // quad_pio_9_s1_agent:rp_data -> router_051:sink_data
	wire          quad_pio_9_s1_agent_rp_ready;                                                       // router_051:sink_ready -> quad_pio_9_s1_agent:rp_ready
	wire          quad_pio_9_s1_agent_rp_startofpacket;                                               // quad_pio_9_s1_agent:rp_startofpacket -> router_051:sink_startofpacket
	wire          quad_pio_9_s1_agent_rp_endofpacket;                                                 // quad_pio_9_s1_agent:rp_endofpacket -> router_051:sink_endofpacket
	wire          router_051_src_valid;                                                               // router_051:src_valid -> rsp_demux_046:sink_valid
	wire  [134:0] router_051_src_data;                                                                // router_051:src_data -> rsp_demux_046:sink_data
	wire          router_051_src_ready;                                                               // rsp_demux_046:sink_ready -> router_051:src_ready
	wire   [50:0] router_051_src_channel;                                                             // router_051:src_channel -> rsp_demux_046:sink_channel
	wire          router_051_src_startofpacket;                                                       // router_051:src_startofpacket -> rsp_demux_046:sink_startofpacket
	wire          router_051_src_endofpacket;                                                         // router_051:src_endofpacket -> rsp_demux_046:sink_endofpacket
	wire          quad_pio_10_s1_agent_rp_valid;                                                      // quad_pio_10_s1_agent:rp_valid -> router_052:sink_valid
	wire  [134:0] quad_pio_10_s1_agent_rp_data;                                                       // quad_pio_10_s1_agent:rp_data -> router_052:sink_data
	wire          quad_pio_10_s1_agent_rp_ready;                                                      // router_052:sink_ready -> quad_pio_10_s1_agent:rp_ready
	wire          quad_pio_10_s1_agent_rp_startofpacket;                                              // quad_pio_10_s1_agent:rp_startofpacket -> router_052:sink_startofpacket
	wire          quad_pio_10_s1_agent_rp_endofpacket;                                                // quad_pio_10_s1_agent:rp_endofpacket -> router_052:sink_endofpacket
	wire          router_052_src_valid;                                                               // router_052:src_valid -> rsp_demux_047:sink_valid
	wire  [134:0] router_052_src_data;                                                                // router_052:src_data -> rsp_demux_047:sink_data
	wire          router_052_src_ready;                                                               // rsp_demux_047:sink_ready -> router_052:src_ready
	wire   [50:0] router_052_src_channel;                                                             // router_052:src_channel -> rsp_demux_047:sink_channel
	wire          router_052_src_startofpacket;                                                       // router_052:src_startofpacket -> rsp_demux_047:sink_startofpacket
	wire          router_052_src_endofpacket;                                                         // router_052:src_endofpacket -> rsp_demux_047:sink_endofpacket
	wire          quad_pio_11_s1_agent_rp_valid;                                                      // quad_pio_11_s1_agent:rp_valid -> router_053:sink_valid
	wire  [134:0] quad_pio_11_s1_agent_rp_data;                                                       // quad_pio_11_s1_agent:rp_data -> router_053:sink_data
	wire          quad_pio_11_s1_agent_rp_ready;                                                      // router_053:sink_ready -> quad_pio_11_s1_agent:rp_ready
	wire          quad_pio_11_s1_agent_rp_startofpacket;                                              // quad_pio_11_s1_agent:rp_startofpacket -> router_053:sink_startofpacket
	wire          quad_pio_11_s1_agent_rp_endofpacket;                                                // quad_pio_11_s1_agent:rp_endofpacket -> router_053:sink_endofpacket
	wire          router_053_src_valid;                                                               // router_053:src_valid -> rsp_demux_048:sink_valid
	wire  [134:0] router_053_src_data;                                                                // router_053:src_data -> rsp_demux_048:sink_data
	wire          router_053_src_ready;                                                               // rsp_demux_048:sink_ready -> router_053:src_ready
	wire   [50:0] router_053_src_channel;                                                             // router_053:src_channel -> rsp_demux_048:sink_channel
	wire          router_053_src_startofpacket;                                                       // router_053:src_startofpacket -> rsp_demux_048:sink_startofpacket
	wire          router_053_src_endofpacket;                                                         // router_053:src_endofpacket -> rsp_demux_048:sink_endofpacket
	wire          heartbeat_s1_agent_rp_valid;                                                        // heartbeat_s1_agent:rp_valid -> router_054:sink_valid
	wire  [134:0] heartbeat_s1_agent_rp_data;                                                         // heartbeat_s1_agent:rp_data -> router_054:sink_data
	wire          heartbeat_s1_agent_rp_ready;                                                        // router_054:sink_ready -> heartbeat_s1_agent:rp_ready
	wire          heartbeat_s1_agent_rp_startofpacket;                                                // heartbeat_s1_agent:rp_startofpacket -> router_054:sink_startofpacket
	wire          heartbeat_s1_agent_rp_endofpacket;                                                  // heartbeat_s1_agent:rp_endofpacket -> router_054:sink_endofpacket
	wire          router_054_src_valid;                                                               // router_054:src_valid -> rsp_demux_049:sink_valid
	wire  [134:0] router_054_src_data;                                                                // router_054:src_data -> rsp_demux_049:sink_data
	wire          router_054_src_ready;                                                               // rsp_demux_049:sink_ready -> router_054:src_ready
	wire   [50:0] router_054_src_channel;                                                             // router_054:src_channel -> rsp_demux_049:sink_channel
	wire          router_054_src_startofpacket;                                                       // router_054:src_startofpacket -> rsp_demux_049:sink_startofpacket
	wire          router_054_src_endofpacket;                                                         // router_054:src_endofpacket -> rsp_demux_049:sink_endofpacket
	wire          e_stop_s1_agent_rp_valid;                                                           // e_stop_s1_agent:rp_valid -> router_055:sink_valid
	wire  [134:0] e_stop_s1_agent_rp_data;                                                            // e_stop_s1_agent:rp_data -> router_055:sink_data
	wire          e_stop_s1_agent_rp_ready;                                                           // router_055:sink_ready -> e_stop_s1_agent:rp_ready
	wire          e_stop_s1_agent_rp_startofpacket;                                                   // e_stop_s1_agent:rp_startofpacket -> router_055:sink_startofpacket
	wire          e_stop_s1_agent_rp_endofpacket;                                                     // e_stop_s1_agent:rp_endofpacket -> router_055:sink_endofpacket
	wire          router_055_src_valid;                                                               // router_055:src_valid -> rsp_demux_050:sink_valid
	wire  [134:0] router_055_src_data;                                                                // router_055:src_data -> rsp_demux_050:sink_data
	wire          router_055_src_ready;                                                               // rsp_demux_050:sink_ready -> router_055:src_ready
	wire   [50:0] router_055_src_channel;                                                             // router_055:src_channel -> rsp_demux_050:sink_channel
	wire          router_055_src_startofpacket;                                                       // router_055:src_startofpacket -> rsp_demux_050:sink_startofpacket
	wire          router_055_src_endofpacket;                                                         // router_055:src_endofpacket -> rsp_demux_050:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> fpga_only_master_master_limiter:cmd_sink_valid
	wire  [134:0] router_002_src_data;                                                                // router_002:src_data -> fpga_only_master_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                               // fpga_only_master_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [50:0] router_002_src_channel;                                                             // router_002:src_channel -> fpga_only_master_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> fpga_only_master_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> fpga_only_master_master_limiter:cmd_sink_endofpacket
	wire  [134:0] fpga_only_master_master_limiter_cmd_src_data;                                       // fpga_only_master_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          fpga_only_master_master_limiter_cmd_src_ready;                                      // cmd_demux_002:sink_ready -> fpga_only_master_master_limiter:cmd_src_ready
	wire   [50:0] fpga_only_master_master_limiter_cmd_src_channel;                                    // fpga_only_master_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          fpga_only_master_master_limiter_cmd_src_startofpacket;                              // fpga_only_master_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          fpga_only_master_master_limiter_cmd_src_endofpacket;                                // fpga_only_master_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> fpga_only_master_master_limiter:rsp_sink_valid
	wire  [134:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> fpga_only_master_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                              // fpga_only_master_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [50:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> fpga_only_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> fpga_only_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> fpga_only_master_master_limiter:rsp_sink_endofpacket
	wire          fpga_only_master_master_limiter_rsp_src_valid;                                      // fpga_only_master_master_limiter:rsp_src_valid -> fpga_only_master_master_agent:rp_valid
	wire  [134:0] fpga_only_master_master_limiter_rsp_src_data;                                       // fpga_only_master_master_limiter:rsp_src_data -> fpga_only_master_master_agent:rp_data
	wire          fpga_only_master_master_limiter_rsp_src_ready;                                      // fpga_only_master_master_agent:rp_ready -> fpga_only_master_master_limiter:rsp_src_ready
	wire   [50:0] fpga_only_master_master_limiter_rsp_src_channel;                                    // fpga_only_master_master_limiter:rsp_src_channel -> fpga_only_master_master_agent:rp_channel
	wire          fpga_only_master_master_limiter_rsp_src_startofpacket;                              // fpga_only_master_master_limiter:rsp_src_startofpacket -> fpga_only_master_master_agent:rp_startofpacket
	wire          fpga_only_master_master_limiter_rsp_src_endofpacket;                                // fpga_only_master_master_limiter:rsp_src_endofpacket -> fpga_only_master_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [134:0] router_003_src_data;                                                                // router_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [50:0] router_003_src_channel;                                                             // router_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [134:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                   // cmd_demux_003:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [50:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [134:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                              // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [50:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [134:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                   // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [50:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [134:0] router_004_src_data;                                                                // router_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [50:0] router_004_src_channel;                                                             // router_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [134:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                   // cmd_demux_004:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [50:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                              // rsp_mux_004:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [134:0] rsp_mux_004_src_data;                                                               // rsp_mux_004:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                              // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [50:0] rsp_mux_004_src_channel;                                                            // rsp_mux_004:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                      // rsp_mux_004:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                        // rsp_mux_004:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [134:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                   // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [50:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> onchip_memory2_0_s1_burst_adapter:sink0_valid
	wire  [170:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> onchip_memory2_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                  // onchip_memory2_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [50:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> onchip_memory2_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> onchip_memory2_0_s1_burst_adapter:sink0_endofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_valid;                                    // onchip_memory2_0_s1_burst_adapter:source0_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [170:0] onchip_memory2_0_s1_burst_adapter_source0_data;                                     // onchip_memory2_0_s1_burst_adapter:source0_data -> onchip_memory2_0_s1_agent:cp_data
	wire          onchip_memory2_0_s1_burst_adapter_source0_ready;                                    // onchip_memory2_0_s1_agent:cp_ready -> onchip_memory2_0_s1_burst_adapter:source0_ready
	wire   [50:0] onchip_memory2_0_s1_burst_adapter_source0_channel;                                  // onchip_memory2_0_s1_burst_adapter:source0_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          onchip_memory2_0_s1_burst_adapter_source0_startofpacket;                            // onchip_memory2_0_s1_burst_adapter:source0_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          onchip_memory2_0_s1_burst_adapter_source0_endofpacket;                              // onchip_memory2_0_s1_burst_adapter:source0_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> adc_0_adc_slave_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> adc_0_adc_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                              // adc_0_adc_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [50:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> adc_0_adc_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> adc_0_adc_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> adc_0_adc_slave_burst_adapter:sink0_endofpacket
	wire          adc_0_adc_slave_burst_adapter_source0_valid;                                        // adc_0_adc_slave_burst_adapter:source0_valid -> adc_0_adc_slave_agent:cp_valid
	wire  [134:0] adc_0_adc_slave_burst_adapter_source0_data;                                         // adc_0_adc_slave_burst_adapter:source0_data -> adc_0_adc_slave_agent:cp_data
	wire          adc_0_adc_slave_burst_adapter_source0_ready;                                        // adc_0_adc_slave_agent:cp_ready -> adc_0_adc_slave_burst_adapter:source0_ready
	wire   [50:0] adc_0_adc_slave_burst_adapter_source0_channel;                                      // adc_0_adc_slave_burst_adapter:source0_channel -> adc_0_adc_slave_agent:cp_channel
	wire          adc_0_adc_slave_burst_adapter_source0_startofpacket;                                // adc_0_adc_slave_burst_adapter:source0_startofpacket -> adc_0_adc_slave_agent:cp_startofpacket
	wire          adc_0_adc_slave_burst_adapter_source0_endofpacket;                                  // adc_0_adc_slave_burst_adapter:source0_endofpacket -> adc_0_adc_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                              // jtag_uart_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [50:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid;                            // jtag_uart_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [134:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_data;                             // jtag_uart_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready;                            // jtag_uart_avalon_jtag_slave_agent:cp_ready -> jtag_uart_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [50:0] jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel;                          // jtag_uart_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket;                    // jtag_uart_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket;                      // jtag_uart_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> sysid_qsys_control_slave_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> sysid_qsys_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                              // sysid_qsys_control_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [50:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> sysid_qsys_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> sysid_qsys_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_valid;                               // sysid_qsys_control_slave_burst_adapter:source0_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [134:0] sysid_qsys_control_slave_burst_adapter_source0_data;                                // sysid_qsys_control_slave_burst_adapter:source0_data -> sysid_qsys_control_slave_agent:cp_data
	wire          sysid_qsys_control_slave_burst_adapter_source0_ready;                               // sysid_qsys_control_slave_agent:cp_ready -> sysid_qsys_control_slave_burst_adapter:source0_ready
	wire   [50:0] sysid_qsys_control_slave_burst_adapter_source0_channel;                             // sysid_qsys_control_slave_burst_adapter:source0_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          sysid_qsys_control_slave_burst_adapter_source0_startofpacket;                       // sysid_qsys_control_slave_burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          sysid_qsys_control_slave_burst_adapter_source0_endofpacket;                         // sysid_qsys_control_slave_burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> dipsw_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> dipsw_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                              // dipsw_pio_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [50:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> dipsw_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> dipsw_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> dipsw_pio_s1_burst_adapter:sink0_endofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_valid;                                           // dipsw_pio_s1_burst_adapter:source0_valid -> dipsw_pio_s1_agent:cp_valid
	wire  [134:0] dipsw_pio_s1_burst_adapter_source0_data;                                            // dipsw_pio_s1_burst_adapter:source0_data -> dipsw_pio_s1_agent:cp_data
	wire          dipsw_pio_s1_burst_adapter_source0_ready;                                           // dipsw_pio_s1_agent:cp_ready -> dipsw_pio_s1_burst_adapter:source0_ready
	wire   [50:0] dipsw_pio_s1_burst_adapter_source0_channel;                                         // dipsw_pio_s1_burst_adapter:source0_channel -> dipsw_pio_s1_agent:cp_channel
	wire          dipsw_pio_s1_burst_adapter_source0_startofpacket;                                   // dipsw_pio_s1_burst_adapter:source0_startofpacket -> dipsw_pio_s1_agent:cp_startofpacket
	wire          dipsw_pio_s1_burst_adapter_source0_endofpacket;                                     // dipsw_pio_s1_burst_adapter:source0_endofpacket -> dipsw_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> button_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> button_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                              // button_pio_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [50:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> button_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> button_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> button_pio_s1_burst_adapter:sink0_endofpacket
	wire          button_pio_s1_burst_adapter_source0_valid;                                          // button_pio_s1_burst_adapter:source0_valid -> button_pio_s1_agent:cp_valid
	wire  [134:0] button_pio_s1_burst_adapter_source0_data;                                           // button_pio_s1_burst_adapter:source0_data -> button_pio_s1_agent:cp_data
	wire          button_pio_s1_burst_adapter_source0_ready;                                          // button_pio_s1_agent:cp_ready -> button_pio_s1_burst_adapter:source0_ready
	wire   [50:0] button_pio_s1_burst_adapter_source0_channel;                                        // button_pio_s1_burst_adapter:source0_channel -> button_pio_s1_agent:cp_channel
	wire          button_pio_s1_burst_adapter_source0_startofpacket;                                  // button_pio_s1_burst_adapter:source0_startofpacket -> button_pio_s1_agent:cp_startofpacket
	wire          button_pio_s1_burst_adapter_source0_endofpacket;                                    // button_pio_s1_burst_adapter:source0_endofpacket -> button_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> gpio_pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> gpio_pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                              // gpio_pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [50:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> gpio_pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> gpio_pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> gpio_pio_0_s1_burst_adapter:sink0_endofpacket
	wire          gpio_pio_0_s1_burst_adapter_source0_valid;                                          // gpio_pio_0_s1_burst_adapter:source0_valid -> gpio_pio_0_s1_agent:cp_valid
	wire  [134:0] gpio_pio_0_s1_burst_adapter_source0_data;                                           // gpio_pio_0_s1_burst_adapter:source0_data -> gpio_pio_0_s1_agent:cp_data
	wire          gpio_pio_0_s1_burst_adapter_source0_ready;                                          // gpio_pio_0_s1_agent:cp_ready -> gpio_pio_0_s1_burst_adapter:source0_ready
	wire   [50:0] gpio_pio_0_s1_burst_adapter_source0_channel;                                        // gpio_pio_0_s1_burst_adapter:source0_channel -> gpio_pio_0_s1_agent:cp_channel
	wire          gpio_pio_0_s1_burst_adapter_source0_startofpacket;                                  // gpio_pio_0_s1_burst_adapter:source0_startofpacket -> gpio_pio_0_s1_agent:cp_startofpacket
	wire          gpio_pio_0_s1_burst_adapter_source0_endofpacket;                                    // gpio_pio_0_s1_burst_adapter:source0_endofpacket -> gpio_pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                              // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [50:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                                             // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [134:0] led_pio_s1_burst_adapter_source0_data;                                              // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                                             // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire   [50:0] led_pio_s1_burst_adapter_source0_channel;                                           // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                                     // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                                       // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> quad_pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> quad_pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                              // quad_pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [50:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> quad_pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> quad_pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> quad_pio_0_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_0_s1_burst_adapter_source0_valid;                                          // quad_pio_0_s1_burst_adapter:source0_valid -> quad_pio_0_s1_agent:cp_valid
	wire  [134:0] quad_pio_0_s1_burst_adapter_source0_data;                                           // quad_pio_0_s1_burst_adapter:source0_data -> quad_pio_0_s1_agent:cp_data
	wire          quad_pio_0_s1_burst_adapter_source0_ready;                                          // quad_pio_0_s1_agent:cp_ready -> quad_pio_0_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_0_s1_burst_adapter_source0_channel;                                        // quad_pio_0_s1_burst_adapter:source0_channel -> quad_pio_0_s1_agent:cp_channel
	wire          quad_pio_0_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_0_s1_burst_adapter:source0_startofpacket -> quad_pio_0_s1_agent:cp_startofpacket
	wire          quad_pio_0_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_0_s1_burst_adapter:source0_endofpacket -> quad_pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> quad_reset_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> quad_reset_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                              // quad_reset_pio_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [50:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> quad_reset_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> quad_reset_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> quad_reset_pio_s1_burst_adapter:sink0_endofpacket
	wire          quad_reset_pio_s1_burst_adapter_source0_valid;                                      // quad_reset_pio_s1_burst_adapter:source0_valid -> quad_reset_pio_s1_agent:cp_valid
	wire  [134:0] quad_reset_pio_s1_burst_adapter_source0_data;                                       // quad_reset_pio_s1_burst_adapter:source0_data -> quad_reset_pio_s1_agent:cp_data
	wire          quad_reset_pio_s1_burst_adapter_source0_ready;                                      // quad_reset_pio_s1_agent:cp_ready -> quad_reset_pio_s1_burst_adapter:source0_ready
	wire   [50:0] quad_reset_pio_s1_burst_adapter_source0_channel;                                    // quad_reset_pio_s1_burst_adapter:source0_channel -> quad_reset_pio_s1_agent:cp_channel
	wire          quad_reset_pio_s1_burst_adapter_source0_startofpacket;                              // quad_reset_pio_s1_burst_adapter:source0_startofpacket -> quad_reset_pio_s1_agent:cp_startofpacket
	wire          quad_reset_pio_s1_burst_adapter_source0_endofpacket;                                // quad_reset_pio_s1_burst_adapter:source0_endofpacket -> quad_reset_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> pid_correction_pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> pid_correction_pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                              // pid_correction_pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [50:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> pid_correction_pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> pid_correction_pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> pid_correction_pio_0_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_0_s1_burst_adapter_source0_valid;                                // pid_correction_pio_0_s1_burst_adapter:source0_valid -> pid_correction_pio_0_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_0_s1_burst_adapter_source0_data;                                 // pid_correction_pio_0_s1_burst_adapter:source0_data -> pid_correction_pio_0_s1_agent:cp_data
	wire          pid_correction_pio_0_s1_burst_adapter_source0_ready;                                // pid_correction_pio_0_s1_agent:cp_ready -> pid_correction_pio_0_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_0_s1_burst_adapter_source0_channel;                              // pid_correction_pio_0_s1_burst_adapter:source0_channel -> pid_correction_pio_0_s1_agent:cp_channel
	wire          pid_correction_pio_0_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_0_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_0_s1_agent:cp_startofpacket
	wire          pid_correction_pio_0_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_0_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> pid_error_pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> pid_error_pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                              // pid_error_pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [50:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> pid_error_pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> pid_error_pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> pid_error_pio_0_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_0_s1_burst_adapter_source0_valid;                                     // pid_error_pio_0_s1_burst_adapter:source0_valid -> pid_error_pio_0_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_0_s1_burst_adapter_source0_data;                                      // pid_error_pio_0_s1_burst_adapter:source0_data -> pid_error_pio_0_s1_agent:cp_data
	wire          pid_error_pio_0_s1_burst_adapter_source0_ready;                                     // pid_error_pio_0_s1_agent:cp_ready -> pid_error_pio_0_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_0_s1_burst_adapter_source0_channel;                                   // pid_error_pio_0_s1_burst_adapter:source0_channel -> pid_error_pio_0_s1_agent:cp_channel
	wire          pid_error_pio_0_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_0_s1_burst_adapter:source0_startofpacket -> pid_error_pio_0_s1_agent:cp_startofpacket
	wire          pid_error_pio_0_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_0_s1_burst_adapter:source0_endofpacket -> pid_error_pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> quad_pio_1_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> quad_pio_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                              // quad_pio_1_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [50:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> quad_pio_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> quad_pio_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> quad_pio_1_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_1_s1_burst_adapter_source0_valid;                                          // quad_pio_1_s1_burst_adapter:source0_valid -> quad_pio_1_s1_agent:cp_valid
	wire  [134:0] quad_pio_1_s1_burst_adapter_source0_data;                                           // quad_pio_1_s1_burst_adapter:source0_data -> quad_pio_1_s1_agent:cp_data
	wire          quad_pio_1_s1_burst_adapter_source0_ready;                                          // quad_pio_1_s1_agent:cp_ready -> quad_pio_1_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_1_s1_burst_adapter_source0_channel;                                        // quad_pio_1_s1_burst_adapter:source0_channel -> quad_pio_1_s1_agent:cp_channel
	wire          quad_pio_1_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_1_s1_burst_adapter:source0_startofpacket -> quad_pio_1_s1_agent:cp_startofpacket
	wire          quad_pio_1_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_1_s1_burst_adapter:source0_endofpacket -> quad_pio_1_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> quad_pio_2_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> quad_pio_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                              // quad_pio_2_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [50:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> quad_pio_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> quad_pio_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> quad_pio_2_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_2_s1_burst_adapter_source0_valid;                                          // quad_pio_2_s1_burst_adapter:source0_valid -> quad_pio_2_s1_agent:cp_valid
	wire  [134:0] quad_pio_2_s1_burst_adapter_source0_data;                                           // quad_pio_2_s1_burst_adapter:source0_data -> quad_pio_2_s1_agent:cp_data
	wire          quad_pio_2_s1_burst_adapter_source0_ready;                                          // quad_pio_2_s1_agent:cp_ready -> quad_pio_2_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_2_s1_burst_adapter_source0_channel;                                        // quad_pio_2_s1_burst_adapter:source0_channel -> quad_pio_2_s1_agent:cp_channel
	wire          quad_pio_2_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_2_s1_burst_adapter:source0_startofpacket -> quad_pio_2_s1_agent:cp_startofpacket
	wire          quad_pio_2_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_2_s1_burst_adapter:source0_endofpacket -> quad_pio_2_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> quad_pio_3_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> quad_pio_3_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                              // quad_pio_3_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [50:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> quad_pio_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> quad_pio_3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> quad_pio_3_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_3_s1_burst_adapter_source0_valid;                                          // quad_pio_3_s1_burst_adapter:source0_valid -> quad_pio_3_s1_agent:cp_valid
	wire  [134:0] quad_pio_3_s1_burst_adapter_source0_data;                                           // quad_pio_3_s1_burst_adapter:source0_data -> quad_pio_3_s1_agent:cp_data
	wire          quad_pio_3_s1_burst_adapter_source0_ready;                                          // quad_pio_3_s1_agent:cp_ready -> quad_pio_3_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_3_s1_burst_adapter_source0_channel;                                        // quad_pio_3_s1_burst_adapter:source0_channel -> quad_pio_3_s1_agent:cp_channel
	wire          quad_pio_3_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_3_s1_burst_adapter:source0_startofpacket -> quad_pio_3_s1_agent:cp_startofpacket
	wire          quad_pio_3_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_3_s1_burst_adapter:source0_endofpacket -> quad_pio_3_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> quad_pio_4_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> quad_pio_4_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                              // quad_pio_4_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [50:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> quad_pio_4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> quad_pio_4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> quad_pio_4_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_4_s1_burst_adapter_source0_valid;                                          // quad_pio_4_s1_burst_adapter:source0_valid -> quad_pio_4_s1_agent:cp_valid
	wire  [134:0] quad_pio_4_s1_burst_adapter_source0_data;                                           // quad_pio_4_s1_burst_adapter:source0_data -> quad_pio_4_s1_agent:cp_data
	wire          quad_pio_4_s1_burst_adapter_source0_ready;                                          // quad_pio_4_s1_agent:cp_ready -> quad_pio_4_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_4_s1_burst_adapter_source0_channel;                                        // quad_pio_4_s1_burst_adapter:source0_channel -> quad_pio_4_s1_agent:cp_channel
	wire          quad_pio_4_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_4_s1_burst_adapter:source0_startofpacket -> quad_pio_4_s1_agent:cp_startofpacket
	wire          quad_pio_4_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_4_s1_burst_adapter:source0_endofpacket -> quad_pio_4_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> quad_pio_5_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> quad_pio_5_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                              // quad_pio_5_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [50:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> quad_pio_5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> quad_pio_5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> quad_pio_5_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_5_s1_burst_adapter_source0_valid;                                          // quad_pio_5_s1_burst_adapter:source0_valid -> quad_pio_5_s1_agent:cp_valid
	wire  [134:0] quad_pio_5_s1_burst_adapter_source0_data;                                           // quad_pio_5_s1_burst_adapter:source0_data -> quad_pio_5_s1_agent:cp_data
	wire          quad_pio_5_s1_burst_adapter_source0_ready;                                          // quad_pio_5_s1_agent:cp_ready -> quad_pio_5_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_5_s1_burst_adapter_source0_channel;                                        // quad_pio_5_s1_burst_adapter:source0_channel -> quad_pio_5_s1_agent:cp_channel
	wire          quad_pio_5_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_5_s1_burst_adapter:source0_startofpacket -> quad_pio_5_s1_agent:cp_startofpacket
	wire          quad_pio_5_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_5_s1_burst_adapter:source0_endofpacket -> quad_pio_5_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> quad_pio_6_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> quad_pio_6_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                              // quad_pio_6_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [50:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> quad_pio_6_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> quad_pio_6_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> quad_pio_6_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_6_s1_burst_adapter_source0_valid;                                          // quad_pio_6_s1_burst_adapter:source0_valid -> quad_pio_6_s1_agent:cp_valid
	wire  [134:0] quad_pio_6_s1_burst_adapter_source0_data;                                           // quad_pio_6_s1_burst_adapter:source0_data -> quad_pio_6_s1_agent:cp_data
	wire          quad_pio_6_s1_burst_adapter_source0_ready;                                          // quad_pio_6_s1_agent:cp_ready -> quad_pio_6_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_6_s1_burst_adapter_source0_channel;                                        // quad_pio_6_s1_burst_adapter:source0_channel -> quad_pio_6_s1_agent:cp_channel
	wire          quad_pio_6_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_6_s1_burst_adapter:source0_startofpacket -> quad_pio_6_s1_agent:cp_startofpacket
	wire          quad_pio_6_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_6_s1_burst_adapter:source0_endofpacket -> quad_pio_6_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> quad_pio_7_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> quad_pio_7_s1_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                              // quad_pio_7_s1_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [50:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> quad_pio_7_s1_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> quad_pio_7_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> quad_pio_7_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_7_s1_burst_adapter_source0_valid;                                          // quad_pio_7_s1_burst_adapter:source0_valid -> quad_pio_7_s1_agent:cp_valid
	wire  [134:0] quad_pio_7_s1_burst_adapter_source0_data;                                           // quad_pio_7_s1_burst_adapter:source0_data -> quad_pio_7_s1_agent:cp_data
	wire          quad_pio_7_s1_burst_adapter_source0_ready;                                          // quad_pio_7_s1_agent:cp_ready -> quad_pio_7_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_7_s1_burst_adapter_source0_channel;                                        // quad_pio_7_s1_burst_adapter:source0_channel -> quad_pio_7_s1_agent:cp_channel
	wire          quad_pio_7_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_7_s1_burst_adapter:source0_startofpacket -> quad_pio_7_s1_agent:cp_startofpacket
	wire          quad_pio_7_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_7_s1_burst_adapter:source0_endofpacket -> quad_pio_7_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> pid_error_pio_1_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> pid_error_pio_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                              // pid_error_pio_1_s1_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [50:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> pid_error_pio_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> pid_error_pio_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> pid_error_pio_1_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_1_s1_burst_adapter_source0_valid;                                     // pid_error_pio_1_s1_burst_adapter:source0_valid -> pid_error_pio_1_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_1_s1_burst_adapter_source0_data;                                      // pid_error_pio_1_s1_burst_adapter:source0_data -> pid_error_pio_1_s1_agent:cp_data
	wire          pid_error_pio_1_s1_burst_adapter_source0_ready;                                     // pid_error_pio_1_s1_agent:cp_ready -> pid_error_pio_1_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_1_s1_burst_adapter_source0_channel;                                   // pid_error_pio_1_s1_burst_adapter:source0_channel -> pid_error_pio_1_s1_agent:cp_channel
	wire          pid_error_pio_1_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_1_s1_burst_adapter:source0_startofpacket -> pid_error_pio_1_s1_agent:cp_startofpacket
	wire          pid_error_pio_1_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_1_s1_burst_adapter:source0_endofpacket -> pid_error_pio_1_s1_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> pid_error_pio_2_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> pid_error_pio_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                              // pid_error_pio_2_s1_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [50:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> pid_error_pio_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> pid_error_pio_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> pid_error_pio_2_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_2_s1_burst_adapter_source0_valid;                                     // pid_error_pio_2_s1_burst_adapter:source0_valid -> pid_error_pio_2_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_2_s1_burst_adapter_source0_data;                                      // pid_error_pio_2_s1_burst_adapter:source0_data -> pid_error_pio_2_s1_agent:cp_data
	wire          pid_error_pio_2_s1_burst_adapter_source0_ready;                                     // pid_error_pio_2_s1_agent:cp_ready -> pid_error_pio_2_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_2_s1_burst_adapter_source0_channel;                                   // pid_error_pio_2_s1_burst_adapter:source0_channel -> pid_error_pio_2_s1_agent:cp_channel
	wire          pid_error_pio_2_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_2_s1_burst_adapter:source0_startofpacket -> pid_error_pio_2_s1_agent:cp_startofpacket
	wire          pid_error_pio_2_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_2_s1_burst_adapter:source0_endofpacket -> pid_error_pio_2_s1_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> pid_error_pio_3_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> pid_error_pio_3_s1_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                              // pid_error_pio_3_s1_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [50:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> pid_error_pio_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> pid_error_pio_3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> pid_error_pio_3_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_3_s1_burst_adapter_source0_valid;                                     // pid_error_pio_3_s1_burst_adapter:source0_valid -> pid_error_pio_3_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_3_s1_burst_adapter_source0_data;                                      // pid_error_pio_3_s1_burst_adapter:source0_data -> pid_error_pio_3_s1_agent:cp_data
	wire          pid_error_pio_3_s1_burst_adapter_source0_ready;                                     // pid_error_pio_3_s1_agent:cp_ready -> pid_error_pio_3_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_3_s1_burst_adapter_source0_channel;                                   // pid_error_pio_3_s1_burst_adapter:source0_channel -> pid_error_pio_3_s1_agent:cp_channel
	wire          pid_error_pio_3_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_3_s1_burst_adapter:source0_startofpacket -> pid_error_pio_3_s1_agent:cp_startofpacket
	wire          pid_error_pio_3_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_3_s1_burst_adapter:source0_endofpacket -> pid_error_pio_3_s1_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> pid_error_pio_4_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> pid_error_pio_4_s1_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                              // pid_error_pio_4_s1_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [50:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> pid_error_pio_4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> pid_error_pio_4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> pid_error_pio_4_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_4_s1_burst_adapter_source0_valid;                                     // pid_error_pio_4_s1_burst_adapter:source0_valid -> pid_error_pio_4_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_4_s1_burst_adapter_source0_data;                                      // pid_error_pio_4_s1_burst_adapter:source0_data -> pid_error_pio_4_s1_agent:cp_data
	wire          pid_error_pio_4_s1_burst_adapter_source0_ready;                                     // pid_error_pio_4_s1_agent:cp_ready -> pid_error_pio_4_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_4_s1_burst_adapter_source0_channel;                                   // pid_error_pio_4_s1_burst_adapter:source0_channel -> pid_error_pio_4_s1_agent:cp_channel
	wire          pid_error_pio_4_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_4_s1_burst_adapter:source0_startofpacket -> pid_error_pio_4_s1_agent:cp_startofpacket
	wire          pid_error_pio_4_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_4_s1_burst_adapter:source0_endofpacket -> pid_error_pio_4_s1_agent:cp_endofpacket
	wire          cmd_mux_024_src_valid;                                                              // cmd_mux_024:src_valid -> pid_error_pio_5_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_024_src_data;                                                               // cmd_mux_024:src_data -> pid_error_pio_5_s1_burst_adapter:sink0_data
	wire          cmd_mux_024_src_ready;                                                              // pid_error_pio_5_s1_burst_adapter:sink0_ready -> cmd_mux_024:src_ready
	wire   [50:0] cmd_mux_024_src_channel;                                                            // cmd_mux_024:src_channel -> pid_error_pio_5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_024_src_startofpacket;                                                      // cmd_mux_024:src_startofpacket -> pid_error_pio_5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                        // cmd_mux_024:src_endofpacket -> pid_error_pio_5_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_5_s1_burst_adapter_source0_valid;                                     // pid_error_pio_5_s1_burst_adapter:source0_valid -> pid_error_pio_5_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_5_s1_burst_adapter_source0_data;                                      // pid_error_pio_5_s1_burst_adapter:source0_data -> pid_error_pio_5_s1_agent:cp_data
	wire          pid_error_pio_5_s1_burst_adapter_source0_ready;                                     // pid_error_pio_5_s1_agent:cp_ready -> pid_error_pio_5_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_5_s1_burst_adapter_source0_channel;                                   // pid_error_pio_5_s1_burst_adapter:source0_channel -> pid_error_pio_5_s1_agent:cp_channel
	wire          pid_error_pio_5_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_5_s1_burst_adapter:source0_startofpacket -> pid_error_pio_5_s1_agent:cp_startofpacket
	wire          pid_error_pio_5_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_5_s1_burst_adapter:source0_endofpacket -> pid_error_pio_5_s1_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                              // cmd_mux_025:src_valid -> pid_error_pio_6_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_025_src_data;                                                               // cmd_mux_025:src_data -> pid_error_pio_6_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                              // pid_error_pio_6_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [50:0] cmd_mux_025_src_channel;                                                            // cmd_mux_025:src_channel -> pid_error_pio_6_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                                      // cmd_mux_025:src_startofpacket -> pid_error_pio_6_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                        // cmd_mux_025:src_endofpacket -> pid_error_pio_6_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_6_s1_burst_adapter_source0_valid;                                     // pid_error_pio_6_s1_burst_adapter:source0_valid -> pid_error_pio_6_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_6_s1_burst_adapter_source0_data;                                      // pid_error_pio_6_s1_burst_adapter:source0_data -> pid_error_pio_6_s1_agent:cp_data
	wire          pid_error_pio_6_s1_burst_adapter_source0_ready;                                     // pid_error_pio_6_s1_agent:cp_ready -> pid_error_pio_6_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_6_s1_burst_adapter_source0_channel;                                   // pid_error_pio_6_s1_burst_adapter:source0_channel -> pid_error_pio_6_s1_agent:cp_channel
	wire          pid_error_pio_6_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_6_s1_burst_adapter:source0_startofpacket -> pid_error_pio_6_s1_agent:cp_startofpacket
	wire          pid_error_pio_6_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_6_s1_burst_adapter:source0_endofpacket -> pid_error_pio_6_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                              // cmd_mux_026:src_valid -> pid_error_pio_7_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_026_src_data;                                                               // cmd_mux_026:src_data -> pid_error_pio_7_s1_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                              // pid_error_pio_7_s1_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [50:0] cmd_mux_026_src_channel;                                                            // cmd_mux_026:src_channel -> pid_error_pio_7_s1_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                                      // cmd_mux_026:src_startofpacket -> pid_error_pio_7_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                        // cmd_mux_026:src_endofpacket -> pid_error_pio_7_s1_burst_adapter:sink0_endofpacket
	wire          pid_error_pio_7_s1_burst_adapter_source0_valid;                                     // pid_error_pio_7_s1_burst_adapter:source0_valid -> pid_error_pio_7_s1_agent:cp_valid
	wire  [134:0] pid_error_pio_7_s1_burst_adapter_source0_data;                                      // pid_error_pio_7_s1_burst_adapter:source0_data -> pid_error_pio_7_s1_agent:cp_data
	wire          pid_error_pio_7_s1_burst_adapter_source0_ready;                                     // pid_error_pio_7_s1_agent:cp_ready -> pid_error_pio_7_s1_burst_adapter:source0_ready
	wire   [50:0] pid_error_pio_7_s1_burst_adapter_source0_channel;                                   // pid_error_pio_7_s1_burst_adapter:source0_channel -> pid_error_pio_7_s1_agent:cp_channel
	wire          pid_error_pio_7_s1_burst_adapter_source0_startofpacket;                             // pid_error_pio_7_s1_burst_adapter:source0_startofpacket -> pid_error_pio_7_s1_agent:cp_startofpacket
	wire          pid_error_pio_7_s1_burst_adapter_source0_endofpacket;                               // pid_error_pio_7_s1_burst_adapter:source0_endofpacket -> pid_error_pio_7_s1_agent:cp_endofpacket
	wire          cmd_mux_027_src_valid;                                                              // cmd_mux_027:src_valid -> pid_correction_pio_1_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_027_src_data;                                                               // cmd_mux_027:src_data -> pid_correction_pio_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_027_src_ready;                                                              // pid_correction_pio_1_s1_burst_adapter:sink0_ready -> cmd_mux_027:src_ready
	wire   [50:0] cmd_mux_027_src_channel;                                                            // cmd_mux_027:src_channel -> pid_correction_pio_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_027_src_startofpacket;                                                      // cmd_mux_027:src_startofpacket -> pid_correction_pio_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                        // cmd_mux_027:src_endofpacket -> pid_correction_pio_1_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_1_s1_burst_adapter_source0_valid;                                // pid_correction_pio_1_s1_burst_adapter:source0_valid -> pid_correction_pio_1_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_1_s1_burst_adapter_source0_data;                                 // pid_correction_pio_1_s1_burst_adapter:source0_data -> pid_correction_pio_1_s1_agent:cp_data
	wire          pid_correction_pio_1_s1_burst_adapter_source0_ready;                                // pid_correction_pio_1_s1_agent:cp_ready -> pid_correction_pio_1_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_1_s1_burst_adapter_source0_channel;                              // pid_correction_pio_1_s1_burst_adapter:source0_channel -> pid_correction_pio_1_s1_agent:cp_channel
	wire          pid_correction_pio_1_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_1_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_1_s1_agent:cp_startofpacket
	wire          pid_correction_pio_1_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_1_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_1_s1_agent:cp_endofpacket
	wire          cmd_mux_028_src_valid;                                                              // cmd_mux_028:src_valid -> pid_correction_pio_2_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_028_src_data;                                                               // cmd_mux_028:src_data -> pid_correction_pio_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_028_src_ready;                                                              // pid_correction_pio_2_s1_burst_adapter:sink0_ready -> cmd_mux_028:src_ready
	wire   [50:0] cmd_mux_028_src_channel;                                                            // cmd_mux_028:src_channel -> pid_correction_pio_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_028_src_startofpacket;                                                      // cmd_mux_028:src_startofpacket -> pid_correction_pio_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                        // cmd_mux_028:src_endofpacket -> pid_correction_pio_2_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_2_s1_burst_adapter_source0_valid;                                // pid_correction_pio_2_s1_burst_adapter:source0_valid -> pid_correction_pio_2_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_2_s1_burst_adapter_source0_data;                                 // pid_correction_pio_2_s1_burst_adapter:source0_data -> pid_correction_pio_2_s1_agent:cp_data
	wire          pid_correction_pio_2_s1_burst_adapter_source0_ready;                                // pid_correction_pio_2_s1_agent:cp_ready -> pid_correction_pio_2_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_2_s1_burst_adapter_source0_channel;                              // pid_correction_pio_2_s1_burst_adapter:source0_channel -> pid_correction_pio_2_s1_agent:cp_channel
	wire          pid_correction_pio_2_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_2_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_2_s1_agent:cp_startofpacket
	wire          pid_correction_pio_2_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_2_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_2_s1_agent:cp_endofpacket
	wire          cmd_mux_029_src_valid;                                                              // cmd_mux_029:src_valid -> pid_correction_pio_3_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_029_src_data;                                                               // cmd_mux_029:src_data -> pid_correction_pio_3_s1_burst_adapter:sink0_data
	wire          cmd_mux_029_src_ready;                                                              // pid_correction_pio_3_s1_burst_adapter:sink0_ready -> cmd_mux_029:src_ready
	wire   [50:0] cmd_mux_029_src_channel;                                                            // cmd_mux_029:src_channel -> pid_correction_pio_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_029_src_startofpacket;                                                      // cmd_mux_029:src_startofpacket -> pid_correction_pio_3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                        // cmd_mux_029:src_endofpacket -> pid_correction_pio_3_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_3_s1_burst_adapter_source0_valid;                                // pid_correction_pio_3_s1_burst_adapter:source0_valid -> pid_correction_pio_3_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_3_s1_burst_adapter_source0_data;                                 // pid_correction_pio_3_s1_burst_adapter:source0_data -> pid_correction_pio_3_s1_agent:cp_data
	wire          pid_correction_pio_3_s1_burst_adapter_source0_ready;                                // pid_correction_pio_3_s1_agent:cp_ready -> pid_correction_pio_3_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_3_s1_burst_adapter_source0_channel;                              // pid_correction_pio_3_s1_burst_adapter:source0_channel -> pid_correction_pio_3_s1_agent:cp_channel
	wire          pid_correction_pio_3_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_3_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_3_s1_agent:cp_startofpacket
	wire          pid_correction_pio_3_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_3_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_3_s1_agent:cp_endofpacket
	wire          cmd_mux_030_src_valid;                                                              // cmd_mux_030:src_valid -> pid_correction_pio_5_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_030_src_data;                                                               // cmd_mux_030:src_data -> pid_correction_pio_5_s1_burst_adapter:sink0_data
	wire          cmd_mux_030_src_ready;                                                              // pid_correction_pio_5_s1_burst_adapter:sink0_ready -> cmd_mux_030:src_ready
	wire   [50:0] cmd_mux_030_src_channel;                                                            // cmd_mux_030:src_channel -> pid_correction_pio_5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_030_src_startofpacket;                                                      // cmd_mux_030:src_startofpacket -> pid_correction_pio_5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                        // cmd_mux_030:src_endofpacket -> pid_correction_pio_5_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_5_s1_burst_adapter_source0_valid;                                // pid_correction_pio_5_s1_burst_adapter:source0_valid -> pid_correction_pio_5_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_5_s1_burst_adapter_source0_data;                                 // pid_correction_pio_5_s1_burst_adapter:source0_data -> pid_correction_pio_5_s1_agent:cp_data
	wire          pid_correction_pio_5_s1_burst_adapter_source0_ready;                                // pid_correction_pio_5_s1_agent:cp_ready -> pid_correction_pio_5_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_5_s1_burst_adapter_source0_channel;                              // pid_correction_pio_5_s1_burst_adapter:source0_channel -> pid_correction_pio_5_s1_agent:cp_channel
	wire          pid_correction_pio_5_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_5_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_5_s1_agent:cp_startofpacket
	wire          pid_correction_pio_5_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_5_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_5_s1_agent:cp_endofpacket
	wire          cmd_mux_031_src_valid;                                                              // cmd_mux_031:src_valid -> pid_correction_pio_6_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_031_src_data;                                                               // cmd_mux_031:src_data -> pid_correction_pio_6_s1_burst_adapter:sink0_data
	wire          cmd_mux_031_src_ready;                                                              // pid_correction_pio_6_s1_burst_adapter:sink0_ready -> cmd_mux_031:src_ready
	wire   [50:0] cmd_mux_031_src_channel;                                                            // cmd_mux_031:src_channel -> pid_correction_pio_6_s1_burst_adapter:sink0_channel
	wire          cmd_mux_031_src_startofpacket;                                                      // cmd_mux_031:src_startofpacket -> pid_correction_pio_6_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                        // cmd_mux_031:src_endofpacket -> pid_correction_pio_6_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_6_s1_burst_adapter_source0_valid;                                // pid_correction_pio_6_s1_burst_adapter:source0_valid -> pid_correction_pio_6_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_6_s1_burst_adapter_source0_data;                                 // pid_correction_pio_6_s1_burst_adapter:source0_data -> pid_correction_pio_6_s1_agent:cp_data
	wire          pid_correction_pio_6_s1_burst_adapter_source0_ready;                                // pid_correction_pio_6_s1_agent:cp_ready -> pid_correction_pio_6_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_6_s1_burst_adapter_source0_channel;                              // pid_correction_pio_6_s1_burst_adapter:source0_channel -> pid_correction_pio_6_s1_agent:cp_channel
	wire          pid_correction_pio_6_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_6_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_6_s1_agent:cp_startofpacket
	wire          pid_correction_pio_6_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_6_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_6_s1_agent:cp_endofpacket
	wire          cmd_mux_032_src_valid;                                                              // cmd_mux_032:src_valid -> pid_correction_pio_7_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_032_src_data;                                                               // cmd_mux_032:src_data -> pid_correction_pio_7_s1_burst_adapter:sink0_data
	wire          cmd_mux_032_src_ready;                                                              // pid_correction_pio_7_s1_burst_adapter:sink0_ready -> cmd_mux_032:src_ready
	wire   [50:0] cmd_mux_032_src_channel;                                                            // cmd_mux_032:src_channel -> pid_correction_pio_7_s1_burst_adapter:sink0_channel
	wire          cmd_mux_032_src_startofpacket;                                                      // cmd_mux_032:src_startofpacket -> pid_correction_pio_7_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                        // cmd_mux_032:src_endofpacket -> pid_correction_pio_7_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_7_s1_burst_adapter_source0_valid;                                // pid_correction_pio_7_s1_burst_adapter:source0_valid -> pid_correction_pio_7_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_7_s1_burst_adapter_source0_data;                                 // pid_correction_pio_7_s1_burst_adapter:source0_data -> pid_correction_pio_7_s1_agent:cp_data
	wire          pid_correction_pio_7_s1_burst_adapter_source0_ready;                                // pid_correction_pio_7_s1_agent:cp_ready -> pid_correction_pio_7_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_7_s1_burst_adapter_source0_channel;                              // pid_correction_pio_7_s1_burst_adapter:source0_channel -> pid_correction_pio_7_s1_agent:cp_channel
	wire          pid_correction_pio_7_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_7_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_7_s1_agent:cp_startofpacket
	wire          pid_correction_pio_7_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_7_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_7_s1_agent:cp_endofpacket
	wire          cmd_mux_033_src_valid;                                                              // cmd_mux_033:src_valid -> pid_correction_pio_4_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_033_src_data;                                                               // cmd_mux_033:src_data -> pid_correction_pio_4_s1_burst_adapter:sink0_data
	wire          cmd_mux_033_src_ready;                                                              // pid_correction_pio_4_s1_burst_adapter:sink0_ready -> cmd_mux_033:src_ready
	wire   [50:0] cmd_mux_033_src_channel;                                                            // cmd_mux_033:src_channel -> pid_correction_pio_4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_033_src_startofpacket;                                                      // cmd_mux_033:src_startofpacket -> pid_correction_pio_4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                        // cmd_mux_033:src_endofpacket -> pid_correction_pio_4_s1_burst_adapter:sink0_endofpacket
	wire          pid_correction_pio_4_s1_burst_adapter_source0_valid;                                // pid_correction_pio_4_s1_burst_adapter:source0_valid -> pid_correction_pio_4_s1_agent:cp_valid
	wire  [134:0] pid_correction_pio_4_s1_burst_adapter_source0_data;                                 // pid_correction_pio_4_s1_burst_adapter:source0_data -> pid_correction_pio_4_s1_agent:cp_data
	wire          pid_correction_pio_4_s1_burst_adapter_source0_ready;                                // pid_correction_pio_4_s1_agent:cp_ready -> pid_correction_pio_4_s1_burst_adapter:source0_ready
	wire   [50:0] pid_correction_pio_4_s1_burst_adapter_source0_channel;                              // pid_correction_pio_4_s1_burst_adapter:source0_channel -> pid_correction_pio_4_s1_agent:cp_channel
	wire          pid_correction_pio_4_s1_burst_adapter_source0_startofpacket;                        // pid_correction_pio_4_s1_burst_adapter:source0_startofpacket -> pid_correction_pio_4_s1_agent:cp_startofpacket
	wire          pid_correction_pio_4_s1_burst_adapter_source0_endofpacket;                          // pid_correction_pio_4_s1_burst_adapter:source0_endofpacket -> pid_correction_pio_4_s1_agent:cp_endofpacket
	wire          cmd_mux_034_src_valid;                                                              // cmd_mux_034:src_valid -> pid_values_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_034_src_data;                                                               // cmd_mux_034:src_data -> pid_values_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_034_src_ready;                                                              // pid_values_pio_s1_burst_adapter:sink0_ready -> cmd_mux_034:src_ready
	wire   [50:0] cmd_mux_034_src_channel;                                                            // cmd_mux_034:src_channel -> pid_values_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_034_src_startofpacket;                                                      // cmd_mux_034:src_startofpacket -> pid_values_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                        // cmd_mux_034:src_endofpacket -> pid_values_pio_s1_burst_adapter:sink0_endofpacket
	wire          pid_values_pio_s1_burst_adapter_source0_valid;                                      // pid_values_pio_s1_burst_adapter:source0_valid -> pid_values_pio_s1_agent:cp_valid
	wire  [134:0] pid_values_pio_s1_burst_adapter_source0_data;                                       // pid_values_pio_s1_burst_adapter:source0_data -> pid_values_pio_s1_agent:cp_data
	wire          pid_values_pio_s1_burst_adapter_source0_ready;                                      // pid_values_pio_s1_agent:cp_ready -> pid_values_pio_s1_burst_adapter:source0_ready
	wire   [50:0] pid_values_pio_s1_burst_adapter_source0_channel;                                    // pid_values_pio_s1_burst_adapter:source0_channel -> pid_values_pio_s1_agent:cp_channel
	wire          pid_values_pio_s1_burst_adapter_source0_startofpacket;                              // pid_values_pio_s1_burst_adapter:source0_startofpacket -> pid_values_pio_s1_agent:cp_startofpacket
	wire          pid_values_pio_s1_burst_adapter_source0_endofpacket;                                // pid_values_pio_s1_burst_adapter:source0_endofpacket -> pid_values_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_035_src_valid;                                                              // cmd_mux_035:src_valid -> pwm_pio_0_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_035_src_data;                                                               // cmd_mux_035:src_data -> pwm_pio_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_035_src_ready;                                                              // pwm_pio_0_s1_burst_adapter:sink0_ready -> cmd_mux_035:src_ready
	wire   [50:0] cmd_mux_035_src_channel;                                                            // cmd_mux_035:src_channel -> pwm_pio_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_035_src_startofpacket;                                                      // cmd_mux_035:src_startofpacket -> pwm_pio_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                        // cmd_mux_035:src_endofpacket -> pwm_pio_0_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_0_s1_burst_adapter_source0_valid;                                           // pwm_pio_0_s1_burst_adapter:source0_valid -> pwm_pio_0_s1_agent:cp_valid
	wire  [134:0] pwm_pio_0_s1_burst_adapter_source0_data;                                            // pwm_pio_0_s1_burst_adapter:source0_data -> pwm_pio_0_s1_agent:cp_data
	wire          pwm_pio_0_s1_burst_adapter_source0_ready;                                           // pwm_pio_0_s1_agent:cp_ready -> pwm_pio_0_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_0_s1_burst_adapter_source0_channel;                                         // pwm_pio_0_s1_burst_adapter:source0_channel -> pwm_pio_0_s1_agent:cp_channel
	wire          pwm_pio_0_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_0_s1_burst_adapter:source0_startofpacket -> pwm_pio_0_s1_agent:cp_startofpacket
	wire          pwm_pio_0_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_0_s1_burst_adapter:source0_endofpacket -> pwm_pio_0_s1_agent:cp_endofpacket
	wire          cmd_mux_036_src_valid;                                                              // cmd_mux_036:src_valid -> gpio_pio_1_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_036_src_data;                                                               // cmd_mux_036:src_data -> gpio_pio_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_036_src_ready;                                                              // gpio_pio_1_s1_burst_adapter:sink0_ready -> cmd_mux_036:src_ready
	wire   [50:0] cmd_mux_036_src_channel;                                                            // cmd_mux_036:src_channel -> gpio_pio_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_036_src_startofpacket;                                                      // cmd_mux_036:src_startofpacket -> gpio_pio_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                        // cmd_mux_036:src_endofpacket -> gpio_pio_1_s1_burst_adapter:sink0_endofpacket
	wire          gpio_pio_1_s1_burst_adapter_source0_valid;                                          // gpio_pio_1_s1_burst_adapter:source0_valid -> gpio_pio_1_s1_agent:cp_valid
	wire  [134:0] gpio_pio_1_s1_burst_adapter_source0_data;                                           // gpio_pio_1_s1_burst_adapter:source0_data -> gpio_pio_1_s1_agent:cp_data
	wire          gpio_pio_1_s1_burst_adapter_source0_ready;                                          // gpio_pio_1_s1_agent:cp_ready -> gpio_pio_1_s1_burst_adapter:source0_ready
	wire   [50:0] gpio_pio_1_s1_burst_adapter_source0_channel;                                        // gpio_pio_1_s1_burst_adapter:source0_channel -> gpio_pio_1_s1_agent:cp_channel
	wire          gpio_pio_1_s1_burst_adapter_source0_startofpacket;                                  // gpio_pio_1_s1_burst_adapter:source0_startofpacket -> gpio_pio_1_s1_agent:cp_startofpacket
	wire          gpio_pio_1_s1_burst_adapter_source0_endofpacket;                                    // gpio_pio_1_s1_burst_adapter:source0_endofpacket -> gpio_pio_1_s1_agent:cp_endofpacket
	wire          cmd_mux_037_src_valid;                                                              // cmd_mux_037:src_valid -> pwm_pio_1_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_037_src_data;                                                               // cmd_mux_037:src_data -> pwm_pio_1_s1_burst_adapter:sink0_data
	wire          cmd_mux_037_src_ready;                                                              // pwm_pio_1_s1_burst_adapter:sink0_ready -> cmd_mux_037:src_ready
	wire   [50:0] cmd_mux_037_src_channel;                                                            // cmd_mux_037:src_channel -> pwm_pio_1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_037_src_startofpacket;                                                      // cmd_mux_037:src_startofpacket -> pwm_pio_1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_037_src_endofpacket;                                                        // cmd_mux_037:src_endofpacket -> pwm_pio_1_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_1_s1_burst_adapter_source0_valid;                                           // pwm_pio_1_s1_burst_adapter:source0_valid -> pwm_pio_1_s1_agent:cp_valid
	wire  [134:0] pwm_pio_1_s1_burst_adapter_source0_data;                                            // pwm_pio_1_s1_burst_adapter:source0_data -> pwm_pio_1_s1_agent:cp_data
	wire          pwm_pio_1_s1_burst_adapter_source0_ready;                                           // pwm_pio_1_s1_agent:cp_ready -> pwm_pio_1_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_1_s1_burst_adapter_source0_channel;                                         // pwm_pio_1_s1_burst_adapter:source0_channel -> pwm_pio_1_s1_agent:cp_channel
	wire          pwm_pio_1_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_1_s1_burst_adapter:source0_startofpacket -> pwm_pio_1_s1_agent:cp_startofpacket
	wire          pwm_pio_1_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_1_s1_burst_adapter:source0_endofpacket -> pwm_pio_1_s1_agent:cp_endofpacket
	wire          cmd_mux_038_src_valid;                                                              // cmd_mux_038:src_valid -> pwm_pio_2_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_038_src_data;                                                               // cmd_mux_038:src_data -> pwm_pio_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_038_src_ready;                                                              // pwm_pio_2_s1_burst_adapter:sink0_ready -> cmd_mux_038:src_ready
	wire   [50:0] cmd_mux_038_src_channel;                                                            // cmd_mux_038:src_channel -> pwm_pio_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_038_src_startofpacket;                                                      // cmd_mux_038:src_startofpacket -> pwm_pio_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_038_src_endofpacket;                                                        // cmd_mux_038:src_endofpacket -> pwm_pio_2_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_2_s1_burst_adapter_source0_valid;                                           // pwm_pio_2_s1_burst_adapter:source0_valid -> pwm_pio_2_s1_agent:cp_valid
	wire  [134:0] pwm_pio_2_s1_burst_adapter_source0_data;                                            // pwm_pio_2_s1_burst_adapter:source0_data -> pwm_pio_2_s1_agent:cp_data
	wire          pwm_pio_2_s1_burst_adapter_source0_ready;                                           // pwm_pio_2_s1_agent:cp_ready -> pwm_pio_2_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_2_s1_burst_adapter_source0_channel;                                         // pwm_pio_2_s1_burst_adapter:source0_channel -> pwm_pio_2_s1_agent:cp_channel
	wire          pwm_pio_2_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_2_s1_burst_adapter:source0_startofpacket -> pwm_pio_2_s1_agent:cp_startofpacket
	wire          pwm_pio_2_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_2_s1_burst_adapter:source0_endofpacket -> pwm_pio_2_s1_agent:cp_endofpacket
	wire          cmd_mux_039_src_valid;                                                              // cmd_mux_039:src_valid -> pwm_pio_3_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_039_src_data;                                                               // cmd_mux_039:src_data -> pwm_pio_3_s1_burst_adapter:sink0_data
	wire          cmd_mux_039_src_ready;                                                              // pwm_pio_3_s1_burst_adapter:sink0_ready -> cmd_mux_039:src_ready
	wire   [50:0] cmd_mux_039_src_channel;                                                            // cmd_mux_039:src_channel -> pwm_pio_3_s1_burst_adapter:sink0_channel
	wire          cmd_mux_039_src_startofpacket;                                                      // cmd_mux_039:src_startofpacket -> pwm_pio_3_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_039_src_endofpacket;                                                        // cmd_mux_039:src_endofpacket -> pwm_pio_3_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_3_s1_burst_adapter_source0_valid;                                           // pwm_pio_3_s1_burst_adapter:source0_valid -> pwm_pio_3_s1_agent:cp_valid
	wire  [134:0] pwm_pio_3_s1_burst_adapter_source0_data;                                            // pwm_pio_3_s1_burst_adapter:source0_data -> pwm_pio_3_s1_agent:cp_data
	wire          pwm_pio_3_s1_burst_adapter_source0_ready;                                           // pwm_pio_3_s1_agent:cp_ready -> pwm_pio_3_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_3_s1_burst_adapter_source0_channel;                                         // pwm_pio_3_s1_burst_adapter:source0_channel -> pwm_pio_3_s1_agent:cp_channel
	wire          pwm_pio_3_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_3_s1_burst_adapter:source0_startofpacket -> pwm_pio_3_s1_agent:cp_startofpacket
	wire          pwm_pio_3_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_3_s1_burst_adapter:source0_endofpacket -> pwm_pio_3_s1_agent:cp_endofpacket
	wire          cmd_mux_040_src_valid;                                                              // cmd_mux_040:src_valid -> pwm_pio_4_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_040_src_data;                                                               // cmd_mux_040:src_data -> pwm_pio_4_s1_burst_adapter:sink0_data
	wire          cmd_mux_040_src_ready;                                                              // pwm_pio_4_s1_burst_adapter:sink0_ready -> cmd_mux_040:src_ready
	wire   [50:0] cmd_mux_040_src_channel;                                                            // cmd_mux_040:src_channel -> pwm_pio_4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_040_src_startofpacket;                                                      // cmd_mux_040:src_startofpacket -> pwm_pio_4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_040_src_endofpacket;                                                        // cmd_mux_040:src_endofpacket -> pwm_pio_4_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_4_s1_burst_adapter_source0_valid;                                           // pwm_pio_4_s1_burst_adapter:source0_valid -> pwm_pio_4_s1_agent:cp_valid
	wire  [134:0] pwm_pio_4_s1_burst_adapter_source0_data;                                            // pwm_pio_4_s1_burst_adapter:source0_data -> pwm_pio_4_s1_agent:cp_data
	wire          pwm_pio_4_s1_burst_adapter_source0_ready;                                           // pwm_pio_4_s1_agent:cp_ready -> pwm_pio_4_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_4_s1_burst_adapter_source0_channel;                                         // pwm_pio_4_s1_burst_adapter:source0_channel -> pwm_pio_4_s1_agent:cp_channel
	wire          pwm_pio_4_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_4_s1_burst_adapter:source0_startofpacket -> pwm_pio_4_s1_agent:cp_startofpacket
	wire          pwm_pio_4_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_4_s1_burst_adapter:source0_endofpacket -> pwm_pio_4_s1_agent:cp_endofpacket
	wire          cmd_mux_041_src_valid;                                                              // cmd_mux_041:src_valid -> pwm_pio_5_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_041_src_data;                                                               // cmd_mux_041:src_data -> pwm_pio_5_s1_burst_adapter:sink0_data
	wire          cmd_mux_041_src_ready;                                                              // pwm_pio_5_s1_burst_adapter:sink0_ready -> cmd_mux_041:src_ready
	wire   [50:0] cmd_mux_041_src_channel;                                                            // cmd_mux_041:src_channel -> pwm_pio_5_s1_burst_adapter:sink0_channel
	wire          cmd_mux_041_src_startofpacket;                                                      // cmd_mux_041:src_startofpacket -> pwm_pio_5_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_041_src_endofpacket;                                                        // cmd_mux_041:src_endofpacket -> pwm_pio_5_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_5_s1_burst_adapter_source0_valid;                                           // pwm_pio_5_s1_burst_adapter:source0_valid -> pwm_pio_5_s1_agent:cp_valid
	wire  [134:0] pwm_pio_5_s1_burst_adapter_source0_data;                                            // pwm_pio_5_s1_burst_adapter:source0_data -> pwm_pio_5_s1_agent:cp_data
	wire          pwm_pio_5_s1_burst_adapter_source0_ready;                                           // pwm_pio_5_s1_agent:cp_ready -> pwm_pio_5_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_5_s1_burst_adapter_source0_channel;                                         // pwm_pio_5_s1_burst_adapter:source0_channel -> pwm_pio_5_s1_agent:cp_channel
	wire          pwm_pio_5_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_5_s1_burst_adapter:source0_startofpacket -> pwm_pio_5_s1_agent:cp_startofpacket
	wire          pwm_pio_5_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_5_s1_burst_adapter:source0_endofpacket -> pwm_pio_5_s1_agent:cp_endofpacket
	wire          cmd_mux_042_src_valid;                                                              // cmd_mux_042:src_valid -> pwm_pio_6_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_042_src_data;                                                               // cmd_mux_042:src_data -> pwm_pio_6_s1_burst_adapter:sink0_data
	wire          cmd_mux_042_src_ready;                                                              // pwm_pio_6_s1_burst_adapter:sink0_ready -> cmd_mux_042:src_ready
	wire   [50:0] cmd_mux_042_src_channel;                                                            // cmd_mux_042:src_channel -> pwm_pio_6_s1_burst_adapter:sink0_channel
	wire          cmd_mux_042_src_startofpacket;                                                      // cmd_mux_042:src_startofpacket -> pwm_pio_6_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_042_src_endofpacket;                                                        // cmd_mux_042:src_endofpacket -> pwm_pio_6_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_6_s1_burst_adapter_source0_valid;                                           // pwm_pio_6_s1_burst_adapter:source0_valid -> pwm_pio_6_s1_agent:cp_valid
	wire  [134:0] pwm_pio_6_s1_burst_adapter_source0_data;                                            // pwm_pio_6_s1_burst_adapter:source0_data -> pwm_pio_6_s1_agent:cp_data
	wire          pwm_pio_6_s1_burst_adapter_source0_ready;                                           // pwm_pio_6_s1_agent:cp_ready -> pwm_pio_6_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_6_s1_burst_adapter_source0_channel;                                         // pwm_pio_6_s1_burst_adapter:source0_channel -> pwm_pio_6_s1_agent:cp_channel
	wire          pwm_pio_6_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_6_s1_burst_adapter:source0_startofpacket -> pwm_pio_6_s1_agent:cp_startofpacket
	wire          pwm_pio_6_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_6_s1_burst_adapter:source0_endofpacket -> pwm_pio_6_s1_agent:cp_endofpacket
	wire          cmd_mux_043_src_valid;                                                              // cmd_mux_043:src_valid -> pwm_pio_7_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_043_src_data;                                                               // cmd_mux_043:src_data -> pwm_pio_7_s1_burst_adapter:sink0_data
	wire          cmd_mux_043_src_ready;                                                              // pwm_pio_7_s1_burst_adapter:sink0_ready -> cmd_mux_043:src_ready
	wire   [50:0] cmd_mux_043_src_channel;                                                            // cmd_mux_043:src_channel -> pwm_pio_7_s1_burst_adapter:sink0_channel
	wire          cmd_mux_043_src_startofpacket;                                                      // cmd_mux_043:src_startofpacket -> pwm_pio_7_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_043_src_endofpacket;                                                        // cmd_mux_043:src_endofpacket -> pwm_pio_7_s1_burst_adapter:sink0_endofpacket
	wire          pwm_pio_7_s1_burst_adapter_source0_valid;                                           // pwm_pio_7_s1_burst_adapter:source0_valid -> pwm_pio_7_s1_agent:cp_valid
	wire  [134:0] pwm_pio_7_s1_burst_adapter_source0_data;                                            // pwm_pio_7_s1_burst_adapter:source0_data -> pwm_pio_7_s1_agent:cp_data
	wire          pwm_pio_7_s1_burst_adapter_source0_ready;                                           // pwm_pio_7_s1_agent:cp_ready -> pwm_pio_7_s1_burst_adapter:source0_ready
	wire   [50:0] pwm_pio_7_s1_burst_adapter_source0_channel;                                         // pwm_pio_7_s1_burst_adapter:source0_channel -> pwm_pio_7_s1_agent:cp_channel
	wire          pwm_pio_7_s1_burst_adapter_source0_startofpacket;                                   // pwm_pio_7_s1_burst_adapter:source0_startofpacket -> pwm_pio_7_s1_agent:cp_startofpacket
	wire          pwm_pio_7_s1_burst_adapter_source0_endofpacket;                                     // pwm_pio_7_s1_burst_adapter:source0_endofpacket -> pwm_pio_7_s1_agent:cp_endofpacket
	wire          cmd_mux_044_src_valid;                                                              // cmd_mux_044:src_valid -> limit_pio_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_044_src_data;                                                               // cmd_mux_044:src_data -> limit_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_044_src_ready;                                                              // limit_pio_s1_burst_adapter:sink0_ready -> cmd_mux_044:src_ready
	wire   [50:0] cmd_mux_044_src_channel;                                                            // cmd_mux_044:src_channel -> limit_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_044_src_startofpacket;                                                      // cmd_mux_044:src_startofpacket -> limit_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_044_src_endofpacket;                                                        // cmd_mux_044:src_endofpacket -> limit_pio_s1_burst_adapter:sink0_endofpacket
	wire          limit_pio_s1_burst_adapter_source0_valid;                                           // limit_pio_s1_burst_adapter:source0_valid -> limit_pio_s1_agent:cp_valid
	wire  [134:0] limit_pio_s1_burst_adapter_source0_data;                                            // limit_pio_s1_burst_adapter:source0_data -> limit_pio_s1_agent:cp_data
	wire          limit_pio_s1_burst_adapter_source0_ready;                                           // limit_pio_s1_agent:cp_ready -> limit_pio_s1_burst_adapter:source0_ready
	wire   [50:0] limit_pio_s1_burst_adapter_source0_channel;                                         // limit_pio_s1_burst_adapter:source0_channel -> limit_pio_s1_agent:cp_channel
	wire          limit_pio_s1_burst_adapter_source0_startofpacket;                                   // limit_pio_s1_burst_adapter:source0_startofpacket -> limit_pio_s1_agent:cp_startofpacket
	wire          limit_pio_s1_burst_adapter_source0_endofpacket;                                     // limit_pio_s1_burst_adapter:source0_endofpacket -> limit_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_045_src_valid;                                                              // cmd_mux_045:src_valid -> quad_pio_8_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_045_src_data;                                                               // cmd_mux_045:src_data -> quad_pio_8_s1_burst_adapter:sink0_data
	wire          cmd_mux_045_src_ready;                                                              // quad_pio_8_s1_burst_adapter:sink0_ready -> cmd_mux_045:src_ready
	wire   [50:0] cmd_mux_045_src_channel;                                                            // cmd_mux_045:src_channel -> quad_pio_8_s1_burst_adapter:sink0_channel
	wire          cmd_mux_045_src_startofpacket;                                                      // cmd_mux_045:src_startofpacket -> quad_pio_8_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_045_src_endofpacket;                                                        // cmd_mux_045:src_endofpacket -> quad_pio_8_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_8_s1_burst_adapter_source0_valid;                                          // quad_pio_8_s1_burst_adapter:source0_valid -> quad_pio_8_s1_agent:cp_valid
	wire  [134:0] quad_pio_8_s1_burst_adapter_source0_data;                                           // quad_pio_8_s1_burst_adapter:source0_data -> quad_pio_8_s1_agent:cp_data
	wire          quad_pio_8_s1_burst_adapter_source0_ready;                                          // quad_pio_8_s1_agent:cp_ready -> quad_pio_8_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_8_s1_burst_adapter_source0_channel;                                        // quad_pio_8_s1_burst_adapter:source0_channel -> quad_pio_8_s1_agent:cp_channel
	wire          quad_pio_8_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_8_s1_burst_adapter:source0_startofpacket -> quad_pio_8_s1_agent:cp_startofpacket
	wire          quad_pio_8_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_8_s1_burst_adapter:source0_endofpacket -> quad_pio_8_s1_agent:cp_endofpacket
	wire          cmd_mux_046_src_valid;                                                              // cmd_mux_046:src_valid -> quad_pio_9_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_046_src_data;                                                               // cmd_mux_046:src_data -> quad_pio_9_s1_burst_adapter:sink0_data
	wire          cmd_mux_046_src_ready;                                                              // quad_pio_9_s1_burst_adapter:sink0_ready -> cmd_mux_046:src_ready
	wire   [50:0] cmd_mux_046_src_channel;                                                            // cmd_mux_046:src_channel -> quad_pio_9_s1_burst_adapter:sink0_channel
	wire          cmd_mux_046_src_startofpacket;                                                      // cmd_mux_046:src_startofpacket -> quad_pio_9_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_046_src_endofpacket;                                                        // cmd_mux_046:src_endofpacket -> quad_pio_9_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_9_s1_burst_adapter_source0_valid;                                          // quad_pio_9_s1_burst_adapter:source0_valid -> quad_pio_9_s1_agent:cp_valid
	wire  [134:0] quad_pio_9_s1_burst_adapter_source0_data;                                           // quad_pio_9_s1_burst_adapter:source0_data -> quad_pio_9_s1_agent:cp_data
	wire          quad_pio_9_s1_burst_adapter_source0_ready;                                          // quad_pio_9_s1_agent:cp_ready -> quad_pio_9_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_9_s1_burst_adapter_source0_channel;                                        // quad_pio_9_s1_burst_adapter:source0_channel -> quad_pio_9_s1_agent:cp_channel
	wire          quad_pio_9_s1_burst_adapter_source0_startofpacket;                                  // quad_pio_9_s1_burst_adapter:source0_startofpacket -> quad_pio_9_s1_agent:cp_startofpacket
	wire          quad_pio_9_s1_burst_adapter_source0_endofpacket;                                    // quad_pio_9_s1_burst_adapter:source0_endofpacket -> quad_pio_9_s1_agent:cp_endofpacket
	wire          cmd_mux_047_src_valid;                                                              // cmd_mux_047:src_valid -> quad_pio_10_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_047_src_data;                                                               // cmd_mux_047:src_data -> quad_pio_10_s1_burst_adapter:sink0_data
	wire          cmd_mux_047_src_ready;                                                              // quad_pio_10_s1_burst_adapter:sink0_ready -> cmd_mux_047:src_ready
	wire   [50:0] cmd_mux_047_src_channel;                                                            // cmd_mux_047:src_channel -> quad_pio_10_s1_burst_adapter:sink0_channel
	wire          cmd_mux_047_src_startofpacket;                                                      // cmd_mux_047:src_startofpacket -> quad_pio_10_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_047_src_endofpacket;                                                        // cmd_mux_047:src_endofpacket -> quad_pio_10_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_10_s1_burst_adapter_source0_valid;                                         // quad_pio_10_s1_burst_adapter:source0_valid -> quad_pio_10_s1_agent:cp_valid
	wire  [134:0] quad_pio_10_s1_burst_adapter_source0_data;                                          // quad_pio_10_s1_burst_adapter:source0_data -> quad_pio_10_s1_agent:cp_data
	wire          quad_pio_10_s1_burst_adapter_source0_ready;                                         // quad_pio_10_s1_agent:cp_ready -> quad_pio_10_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_10_s1_burst_adapter_source0_channel;                                       // quad_pio_10_s1_burst_adapter:source0_channel -> quad_pio_10_s1_agent:cp_channel
	wire          quad_pio_10_s1_burst_adapter_source0_startofpacket;                                 // quad_pio_10_s1_burst_adapter:source0_startofpacket -> quad_pio_10_s1_agent:cp_startofpacket
	wire          quad_pio_10_s1_burst_adapter_source0_endofpacket;                                   // quad_pio_10_s1_burst_adapter:source0_endofpacket -> quad_pio_10_s1_agent:cp_endofpacket
	wire          cmd_mux_048_src_valid;                                                              // cmd_mux_048:src_valid -> quad_pio_11_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_048_src_data;                                                               // cmd_mux_048:src_data -> quad_pio_11_s1_burst_adapter:sink0_data
	wire          cmd_mux_048_src_ready;                                                              // quad_pio_11_s1_burst_adapter:sink0_ready -> cmd_mux_048:src_ready
	wire   [50:0] cmd_mux_048_src_channel;                                                            // cmd_mux_048:src_channel -> quad_pio_11_s1_burst_adapter:sink0_channel
	wire          cmd_mux_048_src_startofpacket;                                                      // cmd_mux_048:src_startofpacket -> quad_pio_11_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_048_src_endofpacket;                                                        // cmd_mux_048:src_endofpacket -> quad_pio_11_s1_burst_adapter:sink0_endofpacket
	wire          quad_pio_11_s1_burst_adapter_source0_valid;                                         // quad_pio_11_s1_burst_adapter:source0_valid -> quad_pio_11_s1_agent:cp_valid
	wire  [134:0] quad_pio_11_s1_burst_adapter_source0_data;                                          // quad_pio_11_s1_burst_adapter:source0_data -> quad_pio_11_s1_agent:cp_data
	wire          quad_pio_11_s1_burst_adapter_source0_ready;                                         // quad_pio_11_s1_agent:cp_ready -> quad_pio_11_s1_burst_adapter:source0_ready
	wire   [50:0] quad_pio_11_s1_burst_adapter_source0_channel;                                       // quad_pio_11_s1_burst_adapter:source0_channel -> quad_pio_11_s1_agent:cp_channel
	wire          quad_pio_11_s1_burst_adapter_source0_startofpacket;                                 // quad_pio_11_s1_burst_adapter:source0_startofpacket -> quad_pio_11_s1_agent:cp_startofpacket
	wire          quad_pio_11_s1_burst_adapter_source0_endofpacket;                                   // quad_pio_11_s1_burst_adapter:source0_endofpacket -> quad_pio_11_s1_agent:cp_endofpacket
	wire          cmd_mux_049_src_valid;                                                              // cmd_mux_049:src_valid -> heartbeat_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_049_src_data;                                                               // cmd_mux_049:src_data -> heartbeat_s1_burst_adapter:sink0_data
	wire          cmd_mux_049_src_ready;                                                              // heartbeat_s1_burst_adapter:sink0_ready -> cmd_mux_049:src_ready
	wire   [50:0] cmd_mux_049_src_channel;                                                            // cmd_mux_049:src_channel -> heartbeat_s1_burst_adapter:sink0_channel
	wire          cmd_mux_049_src_startofpacket;                                                      // cmd_mux_049:src_startofpacket -> heartbeat_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_049_src_endofpacket;                                                        // cmd_mux_049:src_endofpacket -> heartbeat_s1_burst_adapter:sink0_endofpacket
	wire          heartbeat_s1_burst_adapter_source0_valid;                                           // heartbeat_s1_burst_adapter:source0_valid -> heartbeat_s1_agent:cp_valid
	wire  [134:0] heartbeat_s1_burst_adapter_source0_data;                                            // heartbeat_s1_burst_adapter:source0_data -> heartbeat_s1_agent:cp_data
	wire          heartbeat_s1_burst_adapter_source0_ready;                                           // heartbeat_s1_agent:cp_ready -> heartbeat_s1_burst_adapter:source0_ready
	wire   [50:0] heartbeat_s1_burst_adapter_source0_channel;                                         // heartbeat_s1_burst_adapter:source0_channel -> heartbeat_s1_agent:cp_channel
	wire          heartbeat_s1_burst_adapter_source0_startofpacket;                                   // heartbeat_s1_burst_adapter:source0_startofpacket -> heartbeat_s1_agent:cp_startofpacket
	wire          heartbeat_s1_burst_adapter_source0_endofpacket;                                     // heartbeat_s1_burst_adapter:source0_endofpacket -> heartbeat_s1_agent:cp_endofpacket
	wire          cmd_mux_050_src_valid;                                                              // cmd_mux_050:src_valid -> e_stop_s1_burst_adapter:sink0_valid
	wire  [134:0] cmd_mux_050_src_data;                                                               // cmd_mux_050:src_data -> e_stop_s1_burst_adapter:sink0_data
	wire          cmd_mux_050_src_ready;                                                              // e_stop_s1_burst_adapter:sink0_ready -> cmd_mux_050:src_ready
	wire   [50:0] cmd_mux_050_src_channel;                                                            // cmd_mux_050:src_channel -> e_stop_s1_burst_adapter:sink0_channel
	wire          cmd_mux_050_src_startofpacket;                                                      // cmd_mux_050:src_startofpacket -> e_stop_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_050_src_endofpacket;                                                        // cmd_mux_050:src_endofpacket -> e_stop_s1_burst_adapter:sink0_endofpacket
	wire          e_stop_s1_burst_adapter_source0_valid;                                              // e_stop_s1_burst_adapter:source0_valid -> e_stop_s1_agent:cp_valid
	wire  [134:0] e_stop_s1_burst_adapter_source0_data;                                               // e_stop_s1_burst_adapter:source0_data -> e_stop_s1_agent:cp_data
	wire          e_stop_s1_burst_adapter_source0_ready;                                              // e_stop_s1_agent:cp_ready -> e_stop_s1_burst_adapter:source0_ready
	wire   [50:0] e_stop_s1_burst_adapter_source0_channel;                                            // e_stop_s1_burst_adapter:source0_channel -> e_stop_s1_agent:cp_channel
	wire          e_stop_s1_burst_adapter_source0_startofpacket;                                      // e_stop_s1_burst_adapter:source0_startofpacket -> e_stop_s1_agent:cp_startofpacket
	wire          e_stop_s1_burst_adapter_source0_endofpacket;                                        // e_stop_s1_burst_adapter:source0_endofpacket -> e_stop_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [170:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [50:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [170:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [50:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                           // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [134:0] cmd_demux_002_src1_data;                                                            // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire   [50:0] cmd_demux_002_src1_channel;                                                         // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                   // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                     // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                           // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [134:0] cmd_demux_002_src2_data;                                                            // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                           // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire   [50:0] cmd_demux_002_src2_channel;                                                         // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                   // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                     // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                           // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [134:0] cmd_demux_002_src3_data;                                                            // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                           // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire   [50:0] cmd_demux_002_src3_channel;                                                         // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                   // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                     // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                           // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [134:0] cmd_demux_002_src4_data;                                                            // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                           // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire   [50:0] cmd_demux_002_src4_channel;                                                         // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                   // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                     // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                           // cmd_demux_002:src5_valid -> cmd_mux_005:sink0_valid
	wire  [134:0] cmd_demux_002_src5_data;                                                            // cmd_demux_002:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_002_src5_ready;                                                           // cmd_mux_005:sink0_ready -> cmd_demux_002:src5_ready
	wire   [50:0] cmd_demux_002_src5_channel;                                                         // cmd_demux_002:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src5_startofpacket;                                                   // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                     // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                           // cmd_demux_002:src6_valid -> cmd_mux_006:sink0_valid
	wire  [134:0] cmd_demux_002_src6_data;                                                            // cmd_demux_002:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src6_ready;                                                           // cmd_mux_006:sink0_ready -> cmd_demux_002:src6_ready
	wire   [50:0] cmd_demux_002_src6_channel;                                                         // cmd_demux_002:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src6_startofpacket;                                                   // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                     // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                           // cmd_demux_002:src7_valid -> cmd_mux_007:sink0_valid
	wire  [134:0] cmd_demux_002_src7_data;                                                            // cmd_demux_002:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_002_src7_ready;                                                           // cmd_mux_007:sink0_ready -> cmd_demux_002:src7_ready
	wire   [50:0] cmd_demux_002_src7_channel;                                                         // cmd_demux_002:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                   // cmd_demux_002:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                     // cmd_demux_002:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                           // cmd_demux_002:src8_valid -> cmd_mux_008:sink0_valid
	wire  [134:0] cmd_demux_002_src8_data;                                                            // cmd_demux_002:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_002_src8_ready;                                                           // cmd_mux_008:sink0_ready -> cmd_demux_002:src8_ready
	wire   [50:0] cmd_demux_002_src8_channel;                                                         // cmd_demux_002:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_002_src8_startofpacket;                                                   // cmd_demux_002:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                     // cmd_demux_002:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_002_src9_valid;                                                           // cmd_demux_002:src9_valid -> cmd_mux_009:sink0_valid
	wire  [134:0] cmd_demux_002_src9_data;                                                            // cmd_demux_002:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_002_src9_ready;                                                           // cmd_mux_009:sink0_ready -> cmd_demux_002:src9_ready
	wire   [50:0] cmd_demux_002_src9_channel;                                                         // cmd_demux_002:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_002_src9_startofpacket;                                                   // cmd_demux_002:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                     // cmd_demux_002:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_002_src10_valid;                                                          // cmd_demux_002:src10_valid -> cmd_mux_010:sink0_valid
	wire  [134:0] cmd_demux_002_src10_data;                                                           // cmd_demux_002:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_002_src10_ready;                                                          // cmd_mux_010:sink0_ready -> cmd_demux_002:src10_ready
	wire   [50:0] cmd_demux_002_src10_channel;                                                        // cmd_demux_002:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_002_src10_startofpacket;                                                  // cmd_demux_002:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                    // cmd_demux_002:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_002_src11_valid;                                                          // cmd_demux_002:src11_valid -> cmd_mux_011:sink0_valid
	wire  [134:0] cmd_demux_002_src11_data;                                                           // cmd_demux_002:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_002_src11_ready;                                                          // cmd_mux_011:sink0_ready -> cmd_demux_002:src11_ready
	wire   [50:0] cmd_demux_002_src11_channel;                                                        // cmd_demux_002:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_002_src11_startofpacket;                                                  // cmd_demux_002:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                    // cmd_demux_002:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_002_src12_valid;                                                          // cmd_demux_002:src12_valid -> cmd_mux_012:sink0_valid
	wire  [134:0] cmd_demux_002_src12_data;                                                           // cmd_demux_002:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_002_src12_ready;                                                          // cmd_mux_012:sink0_ready -> cmd_demux_002:src12_ready
	wire   [50:0] cmd_demux_002_src12_channel;                                                        // cmd_demux_002:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_002_src12_startofpacket;                                                  // cmd_demux_002:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                    // cmd_demux_002:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_002_src13_valid;                                                          // cmd_demux_002:src13_valid -> cmd_mux_013:sink0_valid
	wire  [134:0] cmd_demux_002_src13_data;                                                           // cmd_demux_002:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src13_ready;                                                          // cmd_mux_013:sink0_ready -> cmd_demux_002:src13_ready
	wire   [50:0] cmd_demux_002_src13_channel;                                                        // cmd_demux_002:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src13_startofpacket;                                                  // cmd_demux_002:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                    // cmd_demux_002:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_002_src14_valid;                                                          // cmd_demux_002:src14_valid -> cmd_mux_014:sink0_valid
	wire  [134:0] cmd_demux_002_src14_data;                                                           // cmd_demux_002:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_002_src14_ready;                                                          // cmd_mux_014:sink0_ready -> cmd_demux_002:src14_ready
	wire   [50:0] cmd_demux_002_src14_channel;                                                        // cmd_demux_002:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_002_src14_startofpacket;                                                  // cmd_demux_002:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_002_src14_endofpacket;                                                    // cmd_demux_002:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src15_valid;                                                          // cmd_demux_002:src15_valid -> cmd_mux_015:sink0_valid
	wire  [134:0] cmd_demux_002_src15_data;                                                           // cmd_demux_002:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_002_src15_ready;                                                          // cmd_mux_015:sink0_ready -> cmd_demux_002:src15_ready
	wire   [50:0] cmd_demux_002_src15_channel;                                                        // cmd_demux_002:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_002_src15_startofpacket;                                                  // cmd_demux_002:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_002_src15_endofpacket;                                                    // cmd_demux_002:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_002_src16_valid;                                                          // cmd_demux_002:src16_valid -> cmd_mux_016:sink0_valid
	wire  [134:0] cmd_demux_002_src16_data;                                                           // cmd_demux_002:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_002_src16_ready;                                                          // cmd_mux_016:sink0_ready -> cmd_demux_002:src16_ready
	wire   [50:0] cmd_demux_002_src16_channel;                                                        // cmd_demux_002:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_002_src16_startofpacket;                                                  // cmd_demux_002:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_002_src16_endofpacket;                                                    // cmd_demux_002:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_002_src17_valid;                                                          // cmd_demux_002:src17_valid -> cmd_mux_017:sink0_valid
	wire  [134:0] cmd_demux_002_src17_data;                                                           // cmd_demux_002:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_002_src17_ready;                                                          // cmd_mux_017:sink0_ready -> cmd_demux_002:src17_ready
	wire   [50:0] cmd_demux_002_src17_channel;                                                        // cmd_demux_002:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_002_src17_startofpacket;                                                  // cmd_demux_002:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_002_src17_endofpacket;                                                    // cmd_demux_002:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_002_src18_valid;                                                          // cmd_demux_002:src18_valid -> cmd_mux_018:sink0_valid
	wire  [134:0] cmd_demux_002_src18_data;                                                           // cmd_demux_002:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_002_src18_ready;                                                          // cmd_mux_018:sink0_ready -> cmd_demux_002:src18_ready
	wire   [50:0] cmd_demux_002_src18_channel;                                                        // cmd_demux_002:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_002_src18_startofpacket;                                                  // cmd_demux_002:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_002_src18_endofpacket;                                                    // cmd_demux_002:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_002_src19_valid;                                                          // cmd_demux_002:src19_valid -> cmd_mux_019:sink0_valid
	wire  [134:0] cmd_demux_002_src19_data;                                                           // cmd_demux_002:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_002_src19_ready;                                                          // cmd_mux_019:sink0_ready -> cmd_demux_002:src19_ready
	wire   [50:0] cmd_demux_002_src19_channel;                                                        // cmd_demux_002:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_002_src19_startofpacket;                                                  // cmd_demux_002:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_002_src19_endofpacket;                                                    // cmd_demux_002:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_002_src20_valid;                                                          // cmd_demux_002:src20_valid -> cmd_mux_020:sink0_valid
	wire  [134:0] cmd_demux_002_src20_data;                                                           // cmd_demux_002:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_002_src20_ready;                                                          // cmd_mux_020:sink0_ready -> cmd_demux_002:src20_ready
	wire   [50:0] cmd_demux_002_src20_channel;                                                        // cmd_demux_002:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_002_src20_startofpacket;                                                  // cmd_demux_002:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_002_src20_endofpacket;                                                    // cmd_demux_002:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_002_src21_valid;                                                          // cmd_demux_002:src21_valid -> cmd_mux_021:sink0_valid
	wire  [134:0] cmd_demux_002_src21_data;                                                           // cmd_demux_002:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_002_src21_ready;                                                          // cmd_mux_021:sink0_ready -> cmd_demux_002:src21_ready
	wire   [50:0] cmd_demux_002_src21_channel;                                                        // cmd_demux_002:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_002_src21_startofpacket;                                                  // cmd_demux_002:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_002_src21_endofpacket;                                                    // cmd_demux_002:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_002_src22_valid;                                                          // cmd_demux_002:src22_valid -> cmd_mux_022:sink0_valid
	wire  [134:0] cmd_demux_002_src22_data;                                                           // cmd_demux_002:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_002_src22_ready;                                                          // cmd_mux_022:sink0_ready -> cmd_demux_002:src22_ready
	wire   [50:0] cmd_demux_002_src22_channel;                                                        // cmd_demux_002:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_002_src22_startofpacket;                                                  // cmd_demux_002:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_002_src22_endofpacket;                                                    // cmd_demux_002:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_002_src23_valid;                                                          // cmd_demux_002:src23_valid -> cmd_mux_023:sink0_valid
	wire  [134:0] cmd_demux_002_src23_data;                                                           // cmd_demux_002:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_002_src23_ready;                                                          // cmd_mux_023:sink0_ready -> cmd_demux_002:src23_ready
	wire   [50:0] cmd_demux_002_src23_channel;                                                        // cmd_demux_002:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_002_src23_startofpacket;                                                  // cmd_demux_002:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_002_src23_endofpacket;                                                    // cmd_demux_002:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_002_src24_valid;                                                          // cmd_demux_002:src24_valid -> cmd_mux_024:sink0_valid
	wire  [134:0] cmd_demux_002_src24_data;                                                           // cmd_demux_002:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_002_src24_ready;                                                          // cmd_mux_024:sink0_ready -> cmd_demux_002:src24_ready
	wire   [50:0] cmd_demux_002_src24_channel;                                                        // cmd_demux_002:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_002_src24_startofpacket;                                                  // cmd_demux_002:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_002_src24_endofpacket;                                                    // cmd_demux_002:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_002_src25_valid;                                                          // cmd_demux_002:src25_valid -> cmd_mux_025:sink0_valid
	wire  [134:0] cmd_demux_002_src25_data;                                                           // cmd_demux_002:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_002_src25_ready;                                                          // cmd_mux_025:sink0_ready -> cmd_demux_002:src25_ready
	wire   [50:0] cmd_demux_002_src25_channel;                                                        // cmd_demux_002:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_002_src25_startofpacket;                                                  // cmd_demux_002:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_002_src25_endofpacket;                                                    // cmd_demux_002:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_002_src26_valid;                                                          // cmd_demux_002:src26_valid -> cmd_mux_026:sink0_valid
	wire  [134:0] cmd_demux_002_src26_data;                                                           // cmd_demux_002:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_002_src26_ready;                                                          // cmd_mux_026:sink0_ready -> cmd_demux_002:src26_ready
	wire   [50:0] cmd_demux_002_src26_channel;                                                        // cmd_demux_002:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_002_src26_startofpacket;                                                  // cmd_demux_002:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_002_src26_endofpacket;                                                    // cmd_demux_002:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_002_src27_valid;                                                          // cmd_demux_002:src27_valid -> cmd_mux_027:sink0_valid
	wire  [134:0] cmd_demux_002_src27_data;                                                           // cmd_demux_002:src27_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_002_src27_ready;                                                          // cmd_mux_027:sink0_ready -> cmd_demux_002:src27_ready
	wire   [50:0] cmd_demux_002_src27_channel;                                                        // cmd_demux_002:src27_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_002_src27_startofpacket;                                                  // cmd_demux_002:src27_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_002_src27_endofpacket;                                                    // cmd_demux_002:src27_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_002_src28_valid;                                                          // cmd_demux_002:src28_valid -> cmd_mux_028:sink0_valid
	wire  [134:0] cmd_demux_002_src28_data;                                                           // cmd_demux_002:src28_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_002_src28_ready;                                                          // cmd_mux_028:sink0_ready -> cmd_demux_002:src28_ready
	wire   [50:0] cmd_demux_002_src28_channel;                                                        // cmd_demux_002:src28_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_002_src28_startofpacket;                                                  // cmd_demux_002:src28_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_002_src28_endofpacket;                                                    // cmd_demux_002:src28_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_002_src29_valid;                                                          // cmd_demux_002:src29_valid -> cmd_mux_029:sink0_valid
	wire  [134:0] cmd_demux_002_src29_data;                                                           // cmd_demux_002:src29_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_002_src29_ready;                                                          // cmd_mux_029:sink0_ready -> cmd_demux_002:src29_ready
	wire   [50:0] cmd_demux_002_src29_channel;                                                        // cmd_demux_002:src29_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_002_src29_startofpacket;                                                  // cmd_demux_002:src29_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_002_src29_endofpacket;                                                    // cmd_demux_002:src29_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_002_src30_valid;                                                          // cmd_demux_002:src30_valid -> cmd_mux_030:sink0_valid
	wire  [134:0] cmd_demux_002_src30_data;                                                           // cmd_demux_002:src30_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_002_src30_ready;                                                          // cmd_mux_030:sink0_ready -> cmd_demux_002:src30_ready
	wire   [50:0] cmd_demux_002_src30_channel;                                                        // cmd_demux_002:src30_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_002_src30_startofpacket;                                                  // cmd_demux_002:src30_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_002_src30_endofpacket;                                                    // cmd_demux_002:src30_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_002_src31_valid;                                                          // cmd_demux_002:src31_valid -> cmd_mux_031:sink0_valid
	wire  [134:0] cmd_demux_002_src31_data;                                                           // cmd_demux_002:src31_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_002_src31_ready;                                                          // cmd_mux_031:sink0_ready -> cmd_demux_002:src31_ready
	wire   [50:0] cmd_demux_002_src31_channel;                                                        // cmd_demux_002:src31_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_002_src31_startofpacket;                                                  // cmd_demux_002:src31_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_002_src31_endofpacket;                                                    // cmd_demux_002:src31_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_002_src32_valid;                                                          // cmd_demux_002:src32_valid -> cmd_mux_032:sink0_valid
	wire  [134:0] cmd_demux_002_src32_data;                                                           // cmd_demux_002:src32_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_002_src32_ready;                                                          // cmd_mux_032:sink0_ready -> cmd_demux_002:src32_ready
	wire   [50:0] cmd_demux_002_src32_channel;                                                        // cmd_demux_002:src32_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_002_src32_startofpacket;                                                  // cmd_demux_002:src32_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_002_src32_endofpacket;                                                    // cmd_demux_002:src32_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_002_src33_valid;                                                          // cmd_demux_002:src33_valid -> cmd_mux_033:sink0_valid
	wire  [134:0] cmd_demux_002_src33_data;                                                           // cmd_demux_002:src33_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_002_src33_ready;                                                          // cmd_mux_033:sink0_ready -> cmd_demux_002:src33_ready
	wire   [50:0] cmd_demux_002_src33_channel;                                                        // cmd_demux_002:src33_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_002_src33_startofpacket;                                                  // cmd_demux_002:src33_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_002_src33_endofpacket;                                                    // cmd_demux_002:src33_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_002_src34_valid;                                                          // cmd_demux_002:src34_valid -> cmd_mux_034:sink0_valid
	wire  [134:0] cmd_demux_002_src34_data;                                                           // cmd_demux_002:src34_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_002_src34_ready;                                                          // cmd_mux_034:sink0_ready -> cmd_demux_002:src34_ready
	wire   [50:0] cmd_demux_002_src34_channel;                                                        // cmd_demux_002:src34_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_002_src34_startofpacket;                                                  // cmd_demux_002:src34_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_002_src34_endofpacket;                                                    // cmd_demux_002:src34_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_002_src35_valid;                                                          // cmd_demux_002:src35_valid -> cmd_mux_035:sink0_valid
	wire  [134:0] cmd_demux_002_src35_data;                                                           // cmd_demux_002:src35_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_002_src35_ready;                                                          // cmd_mux_035:sink0_ready -> cmd_demux_002:src35_ready
	wire   [50:0] cmd_demux_002_src35_channel;                                                        // cmd_demux_002:src35_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_002_src35_startofpacket;                                                  // cmd_demux_002:src35_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_002_src35_endofpacket;                                                    // cmd_demux_002:src35_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_002_src36_valid;                                                          // cmd_demux_002:src36_valid -> cmd_mux_036:sink0_valid
	wire  [134:0] cmd_demux_002_src36_data;                                                           // cmd_demux_002:src36_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_002_src36_ready;                                                          // cmd_mux_036:sink0_ready -> cmd_demux_002:src36_ready
	wire   [50:0] cmd_demux_002_src36_channel;                                                        // cmd_demux_002:src36_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_002_src36_startofpacket;                                                  // cmd_demux_002:src36_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_002_src36_endofpacket;                                                    // cmd_demux_002:src36_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_002_src37_valid;                                                          // cmd_demux_002:src37_valid -> cmd_mux_037:sink0_valid
	wire  [134:0] cmd_demux_002_src37_data;                                                           // cmd_demux_002:src37_data -> cmd_mux_037:sink0_data
	wire          cmd_demux_002_src37_ready;                                                          // cmd_mux_037:sink0_ready -> cmd_demux_002:src37_ready
	wire   [50:0] cmd_demux_002_src37_channel;                                                        // cmd_demux_002:src37_channel -> cmd_mux_037:sink0_channel
	wire          cmd_demux_002_src37_startofpacket;                                                  // cmd_demux_002:src37_startofpacket -> cmd_mux_037:sink0_startofpacket
	wire          cmd_demux_002_src37_endofpacket;                                                    // cmd_demux_002:src37_endofpacket -> cmd_mux_037:sink0_endofpacket
	wire          cmd_demux_002_src38_valid;                                                          // cmd_demux_002:src38_valid -> cmd_mux_038:sink0_valid
	wire  [134:0] cmd_demux_002_src38_data;                                                           // cmd_demux_002:src38_data -> cmd_mux_038:sink0_data
	wire          cmd_demux_002_src38_ready;                                                          // cmd_mux_038:sink0_ready -> cmd_demux_002:src38_ready
	wire   [50:0] cmd_demux_002_src38_channel;                                                        // cmd_demux_002:src38_channel -> cmd_mux_038:sink0_channel
	wire          cmd_demux_002_src38_startofpacket;                                                  // cmd_demux_002:src38_startofpacket -> cmd_mux_038:sink0_startofpacket
	wire          cmd_demux_002_src38_endofpacket;                                                    // cmd_demux_002:src38_endofpacket -> cmd_mux_038:sink0_endofpacket
	wire          cmd_demux_002_src39_valid;                                                          // cmd_demux_002:src39_valid -> cmd_mux_039:sink0_valid
	wire  [134:0] cmd_demux_002_src39_data;                                                           // cmd_demux_002:src39_data -> cmd_mux_039:sink0_data
	wire          cmd_demux_002_src39_ready;                                                          // cmd_mux_039:sink0_ready -> cmd_demux_002:src39_ready
	wire   [50:0] cmd_demux_002_src39_channel;                                                        // cmd_demux_002:src39_channel -> cmd_mux_039:sink0_channel
	wire          cmd_demux_002_src39_startofpacket;                                                  // cmd_demux_002:src39_startofpacket -> cmd_mux_039:sink0_startofpacket
	wire          cmd_demux_002_src39_endofpacket;                                                    // cmd_demux_002:src39_endofpacket -> cmd_mux_039:sink0_endofpacket
	wire          cmd_demux_002_src40_valid;                                                          // cmd_demux_002:src40_valid -> cmd_mux_040:sink0_valid
	wire  [134:0] cmd_demux_002_src40_data;                                                           // cmd_demux_002:src40_data -> cmd_mux_040:sink0_data
	wire          cmd_demux_002_src40_ready;                                                          // cmd_mux_040:sink0_ready -> cmd_demux_002:src40_ready
	wire   [50:0] cmd_demux_002_src40_channel;                                                        // cmd_demux_002:src40_channel -> cmd_mux_040:sink0_channel
	wire          cmd_demux_002_src40_startofpacket;                                                  // cmd_demux_002:src40_startofpacket -> cmd_mux_040:sink0_startofpacket
	wire          cmd_demux_002_src40_endofpacket;                                                    // cmd_demux_002:src40_endofpacket -> cmd_mux_040:sink0_endofpacket
	wire          cmd_demux_002_src41_valid;                                                          // cmd_demux_002:src41_valid -> cmd_mux_041:sink0_valid
	wire  [134:0] cmd_demux_002_src41_data;                                                           // cmd_demux_002:src41_data -> cmd_mux_041:sink0_data
	wire          cmd_demux_002_src41_ready;                                                          // cmd_mux_041:sink0_ready -> cmd_demux_002:src41_ready
	wire   [50:0] cmd_demux_002_src41_channel;                                                        // cmd_demux_002:src41_channel -> cmd_mux_041:sink0_channel
	wire          cmd_demux_002_src41_startofpacket;                                                  // cmd_demux_002:src41_startofpacket -> cmd_mux_041:sink0_startofpacket
	wire          cmd_demux_002_src41_endofpacket;                                                    // cmd_demux_002:src41_endofpacket -> cmd_mux_041:sink0_endofpacket
	wire          cmd_demux_002_src42_valid;                                                          // cmd_demux_002:src42_valid -> cmd_mux_042:sink0_valid
	wire  [134:0] cmd_demux_002_src42_data;                                                           // cmd_demux_002:src42_data -> cmd_mux_042:sink0_data
	wire          cmd_demux_002_src42_ready;                                                          // cmd_mux_042:sink0_ready -> cmd_demux_002:src42_ready
	wire   [50:0] cmd_demux_002_src42_channel;                                                        // cmd_demux_002:src42_channel -> cmd_mux_042:sink0_channel
	wire          cmd_demux_002_src42_startofpacket;                                                  // cmd_demux_002:src42_startofpacket -> cmd_mux_042:sink0_startofpacket
	wire          cmd_demux_002_src42_endofpacket;                                                    // cmd_demux_002:src42_endofpacket -> cmd_mux_042:sink0_endofpacket
	wire          cmd_demux_002_src43_valid;                                                          // cmd_demux_002:src43_valid -> cmd_mux_043:sink0_valid
	wire  [134:0] cmd_demux_002_src43_data;                                                           // cmd_demux_002:src43_data -> cmd_mux_043:sink0_data
	wire          cmd_demux_002_src43_ready;                                                          // cmd_mux_043:sink0_ready -> cmd_demux_002:src43_ready
	wire   [50:0] cmd_demux_002_src43_channel;                                                        // cmd_demux_002:src43_channel -> cmd_mux_043:sink0_channel
	wire          cmd_demux_002_src43_startofpacket;                                                  // cmd_demux_002:src43_startofpacket -> cmd_mux_043:sink0_startofpacket
	wire          cmd_demux_002_src43_endofpacket;                                                    // cmd_demux_002:src43_endofpacket -> cmd_mux_043:sink0_endofpacket
	wire          cmd_demux_002_src44_valid;                                                          // cmd_demux_002:src44_valid -> cmd_mux_044:sink0_valid
	wire  [134:0] cmd_demux_002_src44_data;                                                           // cmd_demux_002:src44_data -> cmd_mux_044:sink0_data
	wire          cmd_demux_002_src44_ready;                                                          // cmd_mux_044:sink0_ready -> cmd_demux_002:src44_ready
	wire   [50:0] cmd_demux_002_src44_channel;                                                        // cmd_demux_002:src44_channel -> cmd_mux_044:sink0_channel
	wire          cmd_demux_002_src44_startofpacket;                                                  // cmd_demux_002:src44_startofpacket -> cmd_mux_044:sink0_startofpacket
	wire          cmd_demux_002_src44_endofpacket;                                                    // cmd_demux_002:src44_endofpacket -> cmd_mux_044:sink0_endofpacket
	wire          cmd_demux_002_src45_valid;                                                          // cmd_demux_002:src45_valid -> cmd_mux_045:sink0_valid
	wire  [134:0] cmd_demux_002_src45_data;                                                           // cmd_demux_002:src45_data -> cmd_mux_045:sink0_data
	wire          cmd_demux_002_src45_ready;                                                          // cmd_mux_045:sink0_ready -> cmd_demux_002:src45_ready
	wire   [50:0] cmd_demux_002_src45_channel;                                                        // cmd_demux_002:src45_channel -> cmd_mux_045:sink0_channel
	wire          cmd_demux_002_src45_startofpacket;                                                  // cmd_demux_002:src45_startofpacket -> cmd_mux_045:sink0_startofpacket
	wire          cmd_demux_002_src45_endofpacket;                                                    // cmd_demux_002:src45_endofpacket -> cmd_mux_045:sink0_endofpacket
	wire          cmd_demux_002_src46_valid;                                                          // cmd_demux_002:src46_valid -> cmd_mux_046:sink0_valid
	wire  [134:0] cmd_demux_002_src46_data;                                                           // cmd_demux_002:src46_data -> cmd_mux_046:sink0_data
	wire          cmd_demux_002_src46_ready;                                                          // cmd_mux_046:sink0_ready -> cmd_demux_002:src46_ready
	wire   [50:0] cmd_demux_002_src46_channel;                                                        // cmd_demux_002:src46_channel -> cmd_mux_046:sink0_channel
	wire          cmd_demux_002_src46_startofpacket;                                                  // cmd_demux_002:src46_startofpacket -> cmd_mux_046:sink0_startofpacket
	wire          cmd_demux_002_src46_endofpacket;                                                    // cmd_demux_002:src46_endofpacket -> cmd_mux_046:sink0_endofpacket
	wire          cmd_demux_002_src47_valid;                                                          // cmd_demux_002:src47_valid -> cmd_mux_047:sink0_valid
	wire  [134:0] cmd_demux_002_src47_data;                                                           // cmd_demux_002:src47_data -> cmd_mux_047:sink0_data
	wire          cmd_demux_002_src47_ready;                                                          // cmd_mux_047:sink0_ready -> cmd_demux_002:src47_ready
	wire   [50:0] cmd_demux_002_src47_channel;                                                        // cmd_demux_002:src47_channel -> cmd_mux_047:sink0_channel
	wire          cmd_demux_002_src47_startofpacket;                                                  // cmd_demux_002:src47_startofpacket -> cmd_mux_047:sink0_startofpacket
	wire          cmd_demux_002_src47_endofpacket;                                                    // cmd_demux_002:src47_endofpacket -> cmd_mux_047:sink0_endofpacket
	wire          cmd_demux_002_src48_valid;                                                          // cmd_demux_002:src48_valid -> cmd_mux_048:sink0_valid
	wire  [134:0] cmd_demux_002_src48_data;                                                           // cmd_demux_002:src48_data -> cmd_mux_048:sink0_data
	wire          cmd_demux_002_src48_ready;                                                          // cmd_mux_048:sink0_ready -> cmd_demux_002:src48_ready
	wire   [50:0] cmd_demux_002_src48_channel;                                                        // cmd_demux_002:src48_channel -> cmd_mux_048:sink0_channel
	wire          cmd_demux_002_src48_startofpacket;                                                  // cmd_demux_002:src48_startofpacket -> cmd_mux_048:sink0_startofpacket
	wire          cmd_demux_002_src48_endofpacket;                                                    // cmd_demux_002:src48_endofpacket -> cmd_mux_048:sink0_endofpacket
	wire          cmd_demux_002_src49_valid;                                                          // cmd_demux_002:src49_valid -> cmd_mux_049:sink0_valid
	wire  [134:0] cmd_demux_002_src49_data;                                                           // cmd_demux_002:src49_data -> cmd_mux_049:sink0_data
	wire          cmd_demux_002_src49_ready;                                                          // cmd_mux_049:sink0_ready -> cmd_demux_002:src49_ready
	wire   [50:0] cmd_demux_002_src49_channel;                                                        // cmd_demux_002:src49_channel -> cmd_mux_049:sink0_channel
	wire          cmd_demux_002_src49_startofpacket;                                                  // cmd_demux_002:src49_startofpacket -> cmd_mux_049:sink0_startofpacket
	wire          cmd_demux_002_src49_endofpacket;                                                    // cmd_demux_002:src49_endofpacket -> cmd_mux_049:sink0_endofpacket
	wire          cmd_demux_002_src50_valid;                                                          // cmd_demux_002:src50_valid -> cmd_mux_050:sink0_valid
	wire  [134:0] cmd_demux_002_src50_data;                                                           // cmd_demux_002:src50_data -> cmd_mux_050:sink0_data
	wire          cmd_demux_002_src50_ready;                                                          // cmd_mux_050:sink0_ready -> cmd_demux_002:src50_ready
	wire   [50:0] cmd_demux_002_src50_channel;                                                        // cmd_demux_002:src50_channel -> cmd_mux_050:sink0_channel
	wire          cmd_demux_002_src50_startofpacket;                                                  // cmd_demux_002:src50_startofpacket -> cmd_mux_050:sink0_startofpacket
	wire          cmd_demux_002_src50_endofpacket;                                                    // cmd_demux_002:src50_endofpacket -> cmd_mux_050:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_001:sink1_valid
	wire  [134:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_003:src0_ready
	wire   [50:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                           // cmd_demux_003:src1_valid -> cmd_mux_002:sink1_valid
	wire  [134:0] cmd_demux_003_src1_data;                                                            // cmd_demux_003:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_003_src1_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_003:src1_ready
	wire   [50:0] cmd_demux_003_src1_channel;                                                         // cmd_demux_003:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                   // cmd_demux_003:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                     // cmd_demux_003:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                           // cmd_demux_003:src2_valid -> cmd_mux_004:sink1_valid
	wire  [134:0] cmd_demux_003_src2_data;                                                            // cmd_demux_003:src2_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src2_ready;                                                           // cmd_mux_004:sink1_ready -> cmd_demux_003:src2_ready
	wire   [50:0] cmd_demux_003_src2_channel;                                                         // cmd_demux_003:src2_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                   // cmd_demux_003:src2_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                     // cmd_demux_003:src2_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                           // cmd_demux_003:src3_valid -> cmd_mux_005:sink1_valid
	wire  [134:0] cmd_demux_003_src3_data;                                                            // cmd_demux_003:src3_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_003_src3_ready;                                                           // cmd_mux_005:sink1_ready -> cmd_demux_003:src3_ready
	wire   [50:0] cmd_demux_003_src3_channel;                                                         // cmd_demux_003:src3_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                   // cmd_demux_003:src3_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                     // cmd_demux_003:src3_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                           // cmd_demux_003:src4_valid -> cmd_mux_006:sink1_valid
	wire  [134:0] cmd_demux_003_src4_data;                                                            // cmd_demux_003:src4_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_003_src4_ready;                                                           // cmd_mux_006:sink1_ready -> cmd_demux_003:src4_ready
	wire   [50:0] cmd_demux_003_src4_channel;                                                         // cmd_demux_003:src4_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                   // cmd_demux_003:src4_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                     // cmd_demux_003:src4_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_003_src5_valid;                                                           // cmd_demux_003:src5_valid -> cmd_mux_007:sink1_valid
	wire  [134:0] cmd_demux_003_src5_data;                                                            // cmd_demux_003:src5_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_003_src5_ready;                                                           // cmd_mux_007:sink1_ready -> cmd_demux_003:src5_ready
	wire   [50:0] cmd_demux_003_src5_channel;                                                         // cmd_demux_003:src5_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_003_src5_startofpacket;                                                   // cmd_demux_003:src5_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                     // cmd_demux_003:src5_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_003_src6_valid;                                                           // cmd_demux_003:src6_valid -> cmd_mux_008:sink1_valid
	wire  [134:0] cmd_demux_003_src6_data;                                                            // cmd_demux_003:src6_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src6_ready;                                                           // cmd_mux_008:sink1_ready -> cmd_demux_003:src6_ready
	wire   [50:0] cmd_demux_003_src6_channel;                                                         // cmd_demux_003:src6_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src6_startofpacket;                                                   // cmd_demux_003:src6_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                     // cmd_demux_003:src6_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_003_src7_valid;                                                           // cmd_demux_003:src7_valid -> cmd_mux_009:sink1_valid
	wire  [134:0] cmd_demux_003_src7_data;                                                            // cmd_demux_003:src7_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_003_src7_ready;                                                           // cmd_mux_009:sink1_ready -> cmd_demux_003:src7_ready
	wire   [50:0] cmd_demux_003_src7_channel;                                                         // cmd_demux_003:src7_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_003_src7_startofpacket;                                                   // cmd_demux_003:src7_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                     // cmd_demux_003:src7_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_003_src8_valid;                                                           // cmd_demux_003:src8_valid -> cmd_mux_010:sink1_valid
	wire  [134:0] cmd_demux_003_src8_data;                                                            // cmd_demux_003:src8_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_003_src8_ready;                                                           // cmd_mux_010:sink1_ready -> cmd_demux_003:src8_ready
	wire   [50:0] cmd_demux_003_src8_channel;                                                         // cmd_demux_003:src8_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_003_src8_startofpacket;                                                   // cmd_demux_003:src8_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                     // cmd_demux_003:src8_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_003_src9_valid;                                                           // cmd_demux_003:src9_valid -> cmd_mux_011:sink1_valid
	wire  [134:0] cmd_demux_003_src9_data;                                                            // cmd_demux_003:src9_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_003_src9_ready;                                                           // cmd_mux_011:sink1_ready -> cmd_demux_003:src9_ready
	wire   [50:0] cmd_demux_003_src9_channel;                                                         // cmd_demux_003:src9_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_003_src9_startofpacket;                                                   // cmd_demux_003:src9_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                     // cmd_demux_003:src9_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_003_src10_valid;                                                          // cmd_demux_003:src10_valid -> cmd_mux_012:sink1_valid
	wire  [134:0] cmd_demux_003_src10_data;                                                           // cmd_demux_003:src10_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_003_src10_ready;                                                          // cmd_mux_012:sink1_ready -> cmd_demux_003:src10_ready
	wire   [50:0] cmd_demux_003_src10_channel;                                                        // cmd_demux_003:src10_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_003_src10_startofpacket;                                                  // cmd_demux_003:src10_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                    // cmd_demux_003:src10_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_003_src11_valid;                                                          // cmd_demux_003:src11_valid -> cmd_mux_013:sink1_valid
	wire  [134:0] cmd_demux_003_src11_data;                                                           // cmd_demux_003:src11_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_003_src11_ready;                                                          // cmd_mux_013:sink1_ready -> cmd_demux_003:src11_ready
	wire   [50:0] cmd_demux_003_src11_channel;                                                        // cmd_demux_003:src11_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_003_src11_startofpacket;                                                  // cmd_demux_003:src11_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                    // cmd_demux_003:src11_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_003_src12_valid;                                                          // cmd_demux_003:src12_valid -> cmd_mux_014:sink1_valid
	wire  [134:0] cmd_demux_003_src12_data;                                                           // cmd_demux_003:src12_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_003_src12_ready;                                                          // cmd_mux_014:sink1_ready -> cmd_demux_003:src12_ready
	wire   [50:0] cmd_demux_003_src12_channel;                                                        // cmd_demux_003:src12_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_003_src12_startofpacket;                                                  // cmd_demux_003:src12_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                                    // cmd_demux_003:src12_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_003_src13_valid;                                                          // cmd_demux_003:src13_valid -> cmd_mux_015:sink1_valid
	wire  [134:0] cmd_demux_003_src13_data;                                                           // cmd_demux_003:src13_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_003_src13_ready;                                                          // cmd_mux_015:sink1_ready -> cmd_demux_003:src13_ready
	wire   [50:0] cmd_demux_003_src13_channel;                                                        // cmd_demux_003:src13_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_003_src13_startofpacket;                                                  // cmd_demux_003:src13_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_003_src13_endofpacket;                                                    // cmd_demux_003:src13_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_003_src14_valid;                                                          // cmd_demux_003:src14_valid -> cmd_mux_016:sink1_valid
	wire  [134:0] cmd_demux_003_src14_data;                                                           // cmd_demux_003:src14_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_003_src14_ready;                                                          // cmd_mux_016:sink1_ready -> cmd_demux_003:src14_ready
	wire   [50:0] cmd_demux_003_src14_channel;                                                        // cmd_demux_003:src14_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_003_src14_startofpacket;                                                  // cmd_demux_003:src14_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_003_src14_endofpacket;                                                    // cmd_demux_003:src14_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_003_src15_valid;                                                          // cmd_demux_003:src15_valid -> cmd_mux_017:sink1_valid
	wire  [134:0] cmd_demux_003_src15_data;                                                           // cmd_demux_003:src15_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_003_src15_ready;                                                          // cmd_mux_017:sink1_ready -> cmd_demux_003:src15_ready
	wire   [50:0] cmd_demux_003_src15_channel;                                                        // cmd_demux_003:src15_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_003_src15_startofpacket;                                                  // cmd_demux_003:src15_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_003_src15_endofpacket;                                                    // cmd_demux_003:src15_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_003_src16_valid;                                                          // cmd_demux_003:src16_valid -> cmd_mux_018:sink1_valid
	wire  [134:0] cmd_demux_003_src16_data;                                                           // cmd_demux_003:src16_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_003_src16_ready;                                                          // cmd_mux_018:sink1_ready -> cmd_demux_003:src16_ready
	wire   [50:0] cmd_demux_003_src16_channel;                                                        // cmd_demux_003:src16_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_003_src16_startofpacket;                                                  // cmd_demux_003:src16_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_003_src16_endofpacket;                                                    // cmd_demux_003:src16_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_003_src17_valid;                                                          // cmd_demux_003:src17_valid -> cmd_mux_019:sink1_valid
	wire  [134:0] cmd_demux_003_src17_data;                                                           // cmd_demux_003:src17_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_003_src17_ready;                                                          // cmd_mux_019:sink1_ready -> cmd_demux_003:src17_ready
	wire   [50:0] cmd_demux_003_src17_channel;                                                        // cmd_demux_003:src17_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_003_src17_startofpacket;                                                  // cmd_demux_003:src17_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_003_src17_endofpacket;                                                    // cmd_demux_003:src17_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_003_src18_valid;                                                          // cmd_demux_003:src18_valid -> cmd_mux_020:sink1_valid
	wire  [134:0] cmd_demux_003_src18_data;                                                           // cmd_demux_003:src18_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_003_src18_ready;                                                          // cmd_mux_020:sink1_ready -> cmd_demux_003:src18_ready
	wire   [50:0] cmd_demux_003_src18_channel;                                                        // cmd_demux_003:src18_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_003_src18_startofpacket;                                                  // cmd_demux_003:src18_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_003_src18_endofpacket;                                                    // cmd_demux_003:src18_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_003_src19_valid;                                                          // cmd_demux_003:src19_valid -> cmd_mux_021:sink1_valid
	wire  [134:0] cmd_demux_003_src19_data;                                                           // cmd_demux_003:src19_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_003_src19_ready;                                                          // cmd_mux_021:sink1_ready -> cmd_demux_003:src19_ready
	wire   [50:0] cmd_demux_003_src19_channel;                                                        // cmd_demux_003:src19_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_003_src19_startofpacket;                                                  // cmd_demux_003:src19_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_003_src19_endofpacket;                                                    // cmd_demux_003:src19_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_003_src20_valid;                                                          // cmd_demux_003:src20_valid -> cmd_mux_022:sink1_valid
	wire  [134:0] cmd_demux_003_src20_data;                                                           // cmd_demux_003:src20_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_003_src20_ready;                                                          // cmd_mux_022:sink1_ready -> cmd_demux_003:src20_ready
	wire   [50:0] cmd_demux_003_src20_channel;                                                        // cmd_demux_003:src20_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_003_src20_startofpacket;                                                  // cmd_demux_003:src20_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_003_src20_endofpacket;                                                    // cmd_demux_003:src20_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_003_src21_valid;                                                          // cmd_demux_003:src21_valid -> cmd_mux_023:sink1_valid
	wire  [134:0] cmd_demux_003_src21_data;                                                           // cmd_demux_003:src21_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_003_src21_ready;                                                          // cmd_mux_023:sink1_ready -> cmd_demux_003:src21_ready
	wire   [50:0] cmd_demux_003_src21_channel;                                                        // cmd_demux_003:src21_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_003_src21_startofpacket;                                                  // cmd_demux_003:src21_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_003_src21_endofpacket;                                                    // cmd_demux_003:src21_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_003_src22_valid;                                                          // cmd_demux_003:src22_valid -> cmd_mux_024:sink1_valid
	wire  [134:0] cmd_demux_003_src22_data;                                                           // cmd_demux_003:src22_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_003_src22_ready;                                                          // cmd_mux_024:sink1_ready -> cmd_demux_003:src22_ready
	wire   [50:0] cmd_demux_003_src22_channel;                                                        // cmd_demux_003:src22_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_003_src22_startofpacket;                                                  // cmd_demux_003:src22_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_003_src22_endofpacket;                                                    // cmd_demux_003:src22_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_003_src23_valid;                                                          // cmd_demux_003:src23_valid -> cmd_mux_025:sink1_valid
	wire  [134:0] cmd_demux_003_src23_data;                                                           // cmd_demux_003:src23_data -> cmd_mux_025:sink1_data
	wire          cmd_demux_003_src23_ready;                                                          // cmd_mux_025:sink1_ready -> cmd_demux_003:src23_ready
	wire   [50:0] cmd_demux_003_src23_channel;                                                        // cmd_demux_003:src23_channel -> cmd_mux_025:sink1_channel
	wire          cmd_demux_003_src23_startofpacket;                                                  // cmd_demux_003:src23_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          cmd_demux_003_src23_endofpacket;                                                    // cmd_demux_003:src23_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_003_src24_valid;                                                          // cmd_demux_003:src24_valid -> cmd_mux_026:sink1_valid
	wire  [134:0] cmd_demux_003_src24_data;                                                           // cmd_demux_003:src24_data -> cmd_mux_026:sink1_data
	wire          cmd_demux_003_src24_ready;                                                          // cmd_mux_026:sink1_ready -> cmd_demux_003:src24_ready
	wire   [50:0] cmd_demux_003_src24_channel;                                                        // cmd_demux_003:src24_channel -> cmd_mux_026:sink1_channel
	wire          cmd_demux_003_src24_startofpacket;                                                  // cmd_demux_003:src24_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          cmd_demux_003_src24_endofpacket;                                                    // cmd_demux_003:src24_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          cmd_demux_003_src25_valid;                                                          // cmd_demux_003:src25_valid -> cmd_mux_027:sink1_valid
	wire  [134:0] cmd_demux_003_src25_data;                                                           // cmd_demux_003:src25_data -> cmd_mux_027:sink1_data
	wire          cmd_demux_003_src25_ready;                                                          // cmd_mux_027:sink1_ready -> cmd_demux_003:src25_ready
	wire   [50:0] cmd_demux_003_src25_channel;                                                        // cmd_demux_003:src25_channel -> cmd_mux_027:sink1_channel
	wire          cmd_demux_003_src25_startofpacket;                                                  // cmd_demux_003:src25_startofpacket -> cmd_mux_027:sink1_startofpacket
	wire          cmd_demux_003_src25_endofpacket;                                                    // cmd_demux_003:src25_endofpacket -> cmd_mux_027:sink1_endofpacket
	wire          cmd_demux_003_src26_valid;                                                          // cmd_demux_003:src26_valid -> cmd_mux_028:sink1_valid
	wire  [134:0] cmd_demux_003_src26_data;                                                           // cmd_demux_003:src26_data -> cmd_mux_028:sink1_data
	wire          cmd_demux_003_src26_ready;                                                          // cmd_mux_028:sink1_ready -> cmd_demux_003:src26_ready
	wire   [50:0] cmd_demux_003_src26_channel;                                                        // cmd_demux_003:src26_channel -> cmd_mux_028:sink1_channel
	wire          cmd_demux_003_src26_startofpacket;                                                  // cmd_demux_003:src26_startofpacket -> cmd_mux_028:sink1_startofpacket
	wire          cmd_demux_003_src26_endofpacket;                                                    // cmd_demux_003:src26_endofpacket -> cmd_mux_028:sink1_endofpacket
	wire          cmd_demux_003_src27_valid;                                                          // cmd_demux_003:src27_valid -> cmd_mux_029:sink1_valid
	wire  [134:0] cmd_demux_003_src27_data;                                                           // cmd_demux_003:src27_data -> cmd_mux_029:sink1_data
	wire          cmd_demux_003_src27_ready;                                                          // cmd_mux_029:sink1_ready -> cmd_demux_003:src27_ready
	wire   [50:0] cmd_demux_003_src27_channel;                                                        // cmd_demux_003:src27_channel -> cmd_mux_029:sink1_channel
	wire          cmd_demux_003_src27_startofpacket;                                                  // cmd_demux_003:src27_startofpacket -> cmd_mux_029:sink1_startofpacket
	wire          cmd_demux_003_src27_endofpacket;                                                    // cmd_demux_003:src27_endofpacket -> cmd_mux_029:sink1_endofpacket
	wire          cmd_demux_003_src28_valid;                                                          // cmd_demux_003:src28_valid -> cmd_mux_030:sink1_valid
	wire  [134:0] cmd_demux_003_src28_data;                                                           // cmd_demux_003:src28_data -> cmd_mux_030:sink1_data
	wire          cmd_demux_003_src28_ready;                                                          // cmd_mux_030:sink1_ready -> cmd_demux_003:src28_ready
	wire   [50:0] cmd_demux_003_src28_channel;                                                        // cmd_demux_003:src28_channel -> cmd_mux_030:sink1_channel
	wire          cmd_demux_003_src28_startofpacket;                                                  // cmd_demux_003:src28_startofpacket -> cmd_mux_030:sink1_startofpacket
	wire          cmd_demux_003_src28_endofpacket;                                                    // cmd_demux_003:src28_endofpacket -> cmd_mux_030:sink1_endofpacket
	wire          cmd_demux_003_src29_valid;                                                          // cmd_demux_003:src29_valid -> cmd_mux_031:sink1_valid
	wire  [134:0] cmd_demux_003_src29_data;                                                           // cmd_demux_003:src29_data -> cmd_mux_031:sink1_data
	wire          cmd_demux_003_src29_ready;                                                          // cmd_mux_031:sink1_ready -> cmd_demux_003:src29_ready
	wire   [50:0] cmd_demux_003_src29_channel;                                                        // cmd_demux_003:src29_channel -> cmd_mux_031:sink1_channel
	wire          cmd_demux_003_src29_startofpacket;                                                  // cmd_demux_003:src29_startofpacket -> cmd_mux_031:sink1_startofpacket
	wire          cmd_demux_003_src29_endofpacket;                                                    // cmd_demux_003:src29_endofpacket -> cmd_mux_031:sink1_endofpacket
	wire          cmd_demux_003_src30_valid;                                                          // cmd_demux_003:src30_valid -> cmd_mux_032:sink1_valid
	wire  [134:0] cmd_demux_003_src30_data;                                                           // cmd_demux_003:src30_data -> cmd_mux_032:sink1_data
	wire          cmd_demux_003_src30_ready;                                                          // cmd_mux_032:sink1_ready -> cmd_demux_003:src30_ready
	wire   [50:0] cmd_demux_003_src30_channel;                                                        // cmd_demux_003:src30_channel -> cmd_mux_032:sink1_channel
	wire          cmd_demux_003_src30_startofpacket;                                                  // cmd_demux_003:src30_startofpacket -> cmd_mux_032:sink1_startofpacket
	wire          cmd_demux_003_src30_endofpacket;                                                    // cmd_demux_003:src30_endofpacket -> cmd_mux_032:sink1_endofpacket
	wire          cmd_demux_003_src31_valid;                                                          // cmd_demux_003:src31_valid -> cmd_mux_033:sink1_valid
	wire  [134:0] cmd_demux_003_src31_data;                                                           // cmd_demux_003:src31_data -> cmd_mux_033:sink1_data
	wire          cmd_demux_003_src31_ready;                                                          // cmd_mux_033:sink1_ready -> cmd_demux_003:src31_ready
	wire   [50:0] cmd_demux_003_src31_channel;                                                        // cmd_demux_003:src31_channel -> cmd_mux_033:sink1_channel
	wire          cmd_demux_003_src31_startofpacket;                                                  // cmd_demux_003:src31_startofpacket -> cmd_mux_033:sink1_startofpacket
	wire          cmd_demux_003_src31_endofpacket;                                                    // cmd_demux_003:src31_endofpacket -> cmd_mux_033:sink1_endofpacket
	wire          cmd_demux_003_src32_valid;                                                          // cmd_demux_003:src32_valid -> cmd_mux_034:sink1_valid
	wire  [134:0] cmd_demux_003_src32_data;                                                           // cmd_demux_003:src32_data -> cmd_mux_034:sink1_data
	wire          cmd_demux_003_src32_ready;                                                          // cmd_mux_034:sink1_ready -> cmd_demux_003:src32_ready
	wire   [50:0] cmd_demux_003_src32_channel;                                                        // cmd_demux_003:src32_channel -> cmd_mux_034:sink1_channel
	wire          cmd_demux_003_src32_startofpacket;                                                  // cmd_demux_003:src32_startofpacket -> cmd_mux_034:sink1_startofpacket
	wire          cmd_demux_003_src32_endofpacket;                                                    // cmd_demux_003:src32_endofpacket -> cmd_mux_034:sink1_endofpacket
	wire          cmd_demux_003_src33_valid;                                                          // cmd_demux_003:src33_valid -> cmd_mux_035:sink1_valid
	wire  [134:0] cmd_demux_003_src33_data;                                                           // cmd_demux_003:src33_data -> cmd_mux_035:sink1_data
	wire          cmd_demux_003_src33_ready;                                                          // cmd_mux_035:sink1_ready -> cmd_demux_003:src33_ready
	wire   [50:0] cmd_demux_003_src33_channel;                                                        // cmd_demux_003:src33_channel -> cmd_mux_035:sink1_channel
	wire          cmd_demux_003_src33_startofpacket;                                                  // cmd_demux_003:src33_startofpacket -> cmd_mux_035:sink1_startofpacket
	wire          cmd_demux_003_src33_endofpacket;                                                    // cmd_demux_003:src33_endofpacket -> cmd_mux_035:sink1_endofpacket
	wire          cmd_demux_003_src34_valid;                                                          // cmd_demux_003:src34_valid -> cmd_mux_036:sink1_valid
	wire  [134:0] cmd_demux_003_src34_data;                                                           // cmd_demux_003:src34_data -> cmd_mux_036:sink1_data
	wire          cmd_demux_003_src34_ready;                                                          // cmd_mux_036:sink1_ready -> cmd_demux_003:src34_ready
	wire   [50:0] cmd_demux_003_src34_channel;                                                        // cmd_demux_003:src34_channel -> cmd_mux_036:sink1_channel
	wire          cmd_demux_003_src34_startofpacket;                                                  // cmd_demux_003:src34_startofpacket -> cmd_mux_036:sink1_startofpacket
	wire          cmd_demux_003_src34_endofpacket;                                                    // cmd_demux_003:src34_endofpacket -> cmd_mux_036:sink1_endofpacket
	wire          cmd_demux_003_src35_valid;                                                          // cmd_demux_003:src35_valid -> cmd_mux_037:sink1_valid
	wire  [134:0] cmd_demux_003_src35_data;                                                           // cmd_demux_003:src35_data -> cmd_mux_037:sink1_data
	wire          cmd_demux_003_src35_ready;                                                          // cmd_mux_037:sink1_ready -> cmd_demux_003:src35_ready
	wire   [50:0] cmd_demux_003_src35_channel;                                                        // cmd_demux_003:src35_channel -> cmd_mux_037:sink1_channel
	wire          cmd_demux_003_src35_startofpacket;                                                  // cmd_demux_003:src35_startofpacket -> cmd_mux_037:sink1_startofpacket
	wire          cmd_demux_003_src35_endofpacket;                                                    // cmd_demux_003:src35_endofpacket -> cmd_mux_037:sink1_endofpacket
	wire          cmd_demux_003_src36_valid;                                                          // cmd_demux_003:src36_valid -> cmd_mux_038:sink1_valid
	wire  [134:0] cmd_demux_003_src36_data;                                                           // cmd_demux_003:src36_data -> cmd_mux_038:sink1_data
	wire          cmd_demux_003_src36_ready;                                                          // cmd_mux_038:sink1_ready -> cmd_demux_003:src36_ready
	wire   [50:0] cmd_demux_003_src36_channel;                                                        // cmd_demux_003:src36_channel -> cmd_mux_038:sink1_channel
	wire          cmd_demux_003_src36_startofpacket;                                                  // cmd_demux_003:src36_startofpacket -> cmd_mux_038:sink1_startofpacket
	wire          cmd_demux_003_src36_endofpacket;                                                    // cmd_demux_003:src36_endofpacket -> cmd_mux_038:sink1_endofpacket
	wire          cmd_demux_003_src37_valid;                                                          // cmd_demux_003:src37_valid -> cmd_mux_039:sink1_valid
	wire  [134:0] cmd_demux_003_src37_data;                                                           // cmd_demux_003:src37_data -> cmd_mux_039:sink1_data
	wire          cmd_demux_003_src37_ready;                                                          // cmd_mux_039:sink1_ready -> cmd_demux_003:src37_ready
	wire   [50:0] cmd_demux_003_src37_channel;                                                        // cmd_demux_003:src37_channel -> cmd_mux_039:sink1_channel
	wire          cmd_demux_003_src37_startofpacket;                                                  // cmd_demux_003:src37_startofpacket -> cmd_mux_039:sink1_startofpacket
	wire          cmd_demux_003_src37_endofpacket;                                                    // cmd_demux_003:src37_endofpacket -> cmd_mux_039:sink1_endofpacket
	wire          cmd_demux_003_src38_valid;                                                          // cmd_demux_003:src38_valid -> cmd_mux_040:sink1_valid
	wire  [134:0] cmd_demux_003_src38_data;                                                           // cmd_demux_003:src38_data -> cmd_mux_040:sink1_data
	wire          cmd_demux_003_src38_ready;                                                          // cmd_mux_040:sink1_ready -> cmd_demux_003:src38_ready
	wire   [50:0] cmd_demux_003_src38_channel;                                                        // cmd_demux_003:src38_channel -> cmd_mux_040:sink1_channel
	wire          cmd_demux_003_src38_startofpacket;                                                  // cmd_demux_003:src38_startofpacket -> cmd_mux_040:sink1_startofpacket
	wire          cmd_demux_003_src38_endofpacket;                                                    // cmd_demux_003:src38_endofpacket -> cmd_mux_040:sink1_endofpacket
	wire          cmd_demux_003_src39_valid;                                                          // cmd_demux_003:src39_valid -> cmd_mux_041:sink1_valid
	wire  [134:0] cmd_demux_003_src39_data;                                                           // cmd_demux_003:src39_data -> cmd_mux_041:sink1_data
	wire          cmd_demux_003_src39_ready;                                                          // cmd_mux_041:sink1_ready -> cmd_demux_003:src39_ready
	wire   [50:0] cmd_demux_003_src39_channel;                                                        // cmd_demux_003:src39_channel -> cmd_mux_041:sink1_channel
	wire          cmd_demux_003_src39_startofpacket;                                                  // cmd_demux_003:src39_startofpacket -> cmd_mux_041:sink1_startofpacket
	wire          cmd_demux_003_src39_endofpacket;                                                    // cmd_demux_003:src39_endofpacket -> cmd_mux_041:sink1_endofpacket
	wire          cmd_demux_003_src40_valid;                                                          // cmd_demux_003:src40_valid -> cmd_mux_042:sink1_valid
	wire  [134:0] cmd_demux_003_src40_data;                                                           // cmd_demux_003:src40_data -> cmd_mux_042:sink1_data
	wire          cmd_demux_003_src40_ready;                                                          // cmd_mux_042:sink1_ready -> cmd_demux_003:src40_ready
	wire   [50:0] cmd_demux_003_src40_channel;                                                        // cmd_demux_003:src40_channel -> cmd_mux_042:sink1_channel
	wire          cmd_demux_003_src40_startofpacket;                                                  // cmd_demux_003:src40_startofpacket -> cmd_mux_042:sink1_startofpacket
	wire          cmd_demux_003_src40_endofpacket;                                                    // cmd_demux_003:src40_endofpacket -> cmd_mux_042:sink1_endofpacket
	wire          cmd_demux_003_src41_valid;                                                          // cmd_demux_003:src41_valid -> cmd_mux_043:sink1_valid
	wire  [134:0] cmd_demux_003_src41_data;                                                           // cmd_demux_003:src41_data -> cmd_mux_043:sink1_data
	wire          cmd_demux_003_src41_ready;                                                          // cmd_mux_043:sink1_ready -> cmd_demux_003:src41_ready
	wire   [50:0] cmd_demux_003_src41_channel;                                                        // cmd_demux_003:src41_channel -> cmd_mux_043:sink1_channel
	wire          cmd_demux_003_src41_startofpacket;                                                  // cmd_demux_003:src41_startofpacket -> cmd_mux_043:sink1_startofpacket
	wire          cmd_demux_003_src41_endofpacket;                                                    // cmd_demux_003:src41_endofpacket -> cmd_mux_043:sink1_endofpacket
	wire          cmd_demux_003_src42_valid;                                                          // cmd_demux_003:src42_valid -> cmd_mux_044:sink1_valid
	wire  [134:0] cmd_demux_003_src42_data;                                                           // cmd_demux_003:src42_data -> cmd_mux_044:sink1_data
	wire          cmd_demux_003_src42_ready;                                                          // cmd_mux_044:sink1_ready -> cmd_demux_003:src42_ready
	wire   [50:0] cmd_demux_003_src42_channel;                                                        // cmd_demux_003:src42_channel -> cmd_mux_044:sink1_channel
	wire          cmd_demux_003_src42_startofpacket;                                                  // cmd_demux_003:src42_startofpacket -> cmd_mux_044:sink1_startofpacket
	wire          cmd_demux_003_src42_endofpacket;                                                    // cmd_demux_003:src42_endofpacket -> cmd_mux_044:sink1_endofpacket
	wire          cmd_demux_003_src43_valid;                                                          // cmd_demux_003:src43_valid -> cmd_mux_045:sink1_valid
	wire  [134:0] cmd_demux_003_src43_data;                                                           // cmd_demux_003:src43_data -> cmd_mux_045:sink1_data
	wire          cmd_demux_003_src43_ready;                                                          // cmd_mux_045:sink1_ready -> cmd_demux_003:src43_ready
	wire   [50:0] cmd_demux_003_src43_channel;                                                        // cmd_demux_003:src43_channel -> cmd_mux_045:sink1_channel
	wire          cmd_demux_003_src43_startofpacket;                                                  // cmd_demux_003:src43_startofpacket -> cmd_mux_045:sink1_startofpacket
	wire          cmd_demux_003_src43_endofpacket;                                                    // cmd_demux_003:src43_endofpacket -> cmd_mux_045:sink1_endofpacket
	wire          cmd_demux_003_src44_valid;                                                          // cmd_demux_003:src44_valid -> cmd_mux_046:sink1_valid
	wire  [134:0] cmd_demux_003_src44_data;                                                           // cmd_demux_003:src44_data -> cmd_mux_046:sink1_data
	wire          cmd_demux_003_src44_ready;                                                          // cmd_mux_046:sink1_ready -> cmd_demux_003:src44_ready
	wire   [50:0] cmd_demux_003_src44_channel;                                                        // cmd_demux_003:src44_channel -> cmd_mux_046:sink1_channel
	wire          cmd_demux_003_src44_startofpacket;                                                  // cmd_demux_003:src44_startofpacket -> cmd_mux_046:sink1_startofpacket
	wire          cmd_demux_003_src44_endofpacket;                                                    // cmd_demux_003:src44_endofpacket -> cmd_mux_046:sink1_endofpacket
	wire          cmd_demux_003_src45_valid;                                                          // cmd_demux_003:src45_valid -> cmd_mux_047:sink1_valid
	wire  [134:0] cmd_demux_003_src45_data;                                                           // cmd_demux_003:src45_data -> cmd_mux_047:sink1_data
	wire          cmd_demux_003_src45_ready;                                                          // cmd_mux_047:sink1_ready -> cmd_demux_003:src45_ready
	wire   [50:0] cmd_demux_003_src45_channel;                                                        // cmd_demux_003:src45_channel -> cmd_mux_047:sink1_channel
	wire          cmd_demux_003_src45_startofpacket;                                                  // cmd_demux_003:src45_startofpacket -> cmd_mux_047:sink1_startofpacket
	wire          cmd_demux_003_src45_endofpacket;                                                    // cmd_demux_003:src45_endofpacket -> cmd_mux_047:sink1_endofpacket
	wire          cmd_demux_003_src46_valid;                                                          // cmd_demux_003:src46_valid -> cmd_mux_048:sink1_valid
	wire  [134:0] cmd_demux_003_src46_data;                                                           // cmd_demux_003:src46_data -> cmd_mux_048:sink1_data
	wire          cmd_demux_003_src46_ready;                                                          // cmd_mux_048:sink1_ready -> cmd_demux_003:src46_ready
	wire   [50:0] cmd_demux_003_src46_channel;                                                        // cmd_demux_003:src46_channel -> cmd_mux_048:sink1_channel
	wire          cmd_demux_003_src46_startofpacket;                                                  // cmd_demux_003:src46_startofpacket -> cmd_mux_048:sink1_startofpacket
	wire          cmd_demux_003_src46_endofpacket;                                                    // cmd_demux_003:src46_endofpacket -> cmd_mux_048:sink1_endofpacket
	wire          cmd_demux_003_src47_valid;                                                          // cmd_demux_003:src47_valid -> cmd_mux_049:sink1_valid
	wire  [134:0] cmd_demux_003_src47_data;                                                           // cmd_demux_003:src47_data -> cmd_mux_049:sink1_data
	wire          cmd_demux_003_src47_ready;                                                          // cmd_mux_049:sink1_ready -> cmd_demux_003:src47_ready
	wire   [50:0] cmd_demux_003_src47_channel;                                                        // cmd_demux_003:src47_channel -> cmd_mux_049:sink1_channel
	wire          cmd_demux_003_src47_startofpacket;                                                  // cmd_demux_003:src47_startofpacket -> cmd_mux_049:sink1_startofpacket
	wire          cmd_demux_003_src47_endofpacket;                                                    // cmd_demux_003:src47_endofpacket -> cmd_mux_049:sink1_endofpacket
	wire          cmd_demux_003_src48_valid;                                                          // cmd_demux_003:src48_valid -> cmd_mux_050:sink1_valid
	wire  [134:0] cmd_demux_003_src48_data;                                                           // cmd_demux_003:src48_data -> cmd_mux_050:sink1_data
	wire          cmd_demux_003_src48_ready;                                                          // cmd_mux_050:sink1_ready -> cmd_demux_003:src48_ready
	wire   [50:0] cmd_demux_003_src48_channel;                                                        // cmd_demux_003:src48_channel -> cmd_mux_050:sink1_channel
	wire          cmd_demux_003_src48_startofpacket;                                                  // cmd_demux_003:src48_startofpacket -> cmd_mux_050:sink1_startofpacket
	wire          cmd_demux_003_src48_endofpacket;                                                    // cmd_demux_003:src48_endofpacket -> cmd_mux_050:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                           // cmd_demux_004:src0_valid -> cmd_mux_001:sink2_valid
	wire  [134:0] cmd_demux_004_src0_data;                                                            // cmd_demux_004:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_004_src0_ready;                                                           // cmd_mux_001:sink2_ready -> cmd_demux_004:src0_ready
	wire   [50:0] cmd_demux_004_src0_channel;                                                         // cmd_demux_004:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                   // cmd_demux_004:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                     // cmd_demux_004:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_004_src1_valid;                                                           // cmd_demux_004:src1_valid -> cmd_mux_002:sink2_valid
	wire  [134:0] cmd_demux_004_src1_data;                                                            // cmd_demux_004:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_004_src1_ready;                                                           // cmd_mux_002:sink2_ready -> cmd_demux_004:src1_ready
	wire   [50:0] cmd_demux_004_src1_channel;                                                         // cmd_demux_004:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_004_src1_startofpacket;                                                   // cmd_demux_004:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                     // cmd_demux_004:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_004_src2_valid;                                                           // cmd_demux_004:src2_valid -> cmd_mux_004:sink2_valid
	wire  [134:0] cmd_demux_004_src2_data;                                                            // cmd_demux_004:src2_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_004_src2_ready;                                                           // cmd_mux_004:sink2_ready -> cmd_demux_004:src2_ready
	wire   [50:0] cmd_demux_004_src2_channel;                                                         // cmd_demux_004:src2_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src2_startofpacket;                                                   // cmd_demux_004:src2_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                     // cmd_demux_004:src2_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_004_src3_valid;                                                           // cmd_demux_004:src3_valid -> cmd_mux_005:sink2_valid
	wire  [134:0] cmd_demux_004_src3_data;                                                            // cmd_demux_004:src3_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_004_src3_ready;                                                           // cmd_mux_005:sink2_ready -> cmd_demux_004:src3_ready
	wire   [50:0] cmd_demux_004_src3_channel;                                                         // cmd_demux_004:src3_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_004_src3_startofpacket;                                                   // cmd_demux_004:src3_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                     // cmd_demux_004:src3_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_004_src4_valid;                                                           // cmd_demux_004:src4_valid -> cmd_mux_006:sink2_valid
	wire  [134:0] cmd_demux_004_src4_data;                                                            // cmd_demux_004:src4_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_004_src4_ready;                                                           // cmd_mux_006:sink2_ready -> cmd_demux_004:src4_ready
	wire   [50:0] cmd_demux_004_src4_channel;                                                         // cmd_demux_004:src4_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_004_src4_startofpacket;                                                   // cmd_demux_004:src4_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                     // cmd_demux_004:src4_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_004_src5_valid;                                                           // cmd_demux_004:src5_valid -> cmd_mux_007:sink2_valid
	wire  [134:0] cmd_demux_004_src5_data;                                                            // cmd_demux_004:src5_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_004_src5_ready;                                                           // cmd_mux_007:sink2_ready -> cmd_demux_004:src5_ready
	wire   [50:0] cmd_demux_004_src5_channel;                                                         // cmd_demux_004:src5_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_004_src5_startofpacket;                                                   // cmd_demux_004:src5_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                     // cmd_demux_004:src5_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_004_src6_valid;                                                           // cmd_demux_004:src6_valid -> cmd_mux_008:sink2_valid
	wire  [134:0] cmd_demux_004_src6_data;                                                            // cmd_demux_004:src6_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_004_src6_ready;                                                           // cmd_mux_008:sink2_ready -> cmd_demux_004:src6_ready
	wire   [50:0] cmd_demux_004_src6_channel;                                                         // cmd_demux_004:src6_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_004_src6_startofpacket;                                                   // cmd_demux_004:src6_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                     // cmd_demux_004:src6_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_004_src7_valid;                                                           // cmd_demux_004:src7_valid -> cmd_mux_009:sink2_valid
	wire  [134:0] cmd_demux_004_src7_data;                                                            // cmd_demux_004:src7_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_004_src7_ready;                                                           // cmd_mux_009:sink2_ready -> cmd_demux_004:src7_ready
	wire   [50:0] cmd_demux_004_src7_channel;                                                         // cmd_demux_004:src7_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_004_src7_startofpacket;                                                   // cmd_demux_004:src7_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                     // cmd_demux_004:src7_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_004_src8_valid;                                                           // cmd_demux_004:src8_valid -> cmd_mux_010:sink2_valid
	wire  [134:0] cmd_demux_004_src8_data;                                                            // cmd_demux_004:src8_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_004_src8_ready;                                                           // cmd_mux_010:sink2_ready -> cmd_demux_004:src8_ready
	wire   [50:0] cmd_demux_004_src8_channel;                                                         // cmd_demux_004:src8_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_004_src8_startofpacket;                                                   // cmd_demux_004:src8_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                     // cmd_demux_004:src8_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_004_src9_valid;                                                           // cmd_demux_004:src9_valid -> cmd_mux_011:sink2_valid
	wire  [134:0] cmd_demux_004_src9_data;                                                            // cmd_demux_004:src9_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_004_src9_ready;                                                           // cmd_mux_011:sink2_ready -> cmd_demux_004:src9_ready
	wire   [50:0] cmd_demux_004_src9_channel;                                                         // cmd_demux_004:src9_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_004_src9_startofpacket;                                                   // cmd_demux_004:src9_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                     // cmd_demux_004:src9_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_004_src10_valid;                                                          // cmd_demux_004:src10_valid -> cmd_mux_012:sink2_valid
	wire  [134:0] cmd_demux_004_src10_data;                                                           // cmd_demux_004:src10_data -> cmd_mux_012:sink2_data
	wire          cmd_demux_004_src10_ready;                                                          // cmd_mux_012:sink2_ready -> cmd_demux_004:src10_ready
	wire   [50:0] cmd_demux_004_src10_channel;                                                        // cmd_demux_004:src10_channel -> cmd_mux_012:sink2_channel
	wire          cmd_demux_004_src10_startofpacket;                                                  // cmd_demux_004:src10_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                    // cmd_demux_004:src10_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_004_src11_valid;                                                          // cmd_demux_004:src11_valid -> cmd_mux_013:sink2_valid
	wire  [134:0] cmd_demux_004_src11_data;                                                           // cmd_demux_004:src11_data -> cmd_mux_013:sink2_data
	wire          cmd_demux_004_src11_ready;                                                          // cmd_mux_013:sink2_ready -> cmd_demux_004:src11_ready
	wire   [50:0] cmd_demux_004_src11_channel;                                                        // cmd_demux_004:src11_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_004_src11_startofpacket;                                                  // cmd_demux_004:src11_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          cmd_demux_004_src11_endofpacket;                                                    // cmd_demux_004:src11_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_004_src12_valid;                                                          // cmd_demux_004:src12_valid -> cmd_mux_014:sink2_valid
	wire  [134:0] cmd_demux_004_src12_data;                                                           // cmd_demux_004:src12_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_004_src12_ready;                                                          // cmd_mux_014:sink2_ready -> cmd_demux_004:src12_ready
	wire   [50:0] cmd_demux_004_src12_channel;                                                        // cmd_demux_004:src12_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_004_src12_startofpacket;                                                  // cmd_demux_004:src12_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_004_src12_endofpacket;                                                    // cmd_demux_004:src12_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_004_src13_valid;                                                          // cmd_demux_004:src13_valid -> cmd_mux_015:sink2_valid
	wire  [134:0] cmd_demux_004_src13_data;                                                           // cmd_demux_004:src13_data -> cmd_mux_015:sink2_data
	wire          cmd_demux_004_src13_ready;                                                          // cmd_mux_015:sink2_ready -> cmd_demux_004:src13_ready
	wire   [50:0] cmd_demux_004_src13_channel;                                                        // cmd_demux_004:src13_channel -> cmd_mux_015:sink2_channel
	wire          cmd_demux_004_src13_startofpacket;                                                  // cmd_demux_004:src13_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          cmd_demux_004_src13_endofpacket;                                                    // cmd_demux_004:src13_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          cmd_demux_004_src14_valid;                                                          // cmd_demux_004:src14_valid -> cmd_mux_016:sink2_valid
	wire  [134:0] cmd_demux_004_src14_data;                                                           // cmd_demux_004:src14_data -> cmd_mux_016:sink2_data
	wire          cmd_demux_004_src14_ready;                                                          // cmd_mux_016:sink2_ready -> cmd_demux_004:src14_ready
	wire   [50:0] cmd_demux_004_src14_channel;                                                        // cmd_demux_004:src14_channel -> cmd_mux_016:sink2_channel
	wire          cmd_demux_004_src14_startofpacket;                                                  // cmd_demux_004:src14_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          cmd_demux_004_src14_endofpacket;                                                    // cmd_demux_004:src14_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          cmd_demux_004_src15_valid;                                                          // cmd_demux_004:src15_valid -> cmd_mux_017:sink2_valid
	wire  [134:0] cmd_demux_004_src15_data;                                                           // cmd_demux_004:src15_data -> cmd_mux_017:sink2_data
	wire          cmd_demux_004_src15_ready;                                                          // cmd_mux_017:sink2_ready -> cmd_demux_004:src15_ready
	wire   [50:0] cmd_demux_004_src15_channel;                                                        // cmd_demux_004:src15_channel -> cmd_mux_017:sink2_channel
	wire          cmd_demux_004_src15_startofpacket;                                                  // cmd_demux_004:src15_startofpacket -> cmd_mux_017:sink2_startofpacket
	wire          cmd_demux_004_src15_endofpacket;                                                    // cmd_demux_004:src15_endofpacket -> cmd_mux_017:sink2_endofpacket
	wire          cmd_demux_004_src16_valid;                                                          // cmd_demux_004:src16_valid -> cmd_mux_018:sink2_valid
	wire  [134:0] cmd_demux_004_src16_data;                                                           // cmd_demux_004:src16_data -> cmd_mux_018:sink2_data
	wire          cmd_demux_004_src16_ready;                                                          // cmd_mux_018:sink2_ready -> cmd_demux_004:src16_ready
	wire   [50:0] cmd_demux_004_src16_channel;                                                        // cmd_demux_004:src16_channel -> cmd_mux_018:sink2_channel
	wire          cmd_demux_004_src16_startofpacket;                                                  // cmd_demux_004:src16_startofpacket -> cmd_mux_018:sink2_startofpacket
	wire          cmd_demux_004_src16_endofpacket;                                                    // cmd_demux_004:src16_endofpacket -> cmd_mux_018:sink2_endofpacket
	wire          cmd_demux_004_src17_valid;                                                          // cmd_demux_004:src17_valid -> cmd_mux_019:sink2_valid
	wire  [134:0] cmd_demux_004_src17_data;                                                           // cmd_demux_004:src17_data -> cmd_mux_019:sink2_data
	wire          cmd_demux_004_src17_ready;                                                          // cmd_mux_019:sink2_ready -> cmd_demux_004:src17_ready
	wire   [50:0] cmd_demux_004_src17_channel;                                                        // cmd_demux_004:src17_channel -> cmd_mux_019:sink2_channel
	wire          cmd_demux_004_src17_startofpacket;                                                  // cmd_demux_004:src17_startofpacket -> cmd_mux_019:sink2_startofpacket
	wire          cmd_demux_004_src17_endofpacket;                                                    // cmd_demux_004:src17_endofpacket -> cmd_mux_019:sink2_endofpacket
	wire          cmd_demux_004_src18_valid;                                                          // cmd_demux_004:src18_valid -> cmd_mux_020:sink2_valid
	wire  [134:0] cmd_demux_004_src18_data;                                                           // cmd_demux_004:src18_data -> cmd_mux_020:sink2_data
	wire          cmd_demux_004_src18_ready;                                                          // cmd_mux_020:sink2_ready -> cmd_demux_004:src18_ready
	wire   [50:0] cmd_demux_004_src18_channel;                                                        // cmd_demux_004:src18_channel -> cmd_mux_020:sink2_channel
	wire          cmd_demux_004_src18_startofpacket;                                                  // cmd_demux_004:src18_startofpacket -> cmd_mux_020:sink2_startofpacket
	wire          cmd_demux_004_src18_endofpacket;                                                    // cmd_demux_004:src18_endofpacket -> cmd_mux_020:sink2_endofpacket
	wire          cmd_demux_004_src19_valid;                                                          // cmd_demux_004:src19_valid -> cmd_mux_021:sink2_valid
	wire  [134:0] cmd_demux_004_src19_data;                                                           // cmd_demux_004:src19_data -> cmd_mux_021:sink2_data
	wire          cmd_demux_004_src19_ready;                                                          // cmd_mux_021:sink2_ready -> cmd_demux_004:src19_ready
	wire   [50:0] cmd_demux_004_src19_channel;                                                        // cmd_demux_004:src19_channel -> cmd_mux_021:sink2_channel
	wire          cmd_demux_004_src19_startofpacket;                                                  // cmd_demux_004:src19_startofpacket -> cmd_mux_021:sink2_startofpacket
	wire          cmd_demux_004_src19_endofpacket;                                                    // cmd_demux_004:src19_endofpacket -> cmd_mux_021:sink2_endofpacket
	wire          cmd_demux_004_src20_valid;                                                          // cmd_demux_004:src20_valid -> cmd_mux_022:sink2_valid
	wire  [134:0] cmd_demux_004_src20_data;                                                           // cmd_demux_004:src20_data -> cmd_mux_022:sink2_data
	wire          cmd_demux_004_src20_ready;                                                          // cmd_mux_022:sink2_ready -> cmd_demux_004:src20_ready
	wire   [50:0] cmd_demux_004_src20_channel;                                                        // cmd_demux_004:src20_channel -> cmd_mux_022:sink2_channel
	wire          cmd_demux_004_src20_startofpacket;                                                  // cmd_demux_004:src20_startofpacket -> cmd_mux_022:sink2_startofpacket
	wire          cmd_demux_004_src20_endofpacket;                                                    // cmd_demux_004:src20_endofpacket -> cmd_mux_022:sink2_endofpacket
	wire          cmd_demux_004_src21_valid;                                                          // cmd_demux_004:src21_valid -> cmd_mux_023:sink2_valid
	wire  [134:0] cmd_demux_004_src21_data;                                                           // cmd_demux_004:src21_data -> cmd_mux_023:sink2_data
	wire          cmd_demux_004_src21_ready;                                                          // cmd_mux_023:sink2_ready -> cmd_demux_004:src21_ready
	wire   [50:0] cmd_demux_004_src21_channel;                                                        // cmd_demux_004:src21_channel -> cmd_mux_023:sink2_channel
	wire          cmd_demux_004_src21_startofpacket;                                                  // cmd_demux_004:src21_startofpacket -> cmd_mux_023:sink2_startofpacket
	wire          cmd_demux_004_src21_endofpacket;                                                    // cmd_demux_004:src21_endofpacket -> cmd_mux_023:sink2_endofpacket
	wire          cmd_demux_004_src22_valid;                                                          // cmd_demux_004:src22_valid -> cmd_mux_024:sink2_valid
	wire  [134:0] cmd_demux_004_src22_data;                                                           // cmd_demux_004:src22_data -> cmd_mux_024:sink2_data
	wire          cmd_demux_004_src22_ready;                                                          // cmd_mux_024:sink2_ready -> cmd_demux_004:src22_ready
	wire   [50:0] cmd_demux_004_src22_channel;                                                        // cmd_demux_004:src22_channel -> cmd_mux_024:sink2_channel
	wire          cmd_demux_004_src22_startofpacket;                                                  // cmd_demux_004:src22_startofpacket -> cmd_mux_024:sink2_startofpacket
	wire          cmd_demux_004_src22_endofpacket;                                                    // cmd_demux_004:src22_endofpacket -> cmd_mux_024:sink2_endofpacket
	wire          cmd_demux_004_src23_valid;                                                          // cmd_demux_004:src23_valid -> cmd_mux_025:sink2_valid
	wire  [134:0] cmd_demux_004_src23_data;                                                           // cmd_demux_004:src23_data -> cmd_mux_025:sink2_data
	wire          cmd_demux_004_src23_ready;                                                          // cmd_mux_025:sink2_ready -> cmd_demux_004:src23_ready
	wire   [50:0] cmd_demux_004_src23_channel;                                                        // cmd_demux_004:src23_channel -> cmd_mux_025:sink2_channel
	wire          cmd_demux_004_src23_startofpacket;                                                  // cmd_demux_004:src23_startofpacket -> cmd_mux_025:sink2_startofpacket
	wire          cmd_demux_004_src23_endofpacket;                                                    // cmd_demux_004:src23_endofpacket -> cmd_mux_025:sink2_endofpacket
	wire          cmd_demux_004_src24_valid;                                                          // cmd_demux_004:src24_valid -> cmd_mux_026:sink2_valid
	wire  [134:0] cmd_demux_004_src24_data;                                                           // cmd_demux_004:src24_data -> cmd_mux_026:sink2_data
	wire          cmd_demux_004_src24_ready;                                                          // cmd_mux_026:sink2_ready -> cmd_demux_004:src24_ready
	wire   [50:0] cmd_demux_004_src24_channel;                                                        // cmd_demux_004:src24_channel -> cmd_mux_026:sink2_channel
	wire          cmd_demux_004_src24_startofpacket;                                                  // cmd_demux_004:src24_startofpacket -> cmd_mux_026:sink2_startofpacket
	wire          cmd_demux_004_src24_endofpacket;                                                    // cmd_demux_004:src24_endofpacket -> cmd_mux_026:sink2_endofpacket
	wire          cmd_demux_004_src25_valid;                                                          // cmd_demux_004:src25_valid -> cmd_mux_027:sink2_valid
	wire  [134:0] cmd_demux_004_src25_data;                                                           // cmd_demux_004:src25_data -> cmd_mux_027:sink2_data
	wire          cmd_demux_004_src25_ready;                                                          // cmd_mux_027:sink2_ready -> cmd_demux_004:src25_ready
	wire   [50:0] cmd_demux_004_src25_channel;                                                        // cmd_demux_004:src25_channel -> cmd_mux_027:sink2_channel
	wire          cmd_demux_004_src25_startofpacket;                                                  // cmd_demux_004:src25_startofpacket -> cmd_mux_027:sink2_startofpacket
	wire          cmd_demux_004_src25_endofpacket;                                                    // cmd_demux_004:src25_endofpacket -> cmd_mux_027:sink2_endofpacket
	wire          cmd_demux_004_src26_valid;                                                          // cmd_demux_004:src26_valid -> cmd_mux_028:sink2_valid
	wire  [134:0] cmd_demux_004_src26_data;                                                           // cmd_demux_004:src26_data -> cmd_mux_028:sink2_data
	wire          cmd_demux_004_src26_ready;                                                          // cmd_mux_028:sink2_ready -> cmd_demux_004:src26_ready
	wire   [50:0] cmd_demux_004_src26_channel;                                                        // cmd_demux_004:src26_channel -> cmd_mux_028:sink2_channel
	wire          cmd_demux_004_src26_startofpacket;                                                  // cmd_demux_004:src26_startofpacket -> cmd_mux_028:sink2_startofpacket
	wire          cmd_demux_004_src26_endofpacket;                                                    // cmd_demux_004:src26_endofpacket -> cmd_mux_028:sink2_endofpacket
	wire          cmd_demux_004_src27_valid;                                                          // cmd_demux_004:src27_valid -> cmd_mux_029:sink2_valid
	wire  [134:0] cmd_demux_004_src27_data;                                                           // cmd_demux_004:src27_data -> cmd_mux_029:sink2_data
	wire          cmd_demux_004_src27_ready;                                                          // cmd_mux_029:sink2_ready -> cmd_demux_004:src27_ready
	wire   [50:0] cmd_demux_004_src27_channel;                                                        // cmd_demux_004:src27_channel -> cmd_mux_029:sink2_channel
	wire          cmd_demux_004_src27_startofpacket;                                                  // cmd_demux_004:src27_startofpacket -> cmd_mux_029:sink2_startofpacket
	wire          cmd_demux_004_src27_endofpacket;                                                    // cmd_demux_004:src27_endofpacket -> cmd_mux_029:sink2_endofpacket
	wire          cmd_demux_004_src28_valid;                                                          // cmd_demux_004:src28_valid -> cmd_mux_030:sink2_valid
	wire  [134:0] cmd_demux_004_src28_data;                                                           // cmd_demux_004:src28_data -> cmd_mux_030:sink2_data
	wire          cmd_demux_004_src28_ready;                                                          // cmd_mux_030:sink2_ready -> cmd_demux_004:src28_ready
	wire   [50:0] cmd_demux_004_src28_channel;                                                        // cmd_demux_004:src28_channel -> cmd_mux_030:sink2_channel
	wire          cmd_demux_004_src28_startofpacket;                                                  // cmd_demux_004:src28_startofpacket -> cmd_mux_030:sink2_startofpacket
	wire          cmd_demux_004_src28_endofpacket;                                                    // cmd_demux_004:src28_endofpacket -> cmd_mux_030:sink2_endofpacket
	wire          cmd_demux_004_src29_valid;                                                          // cmd_demux_004:src29_valid -> cmd_mux_031:sink2_valid
	wire  [134:0] cmd_demux_004_src29_data;                                                           // cmd_demux_004:src29_data -> cmd_mux_031:sink2_data
	wire          cmd_demux_004_src29_ready;                                                          // cmd_mux_031:sink2_ready -> cmd_demux_004:src29_ready
	wire   [50:0] cmd_demux_004_src29_channel;                                                        // cmd_demux_004:src29_channel -> cmd_mux_031:sink2_channel
	wire          cmd_demux_004_src29_startofpacket;                                                  // cmd_demux_004:src29_startofpacket -> cmd_mux_031:sink2_startofpacket
	wire          cmd_demux_004_src29_endofpacket;                                                    // cmd_demux_004:src29_endofpacket -> cmd_mux_031:sink2_endofpacket
	wire          cmd_demux_004_src30_valid;                                                          // cmd_demux_004:src30_valid -> cmd_mux_032:sink2_valid
	wire  [134:0] cmd_demux_004_src30_data;                                                           // cmd_demux_004:src30_data -> cmd_mux_032:sink2_data
	wire          cmd_demux_004_src30_ready;                                                          // cmd_mux_032:sink2_ready -> cmd_demux_004:src30_ready
	wire   [50:0] cmd_demux_004_src30_channel;                                                        // cmd_demux_004:src30_channel -> cmd_mux_032:sink2_channel
	wire          cmd_demux_004_src30_startofpacket;                                                  // cmd_demux_004:src30_startofpacket -> cmd_mux_032:sink2_startofpacket
	wire          cmd_demux_004_src30_endofpacket;                                                    // cmd_demux_004:src30_endofpacket -> cmd_mux_032:sink2_endofpacket
	wire          cmd_demux_004_src31_valid;                                                          // cmd_demux_004:src31_valid -> cmd_mux_033:sink2_valid
	wire  [134:0] cmd_demux_004_src31_data;                                                           // cmd_demux_004:src31_data -> cmd_mux_033:sink2_data
	wire          cmd_demux_004_src31_ready;                                                          // cmd_mux_033:sink2_ready -> cmd_demux_004:src31_ready
	wire   [50:0] cmd_demux_004_src31_channel;                                                        // cmd_demux_004:src31_channel -> cmd_mux_033:sink2_channel
	wire          cmd_demux_004_src31_startofpacket;                                                  // cmd_demux_004:src31_startofpacket -> cmd_mux_033:sink2_startofpacket
	wire          cmd_demux_004_src31_endofpacket;                                                    // cmd_demux_004:src31_endofpacket -> cmd_mux_033:sink2_endofpacket
	wire          cmd_demux_004_src32_valid;                                                          // cmd_demux_004:src32_valid -> cmd_mux_034:sink2_valid
	wire  [134:0] cmd_demux_004_src32_data;                                                           // cmd_demux_004:src32_data -> cmd_mux_034:sink2_data
	wire          cmd_demux_004_src32_ready;                                                          // cmd_mux_034:sink2_ready -> cmd_demux_004:src32_ready
	wire   [50:0] cmd_demux_004_src32_channel;                                                        // cmd_demux_004:src32_channel -> cmd_mux_034:sink2_channel
	wire          cmd_demux_004_src32_startofpacket;                                                  // cmd_demux_004:src32_startofpacket -> cmd_mux_034:sink2_startofpacket
	wire          cmd_demux_004_src32_endofpacket;                                                    // cmd_demux_004:src32_endofpacket -> cmd_mux_034:sink2_endofpacket
	wire          cmd_demux_004_src33_valid;                                                          // cmd_demux_004:src33_valid -> cmd_mux_035:sink2_valid
	wire  [134:0] cmd_demux_004_src33_data;                                                           // cmd_demux_004:src33_data -> cmd_mux_035:sink2_data
	wire          cmd_demux_004_src33_ready;                                                          // cmd_mux_035:sink2_ready -> cmd_demux_004:src33_ready
	wire   [50:0] cmd_demux_004_src33_channel;                                                        // cmd_demux_004:src33_channel -> cmd_mux_035:sink2_channel
	wire          cmd_demux_004_src33_startofpacket;                                                  // cmd_demux_004:src33_startofpacket -> cmd_mux_035:sink2_startofpacket
	wire          cmd_demux_004_src33_endofpacket;                                                    // cmd_demux_004:src33_endofpacket -> cmd_mux_035:sink2_endofpacket
	wire          cmd_demux_004_src34_valid;                                                          // cmd_demux_004:src34_valid -> cmd_mux_036:sink2_valid
	wire  [134:0] cmd_demux_004_src34_data;                                                           // cmd_demux_004:src34_data -> cmd_mux_036:sink2_data
	wire          cmd_demux_004_src34_ready;                                                          // cmd_mux_036:sink2_ready -> cmd_demux_004:src34_ready
	wire   [50:0] cmd_demux_004_src34_channel;                                                        // cmd_demux_004:src34_channel -> cmd_mux_036:sink2_channel
	wire          cmd_demux_004_src34_startofpacket;                                                  // cmd_demux_004:src34_startofpacket -> cmd_mux_036:sink2_startofpacket
	wire          cmd_demux_004_src34_endofpacket;                                                    // cmd_demux_004:src34_endofpacket -> cmd_mux_036:sink2_endofpacket
	wire          cmd_demux_004_src35_valid;                                                          // cmd_demux_004:src35_valid -> cmd_mux_037:sink2_valid
	wire  [134:0] cmd_demux_004_src35_data;                                                           // cmd_demux_004:src35_data -> cmd_mux_037:sink2_data
	wire          cmd_demux_004_src35_ready;                                                          // cmd_mux_037:sink2_ready -> cmd_demux_004:src35_ready
	wire   [50:0] cmd_demux_004_src35_channel;                                                        // cmd_demux_004:src35_channel -> cmd_mux_037:sink2_channel
	wire          cmd_demux_004_src35_startofpacket;                                                  // cmd_demux_004:src35_startofpacket -> cmd_mux_037:sink2_startofpacket
	wire          cmd_demux_004_src35_endofpacket;                                                    // cmd_demux_004:src35_endofpacket -> cmd_mux_037:sink2_endofpacket
	wire          cmd_demux_004_src36_valid;                                                          // cmd_demux_004:src36_valid -> cmd_mux_038:sink2_valid
	wire  [134:0] cmd_demux_004_src36_data;                                                           // cmd_demux_004:src36_data -> cmd_mux_038:sink2_data
	wire          cmd_demux_004_src36_ready;                                                          // cmd_mux_038:sink2_ready -> cmd_demux_004:src36_ready
	wire   [50:0] cmd_demux_004_src36_channel;                                                        // cmd_demux_004:src36_channel -> cmd_mux_038:sink2_channel
	wire          cmd_demux_004_src36_startofpacket;                                                  // cmd_demux_004:src36_startofpacket -> cmd_mux_038:sink2_startofpacket
	wire          cmd_demux_004_src36_endofpacket;                                                    // cmd_demux_004:src36_endofpacket -> cmd_mux_038:sink2_endofpacket
	wire          cmd_demux_004_src37_valid;                                                          // cmd_demux_004:src37_valid -> cmd_mux_039:sink2_valid
	wire  [134:0] cmd_demux_004_src37_data;                                                           // cmd_demux_004:src37_data -> cmd_mux_039:sink2_data
	wire          cmd_demux_004_src37_ready;                                                          // cmd_mux_039:sink2_ready -> cmd_demux_004:src37_ready
	wire   [50:0] cmd_demux_004_src37_channel;                                                        // cmd_demux_004:src37_channel -> cmd_mux_039:sink2_channel
	wire          cmd_demux_004_src37_startofpacket;                                                  // cmd_demux_004:src37_startofpacket -> cmd_mux_039:sink2_startofpacket
	wire          cmd_demux_004_src37_endofpacket;                                                    // cmd_demux_004:src37_endofpacket -> cmd_mux_039:sink2_endofpacket
	wire          cmd_demux_004_src38_valid;                                                          // cmd_demux_004:src38_valid -> cmd_mux_040:sink2_valid
	wire  [134:0] cmd_demux_004_src38_data;                                                           // cmd_demux_004:src38_data -> cmd_mux_040:sink2_data
	wire          cmd_demux_004_src38_ready;                                                          // cmd_mux_040:sink2_ready -> cmd_demux_004:src38_ready
	wire   [50:0] cmd_demux_004_src38_channel;                                                        // cmd_demux_004:src38_channel -> cmd_mux_040:sink2_channel
	wire          cmd_demux_004_src38_startofpacket;                                                  // cmd_demux_004:src38_startofpacket -> cmd_mux_040:sink2_startofpacket
	wire          cmd_demux_004_src38_endofpacket;                                                    // cmd_demux_004:src38_endofpacket -> cmd_mux_040:sink2_endofpacket
	wire          cmd_demux_004_src39_valid;                                                          // cmd_demux_004:src39_valid -> cmd_mux_041:sink2_valid
	wire  [134:0] cmd_demux_004_src39_data;                                                           // cmd_demux_004:src39_data -> cmd_mux_041:sink2_data
	wire          cmd_demux_004_src39_ready;                                                          // cmd_mux_041:sink2_ready -> cmd_demux_004:src39_ready
	wire   [50:0] cmd_demux_004_src39_channel;                                                        // cmd_demux_004:src39_channel -> cmd_mux_041:sink2_channel
	wire          cmd_demux_004_src39_startofpacket;                                                  // cmd_demux_004:src39_startofpacket -> cmd_mux_041:sink2_startofpacket
	wire          cmd_demux_004_src39_endofpacket;                                                    // cmd_demux_004:src39_endofpacket -> cmd_mux_041:sink2_endofpacket
	wire          cmd_demux_004_src40_valid;                                                          // cmd_demux_004:src40_valid -> cmd_mux_042:sink2_valid
	wire  [134:0] cmd_demux_004_src40_data;                                                           // cmd_demux_004:src40_data -> cmd_mux_042:sink2_data
	wire          cmd_demux_004_src40_ready;                                                          // cmd_mux_042:sink2_ready -> cmd_demux_004:src40_ready
	wire   [50:0] cmd_demux_004_src40_channel;                                                        // cmd_demux_004:src40_channel -> cmd_mux_042:sink2_channel
	wire          cmd_demux_004_src40_startofpacket;                                                  // cmd_demux_004:src40_startofpacket -> cmd_mux_042:sink2_startofpacket
	wire          cmd_demux_004_src40_endofpacket;                                                    // cmd_demux_004:src40_endofpacket -> cmd_mux_042:sink2_endofpacket
	wire          cmd_demux_004_src41_valid;                                                          // cmd_demux_004:src41_valid -> cmd_mux_043:sink2_valid
	wire  [134:0] cmd_demux_004_src41_data;                                                           // cmd_demux_004:src41_data -> cmd_mux_043:sink2_data
	wire          cmd_demux_004_src41_ready;                                                          // cmd_mux_043:sink2_ready -> cmd_demux_004:src41_ready
	wire   [50:0] cmd_demux_004_src41_channel;                                                        // cmd_demux_004:src41_channel -> cmd_mux_043:sink2_channel
	wire          cmd_demux_004_src41_startofpacket;                                                  // cmd_demux_004:src41_startofpacket -> cmd_mux_043:sink2_startofpacket
	wire          cmd_demux_004_src41_endofpacket;                                                    // cmd_demux_004:src41_endofpacket -> cmd_mux_043:sink2_endofpacket
	wire          cmd_demux_004_src42_valid;                                                          // cmd_demux_004:src42_valid -> cmd_mux_044:sink2_valid
	wire  [134:0] cmd_demux_004_src42_data;                                                           // cmd_demux_004:src42_data -> cmd_mux_044:sink2_data
	wire          cmd_demux_004_src42_ready;                                                          // cmd_mux_044:sink2_ready -> cmd_demux_004:src42_ready
	wire   [50:0] cmd_demux_004_src42_channel;                                                        // cmd_demux_004:src42_channel -> cmd_mux_044:sink2_channel
	wire          cmd_demux_004_src42_startofpacket;                                                  // cmd_demux_004:src42_startofpacket -> cmd_mux_044:sink2_startofpacket
	wire          cmd_demux_004_src42_endofpacket;                                                    // cmd_demux_004:src42_endofpacket -> cmd_mux_044:sink2_endofpacket
	wire          cmd_demux_004_src43_valid;                                                          // cmd_demux_004:src43_valid -> cmd_mux_045:sink2_valid
	wire  [134:0] cmd_demux_004_src43_data;                                                           // cmd_demux_004:src43_data -> cmd_mux_045:sink2_data
	wire          cmd_demux_004_src43_ready;                                                          // cmd_mux_045:sink2_ready -> cmd_demux_004:src43_ready
	wire   [50:0] cmd_demux_004_src43_channel;                                                        // cmd_demux_004:src43_channel -> cmd_mux_045:sink2_channel
	wire          cmd_demux_004_src43_startofpacket;                                                  // cmd_demux_004:src43_startofpacket -> cmd_mux_045:sink2_startofpacket
	wire          cmd_demux_004_src43_endofpacket;                                                    // cmd_demux_004:src43_endofpacket -> cmd_mux_045:sink2_endofpacket
	wire          cmd_demux_004_src44_valid;                                                          // cmd_demux_004:src44_valid -> cmd_mux_046:sink2_valid
	wire  [134:0] cmd_demux_004_src44_data;                                                           // cmd_demux_004:src44_data -> cmd_mux_046:sink2_data
	wire          cmd_demux_004_src44_ready;                                                          // cmd_mux_046:sink2_ready -> cmd_demux_004:src44_ready
	wire   [50:0] cmd_demux_004_src44_channel;                                                        // cmd_demux_004:src44_channel -> cmd_mux_046:sink2_channel
	wire          cmd_demux_004_src44_startofpacket;                                                  // cmd_demux_004:src44_startofpacket -> cmd_mux_046:sink2_startofpacket
	wire          cmd_demux_004_src44_endofpacket;                                                    // cmd_demux_004:src44_endofpacket -> cmd_mux_046:sink2_endofpacket
	wire          cmd_demux_004_src45_valid;                                                          // cmd_demux_004:src45_valid -> cmd_mux_047:sink2_valid
	wire  [134:0] cmd_demux_004_src45_data;                                                           // cmd_demux_004:src45_data -> cmd_mux_047:sink2_data
	wire          cmd_demux_004_src45_ready;                                                          // cmd_mux_047:sink2_ready -> cmd_demux_004:src45_ready
	wire   [50:0] cmd_demux_004_src45_channel;                                                        // cmd_demux_004:src45_channel -> cmd_mux_047:sink2_channel
	wire          cmd_demux_004_src45_startofpacket;                                                  // cmd_demux_004:src45_startofpacket -> cmd_mux_047:sink2_startofpacket
	wire          cmd_demux_004_src45_endofpacket;                                                    // cmd_demux_004:src45_endofpacket -> cmd_mux_047:sink2_endofpacket
	wire          cmd_demux_004_src46_valid;                                                          // cmd_demux_004:src46_valid -> cmd_mux_048:sink2_valid
	wire  [134:0] cmd_demux_004_src46_data;                                                           // cmd_demux_004:src46_data -> cmd_mux_048:sink2_data
	wire          cmd_demux_004_src46_ready;                                                          // cmd_mux_048:sink2_ready -> cmd_demux_004:src46_ready
	wire   [50:0] cmd_demux_004_src46_channel;                                                        // cmd_demux_004:src46_channel -> cmd_mux_048:sink2_channel
	wire          cmd_demux_004_src46_startofpacket;                                                  // cmd_demux_004:src46_startofpacket -> cmd_mux_048:sink2_startofpacket
	wire          cmd_demux_004_src46_endofpacket;                                                    // cmd_demux_004:src46_endofpacket -> cmd_mux_048:sink2_endofpacket
	wire          cmd_demux_004_src47_valid;                                                          // cmd_demux_004:src47_valid -> cmd_mux_049:sink2_valid
	wire  [134:0] cmd_demux_004_src47_data;                                                           // cmd_demux_004:src47_data -> cmd_mux_049:sink2_data
	wire          cmd_demux_004_src47_ready;                                                          // cmd_mux_049:sink2_ready -> cmd_demux_004:src47_ready
	wire   [50:0] cmd_demux_004_src47_channel;                                                        // cmd_demux_004:src47_channel -> cmd_mux_049:sink2_channel
	wire          cmd_demux_004_src47_startofpacket;                                                  // cmd_demux_004:src47_startofpacket -> cmd_mux_049:sink2_startofpacket
	wire          cmd_demux_004_src47_endofpacket;                                                    // cmd_demux_004:src47_endofpacket -> cmd_mux_049:sink2_endofpacket
	wire          cmd_demux_004_src48_valid;                                                          // cmd_demux_004:src48_valid -> cmd_mux_050:sink2_valid
	wire  [134:0] cmd_demux_004_src48_data;                                                           // cmd_demux_004:src48_data -> cmd_mux_050:sink2_data
	wire          cmd_demux_004_src48_ready;                                                          // cmd_mux_050:sink2_ready -> cmd_demux_004:src48_ready
	wire   [50:0] cmd_demux_004_src48_channel;                                                        // cmd_demux_004:src48_channel -> cmd_mux_050:sink2_channel
	wire          cmd_demux_004_src48_startofpacket;                                                  // cmd_demux_004:src48_startofpacket -> cmd_mux_050:sink2_startofpacket
	wire          cmd_demux_004_src48_endofpacket;                                                    // cmd_demux_004:src48_endofpacket -> cmd_mux_050:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [170:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [50:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [170:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                               // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [50:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [134:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire   [50:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_003:sink0_valid
	wire  [134:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src1_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_001:src1_ready
	wire   [50:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                           // rsp_demux_001:src2_valid -> rsp_mux_004:sink0_valid
	wire  [134:0] rsp_demux_001_src2_data;                                                            // rsp_demux_001:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_001_src2_ready;                                                           // rsp_mux_004:sink0_ready -> rsp_demux_001:src2_ready
	wire   [50:0] rsp_demux_001_src2_channel;                                                         // rsp_demux_001:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                                   // rsp_demux_001:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                     // rsp_demux_001:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [134:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire   [50:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_003:sink1_valid
	wire  [134:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_002_src1_ready;                                                           // rsp_mux_003:sink1_ready -> rsp_demux_002:src1_ready
	wire   [50:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_002_src2_valid;                                                           // rsp_demux_002:src2_valid -> rsp_mux_004:sink1_valid
	wire  [134:0] rsp_demux_002_src2_data;                                                            // rsp_demux_002:src2_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_002_src2_ready;                                                           // rsp_mux_004:sink1_ready -> rsp_demux_002:src2_ready
	wire   [50:0] rsp_demux_002_src2_channel;                                                         // rsp_demux_002:src2_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                                   // rsp_demux_002:src2_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                     // rsp_demux_002:src2_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [134:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire   [50:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [134:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire   [50:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> rsp_mux_003:sink2_valid
	wire  [134:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_004_src1_ready;                                                           // rsp_mux_003:sink2_ready -> rsp_demux_004:src1_ready
	wire   [50:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                           // rsp_demux_004:src2_valid -> rsp_mux_004:sink2_valid
	wire  [134:0] rsp_demux_004_src2_data;                                                            // rsp_demux_004:src2_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_004_src2_ready;                                                           // rsp_mux_004:sink2_ready -> rsp_demux_004:src2_ready
	wire   [50:0] rsp_demux_004_src2_channel;                                                         // rsp_demux_004:src2_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_004_src2_startofpacket;                                                   // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                     // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux_002:sink5_valid
	wire  [134:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux_002:sink5_ready -> rsp_demux_005:src0_ready
	wire   [50:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> rsp_mux_003:sink3_valid
	wire  [134:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_005_src1_ready;                                                           // rsp_mux_003:sink3_ready -> rsp_demux_005:src1_ready
	wire   [50:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                           // rsp_demux_005:src2_valid -> rsp_mux_004:sink3_valid
	wire  [134:0] rsp_demux_005_src2_data;                                                            // rsp_demux_005:src2_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_005_src2_ready;                                                           // rsp_mux_004:sink3_ready -> rsp_demux_005:src2_ready
	wire   [50:0] rsp_demux_005_src2_channel;                                                         // rsp_demux_005:src2_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_005_src2_startofpacket;                                                   // rsp_demux_005:src2_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                     // rsp_demux_005:src2_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux_002:sink6_valid
	wire  [134:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux_002:sink6_ready -> rsp_demux_006:src0_ready
	wire   [50:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                           // rsp_demux_006:src1_valid -> rsp_mux_003:sink4_valid
	wire  [134:0] rsp_demux_006_src1_data;                                                            // rsp_demux_006:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_006_src1_ready;                                                           // rsp_mux_003:sink4_ready -> rsp_demux_006:src1_ready
	wire   [50:0] rsp_demux_006_src1_channel;                                                         // rsp_demux_006:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_006_src1_startofpacket;                                                   // rsp_demux_006:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                     // rsp_demux_006:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                           // rsp_demux_006:src2_valid -> rsp_mux_004:sink4_valid
	wire  [134:0] rsp_demux_006_src2_data;                                                            // rsp_demux_006:src2_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_006_src2_ready;                                                           // rsp_mux_004:sink4_ready -> rsp_demux_006:src2_ready
	wire   [50:0] rsp_demux_006_src2_channel;                                                         // rsp_demux_006:src2_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_006_src2_startofpacket;                                                   // rsp_demux_006:src2_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                     // rsp_demux_006:src2_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux_002:sink7_valid
	wire  [134:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux_002:sink7_ready -> rsp_demux_007:src0_ready
	wire   [50:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                           // rsp_demux_007:src1_valid -> rsp_mux_003:sink5_valid
	wire  [134:0] rsp_demux_007_src1_data;                                                            // rsp_demux_007:src1_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_007_src1_ready;                                                           // rsp_mux_003:sink5_ready -> rsp_demux_007:src1_ready
	wire   [50:0] rsp_demux_007_src1_channel;                                                         // rsp_demux_007:src1_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_007_src1_startofpacket;                                                   // rsp_demux_007:src1_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                     // rsp_demux_007:src1_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_007_src2_valid;                                                           // rsp_demux_007:src2_valid -> rsp_mux_004:sink5_valid
	wire  [134:0] rsp_demux_007_src2_data;                                                            // rsp_demux_007:src2_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_007_src2_ready;                                                           // rsp_mux_004:sink5_ready -> rsp_demux_007:src2_ready
	wire   [50:0] rsp_demux_007_src2_channel;                                                         // rsp_demux_007:src2_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_007_src2_startofpacket;                                                   // rsp_demux_007:src2_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                     // rsp_demux_007:src2_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux_002:sink8_valid
	wire  [134:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux_002:sink8_ready -> rsp_demux_008:src0_ready
	wire   [50:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> rsp_mux_003:sink6_valid
	wire  [134:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_008_src1_ready;                                                           // rsp_mux_003:sink6_ready -> rsp_demux_008:src1_ready
	wire   [50:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                           // rsp_demux_008:src2_valid -> rsp_mux_004:sink6_valid
	wire  [134:0] rsp_demux_008_src2_data;                                                            // rsp_demux_008:src2_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_008_src2_ready;                                                           // rsp_mux_004:sink6_ready -> rsp_demux_008:src2_ready
	wire   [50:0] rsp_demux_008_src2_channel;                                                         // rsp_demux_008:src2_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_008_src2_startofpacket;                                                   // rsp_demux_008:src2_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                     // rsp_demux_008:src2_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux_002:sink9_valid
	wire  [134:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux_002:sink9_ready -> rsp_demux_009:src0_ready
	wire   [50:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                           // rsp_demux_009:src1_valid -> rsp_mux_003:sink7_valid
	wire  [134:0] rsp_demux_009_src1_data;                                                            // rsp_demux_009:src1_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_009_src1_ready;                                                           // rsp_mux_003:sink7_ready -> rsp_demux_009:src1_ready
	wire   [50:0] rsp_demux_009_src1_channel;                                                         // rsp_demux_009:src1_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_009_src1_startofpacket;                                                   // rsp_demux_009:src1_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                     // rsp_demux_009:src1_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_009_src2_valid;                                                           // rsp_demux_009:src2_valid -> rsp_mux_004:sink7_valid
	wire  [134:0] rsp_demux_009_src2_data;                                                            // rsp_demux_009:src2_data -> rsp_mux_004:sink7_data
	wire          rsp_demux_009_src2_ready;                                                           // rsp_mux_004:sink7_ready -> rsp_demux_009:src2_ready
	wire   [50:0] rsp_demux_009_src2_channel;                                                         // rsp_demux_009:src2_channel -> rsp_mux_004:sink7_channel
	wire          rsp_demux_009_src2_startofpacket;                                                   // rsp_demux_009:src2_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                     // rsp_demux_009:src2_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux_002:sink10_valid
	wire  [134:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux_002:sink10_ready -> rsp_demux_010:src0_ready
	wire   [50:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                           // rsp_demux_010:src1_valid -> rsp_mux_003:sink8_valid
	wire  [134:0] rsp_demux_010_src1_data;                                                            // rsp_demux_010:src1_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_010_src1_ready;                                                           // rsp_mux_003:sink8_ready -> rsp_demux_010:src1_ready
	wire   [50:0] rsp_demux_010_src1_channel;                                                         // rsp_demux_010:src1_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_010_src1_startofpacket;                                                   // rsp_demux_010:src1_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                     // rsp_demux_010:src1_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_010_src2_valid;                                                           // rsp_demux_010:src2_valid -> rsp_mux_004:sink8_valid
	wire  [134:0] rsp_demux_010_src2_data;                                                            // rsp_demux_010:src2_data -> rsp_mux_004:sink8_data
	wire          rsp_demux_010_src2_ready;                                                           // rsp_mux_004:sink8_ready -> rsp_demux_010:src2_ready
	wire   [50:0] rsp_demux_010_src2_channel;                                                         // rsp_demux_010:src2_channel -> rsp_mux_004:sink8_channel
	wire          rsp_demux_010_src2_startofpacket;                                                   // rsp_demux_010:src2_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                     // rsp_demux_010:src2_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux_002:sink11_valid
	wire  [134:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux_002:sink11_ready -> rsp_demux_011:src0_ready
	wire   [50:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                           // rsp_demux_011:src1_valid -> rsp_mux_003:sink9_valid
	wire  [134:0] rsp_demux_011_src1_data;                                                            // rsp_demux_011:src1_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_011_src1_ready;                                                           // rsp_mux_003:sink9_ready -> rsp_demux_011:src1_ready
	wire   [50:0] rsp_demux_011_src1_channel;                                                         // rsp_demux_011:src1_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_011_src1_startofpacket;                                                   // rsp_demux_011:src1_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                     // rsp_demux_011:src1_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_011_src2_valid;                                                           // rsp_demux_011:src2_valid -> rsp_mux_004:sink9_valid
	wire  [134:0] rsp_demux_011_src2_data;                                                            // rsp_demux_011:src2_data -> rsp_mux_004:sink9_data
	wire          rsp_demux_011_src2_ready;                                                           // rsp_mux_004:sink9_ready -> rsp_demux_011:src2_ready
	wire   [50:0] rsp_demux_011_src2_channel;                                                         // rsp_demux_011:src2_channel -> rsp_mux_004:sink9_channel
	wire          rsp_demux_011_src2_startofpacket;                                                   // rsp_demux_011:src2_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                     // rsp_demux_011:src2_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux_002:sink12_valid
	wire  [134:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux_002:sink12_ready -> rsp_demux_012:src0_ready
	wire   [50:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                           // rsp_demux_012:src1_valid -> rsp_mux_003:sink10_valid
	wire  [134:0] rsp_demux_012_src1_data;                                                            // rsp_demux_012:src1_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_012_src1_ready;                                                           // rsp_mux_003:sink10_ready -> rsp_demux_012:src1_ready
	wire   [50:0] rsp_demux_012_src1_channel;                                                         // rsp_demux_012:src1_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_012_src1_startofpacket;                                                   // rsp_demux_012:src1_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                     // rsp_demux_012:src1_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_012_src2_valid;                                                           // rsp_demux_012:src2_valid -> rsp_mux_004:sink10_valid
	wire  [134:0] rsp_demux_012_src2_data;                                                            // rsp_demux_012:src2_data -> rsp_mux_004:sink10_data
	wire          rsp_demux_012_src2_ready;                                                           // rsp_mux_004:sink10_ready -> rsp_demux_012:src2_ready
	wire   [50:0] rsp_demux_012_src2_channel;                                                         // rsp_demux_012:src2_channel -> rsp_mux_004:sink10_channel
	wire          rsp_demux_012_src2_startofpacket;                                                   // rsp_demux_012:src2_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                                     // rsp_demux_012:src2_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux_002:sink13_valid
	wire  [134:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux_002:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux_002:sink13_ready -> rsp_demux_013:src0_ready
	wire   [50:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux_002:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                           // rsp_demux_013:src1_valid -> rsp_mux_003:sink11_valid
	wire  [134:0] rsp_demux_013_src1_data;                                                            // rsp_demux_013:src1_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_013_src1_ready;                                                           // rsp_mux_003:sink11_ready -> rsp_demux_013:src1_ready
	wire   [50:0] rsp_demux_013_src1_channel;                                                         // rsp_demux_013:src1_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_013_src1_startofpacket;                                                   // rsp_demux_013:src1_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                     // rsp_demux_013:src1_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_013_src2_valid;                                                           // rsp_demux_013:src2_valid -> rsp_mux_004:sink11_valid
	wire  [134:0] rsp_demux_013_src2_data;                                                            // rsp_demux_013:src2_data -> rsp_mux_004:sink11_data
	wire          rsp_demux_013_src2_ready;                                                           // rsp_mux_004:sink11_ready -> rsp_demux_013:src2_ready
	wire   [50:0] rsp_demux_013_src2_channel;                                                         // rsp_demux_013:src2_channel -> rsp_mux_004:sink11_channel
	wire          rsp_demux_013_src2_startofpacket;                                                   // rsp_demux_013:src2_startofpacket -> rsp_mux_004:sink11_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                     // rsp_demux_013:src2_endofpacket -> rsp_mux_004:sink11_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux_002:sink14_valid
	wire  [134:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux_002:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux_002:sink14_ready -> rsp_demux_014:src0_ready
	wire   [50:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux_002:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux_002:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux_002:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                           // rsp_demux_014:src1_valid -> rsp_mux_003:sink12_valid
	wire  [134:0] rsp_demux_014_src1_data;                                                            // rsp_demux_014:src1_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_014_src1_ready;                                                           // rsp_mux_003:sink12_ready -> rsp_demux_014:src1_ready
	wire   [50:0] rsp_demux_014_src1_channel;                                                         // rsp_demux_014:src1_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_014_src1_startofpacket;                                                   // rsp_demux_014:src1_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                     // rsp_demux_014:src1_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          rsp_demux_014_src2_valid;                                                           // rsp_demux_014:src2_valid -> rsp_mux_004:sink12_valid
	wire  [134:0] rsp_demux_014_src2_data;                                                            // rsp_demux_014:src2_data -> rsp_mux_004:sink12_data
	wire          rsp_demux_014_src2_ready;                                                           // rsp_mux_004:sink12_ready -> rsp_demux_014:src2_ready
	wire   [50:0] rsp_demux_014_src2_channel;                                                         // rsp_demux_014:src2_channel -> rsp_mux_004:sink12_channel
	wire          rsp_demux_014_src2_startofpacket;                                                   // rsp_demux_014:src2_startofpacket -> rsp_mux_004:sink12_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                     // rsp_demux_014:src2_endofpacket -> rsp_mux_004:sink12_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux_002:sink15_valid
	wire  [134:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux_002:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux_002:sink15_ready -> rsp_demux_015:src0_ready
	wire   [50:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux_002:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux_002:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux_002:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                           // rsp_demux_015:src1_valid -> rsp_mux_003:sink13_valid
	wire  [134:0] rsp_demux_015_src1_data;                                                            // rsp_demux_015:src1_data -> rsp_mux_003:sink13_data
	wire          rsp_demux_015_src1_ready;                                                           // rsp_mux_003:sink13_ready -> rsp_demux_015:src1_ready
	wire   [50:0] rsp_demux_015_src1_channel;                                                         // rsp_demux_015:src1_channel -> rsp_mux_003:sink13_channel
	wire          rsp_demux_015_src1_startofpacket;                                                   // rsp_demux_015:src1_startofpacket -> rsp_mux_003:sink13_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                     // rsp_demux_015:src1_endofpacket -> rsp_mux_003:sink13_endofpacket
	wire          rsp_demux_015_src2_valid;                                                           // rsp_demux_015:src2_valid -> rsp_mux_004:sink13_valid
	wire  [134:0] rsp_demux_015_src2_data;                                                            // rsp_demux_015:src2_data -> rsp_mux_004:sink13_data
	wire          rsp_demux_015_src2_ready;                                                           // rsp_mux_004:sink13_ready -> rsp_demux_015:src2_ready
	wire   [50:0] rsp_demux_015_src2_channel;                                                         // rsp_demux_015:src2_channel -> rsp_mux_004:sink13_channel
	wire          rsp_demux_015_src2_startofpacket;                                                   // rsp_demux_015:src2_startofpacket -> rsp_mux_004:sink13_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                     // rsp_demux_015:src2_endofpacket -> rsp_mux_004:sink13_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux_002:sink16_valid
	wire  [134:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux_002:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux_002:sink16_ready -> rsp_demux_016:src0_ready
	wire   [50:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux_002:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux_002:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux_002:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                           // rsp_demux_016:src1_valid -> rsp_mux_003:sink14_valid
	wire  [134:0] rsp_demux_016_src1_data;                                                            // rsp_demux_016:src1_data -> rsp_mux_003:sink14_data
	wire          rsp_demux_016_src1_ready;                                                           // rsp_mux_003:sink14_ready -> rsp_demux_016:src1_ready
	wire   [50:0] rsp_demux_016_src1_channel;                                                         // rsp_demux_016:src1_channel -> rsp_mux_003:sink14_channel
	wire          rsp_demux_016_src1_startofpacket;                                                   // rsp_demux_016:src1_startofpacket -> rsp_mux_003:sink14_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                     // rsp_demux_016:src1_endofpacket -> rsp_mux_003:sink14_endofpacket
	wire          rsp_demux_016_src2_valid;                                                           // rsp_demux_016:src2_valid -> rsp_mux_004:sink14_valid
	wire  [134:0] rsp_demux_016_src2_data;                                                            // rsp_demux_016:src2_data -> rsp_mux_004:sink14_data
	wire          rsp_demux_016_src2_ready;                                                           // rsp_mux_004:sink14_ready -> rsp_demux_016:src2_ready
	wire   [50:0] rsp_demux_016_src2_channel;                                                         // rsp_demux_016:src2_channel -> rsp_mux_004:sink14_channel
	wire          rsp_demux_016_src2_startofpacket;                                                   // rsp_demux_016:src2_startofpacket -> rsp_mux_004:sink14_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                     // rsp_demux_016:src2_endofpacket -> rsp_mux_004:sink14_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux_002:sink17_valid
	wire  [134:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux_002:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux_002:sink17_ready -> rsp_demux_017:src0_ready
	wire   [50:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux_002:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux_002:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux_002:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                           // rsp_demux_017:src1_valid -> rsp_mux_003:sink15_valid
	wire  [134:0] rsp_demux_017_src1_data;                                                            // rsp_demux_017:src1_data -> rsp_mux_003:sink15_data
	wire          rsp_demux_017_src1_ready;                                                           // rsp_mux_003:sink15_ready -> rsp_demux_017:src1_ready
	wire   [50:0] rsp_demux_017_src1_channel;                                                         // rsp_demux_017:src1_channel -> rsp_mux_003:sink15_channel
	wire          rsp_demux_017_src1_startofpacket;                                                   // rsp_demux_017:src1_startofpacket -> rsp_mux_003:sink15_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                     // rsp_demux_017:src1_endofpacket -> rsp_mux_003:sink15_endofpacket
	wire          rsp_demux_017_src2_valid;                                                           // rsp_demux_017:src2_valid -> rsp_mux_004:sink15_valid
	wire  [134:0] rsp_demux_017_src2_data;                                                            // rsp_demux_017:src2_data -> rsp_mux_004:sink15_data
	wire          rsp_demux_017_src2_ready;                                                           // rsp_mux_004:sink15_ready -> rsp_demux_017:src2_ready
	wire   [50:0] rsp_demux_017_src2_channel;                                                         // rsp_demux_017:src2_channel -> rsp_mux_004:sink15_channel
	wire          rsp_demux_017_src2_startofpacket;                                                   // rsp_demux_017:src2_startofpacket -> rsp_mux_004:sink15_startofpacket
	wire          rsp_demux_017_src2_endofpacket;                                                     // rsp_demux_017:src2_endofpacket -> rsp_mux_004:sink15_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux_002:sink18_valid
	wire  [134:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux_002:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux_002:sink18_ready -> rsp_demux_018:src0_ready
	wire   [50:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux_002:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux_002:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux_002:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                           // rsp_demux_018:src1_valid -> rsp_mux_003:sink16_valid
	wire  [134:0] rsp_demux_018_src1_data;                                                            // rsp_demux_018:src1_data -> rsp_mux_003:sink16_data
	wire          rsp_demux_018_src1_ready;                                                           // rsp_mux_003:sink16_ready -> rsp_demux_018:src1_ready
	wire   [50:0] rsp_demux_018_src1_channel;                                                         // rsp_demux_018:src1_channel -> rsp_mux_003:sink16_channel
	wire          rsp_demux_018_src1_startofpacket;                                                   // rsp_demux_018:src1_startofpacket -> rsp_mux_003:sink16_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                     // rsp_demux_018:src1_endofpacket -> rsp_mux_003:sink16_endofpacket
	wire          rsp_demux_018_src2_valid;                                                           // rsp_demux_018:src2_valid -> rsp_mux_004:sink16_valid
	wire  [134:0] rsp_demux_018_src2_data;                                                            // rsp_demux_018:src2_data -> rsp_mux_004:sink16_data
	wire          rsp_demux_018_src2_ready;                                                           // rsp_mux_004:sink16_ready -> rsp_demux_018:src2_ready
	wire   [50:0] rsp_demux_018_src2_channel;                                                         // rsp_demux_018:src2_channel -> rsp_mux_004:sink16_channel
	wire          rsp_demux_018_src2_startofpacket;                                                   // rsp_demux_018:src2_startofpacket -> rsp_mux_004:sink16_startofpacket
	wire          rsp_demux_018_src2_endofpacket;                                                     // rsp_demux_018:src2_endofpacket -> rsp_mux_004:sink16_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux_002:sink19_valid
	wire  [134:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux_002:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux_002:sink19_ready -> rsp_demux_019:src0_ready
	wire   [50:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux_002:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux_002:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux_002:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                           // rsp_demux_019:src1_valid -> rsp_mux_003:sink17_valid
	wire  [134:0] rsp_demux_019_src1_data;                                                            // rsp_demux_019:src1_data -> rsp_mux_003:sink17_data
	wire          rsp_demux_019_src1_ready;                                                           // rsp_mux_003:sink17_ready -> rsp_demux_019:src1_ready
	wire   [50:0] rsp_demux_019_src1_channel;                                                         // rsp_demux_019:src1_channel -> rsp_mux_003:sink17_channel
	wire          rsp_demux_019_src1_startofpacket;                                                   // rsp_demux_019:src1_startofpacket -> rsp_mux_003:sink17_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                     // rsp_demux_019:src1_endofpacket -> rsp_mux_003:sink17_endofpacket
	wire          rsp_demux_019_src2_valid;                                                           // rsp_demux_019:src2_valid -> rsp_mux_004:sink17_valid
	wire  [134:0] rsp_demux_019_src2_data;                                                            // rsp_demux_019:src2_data -> rsp_mux_004:sink17_data
	wire          rsp_demux_019_src2_ready;                                                           // rsp_mux_004:sink17_ready -> rsp_demux_019:src2_ready
	wire   [50:0] rsp_demux_019_src2_channel;                                                         // rsp_demux_019:src2_channel -> rsp_mux_004:sink17_channel
	wire          rsp_demux_019_src2_startofpacket;                                                   // rsp_demux_019:src2_startofpacket -> rsp_mux_004:sink17_startofpacket
	wire          rsp_demux_019_src2_endofpacket;                                                     // rsp_demux_019:src2_endofpacket -> rsp_mux_004:sink17_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux_002:sink20_valid
	wire  [134:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux_002:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux_002:sink20_ready -> rsp_demux_020:src0_ready
	wire   [50:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux_002:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux_002:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux_002:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                           // rsp_demux_020:src1_valid -> rsp_mux_003:sink18_valid
	wire  [134:0] rsp_demux_020_src1_data;                                                            // rsp_demux_020:src1_data -> rsp_mux_003:sink18_data
	wire          rsp_demux_020_src1_ready;                                                           // rsp_mux_003:sink18_ready -> rsp_demux_020:src1_ready
	wire   [50:0] rsp_demux_020_src1_channel;                                                         // rsp_demux_020:src1_channel -> rsp_mux_003:sink18_channel
	wire          rsp_demux_020_src1_startofpacket;                                                   // rsp_demux_020:src1_startofpacket -> rsp_mux_003:sink18_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                     // rsp_demux_020:src1_endofpacket -> rsp_mux_003:sink18_endofpacket
	wire          rsp_demux_020_src2_valid;                                                           // rsp_demux_020:src2_valid -> rsp_mux_004:sink18_valid
	wire  [134:0] rsp_demux_020_src2_data;                                                            // rsp_demux_020:src2_data -> rsp_mux_004:sink18_data
	wire          rsp_demux_020_src2_ready;                                                           // rsp_mux_004:sink18_ready -> rsp_demux_020:src2_ready
	wire   [50:0] rsp_demux_020_src2_channel;                                                         // rsp_demux_020:src2_channel -> rsp_mux_004:sink18_channel
	wire          rsp_demux_020_src2_startofpacket;                                                   // rsp_demux_020:src2_startofpacket -> rsp_mux_004:sink18_startofpacket
	wire          rsp_demux_020_src2_endofpacket;                                                     // rsp_demux_020:src2_endofpacket -> rsp_mux_004:sink18_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux_002:sink21_valid
	wire  [134:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux_002:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux_002:sink21_ready -> rsp_demux_021:src0_ready
	wire   [50:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux_002:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux_002:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux_002:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                           // rsp_demux_021:src1_valid -> rsp_mux_003:sink19_valid
	wire  [134:0] rsp_demux_021_src1_data;                                                            // rsp_demux_021:src1_data -> rsp_mux_003:sink19_data
	wire          rsp_demux_021_src1_ready;                                                           // rsp_mux_003:sink19_ready -> rsp_demux_021:src1_ready
	wire   [50:0] rsp_demux_021_src1_channel;                                                         // rsp_demux_021:src1_channel -> rsp_mux_003:sink19_channel
	wire          rsp_demux_021_src1_startofpacket;                                                   // rsp_demux_021:src1_startofpacket -> rsp_mux_003:sink19_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                     // rsp_demux_021:src1_endofpacket -> rsp_mux_003:sink19_endofpacket
	wire          rsp_demux_021_src2_valid;                                                           // rsp_demux_021:src2_valid -> rsp_mux_004:sink19_valid
	wire  [134:0] rsp_demux_021_src2_data;                                                            // rsp_demux_021:src2_data -> rsp_mux_004:sink19_data
	wire          rsp_demux_021_src2_ready;                                                           // rsp_mux_004:sink19_ready -> rsp_demux_021:src2_ready
	wire   [50:0] rsp_demux_021_src2_channel;                                                         // rsp_demux_021:src2_channel -> rsp_mux_004:sink19_channel
	wire          rsp_demux_021_src2_startofpacket;                                                   // rsp_demux_021:src2_startofpacket -> rsp_mux_004:sink19_startofpacket
	wire          rsp_demux_021_src2_endofpacket;                                                     // rsp_demux_021:src2_endofpacket -> rsp_mux_004:sink19_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux_002:sink22_valid
	wire  [134:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux_002:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux_002:sink22_ready -> rsp_demux_022:src0_ready
	wire   [50:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux_002:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux_002:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux_002:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                           // rsp_demux_022:src1_valid -> rsp_mux_003:sink20_valid
	wire  [134:0] rsp_demux_022_src1_data;                                                            // rsp_demux_022:src1_data -> rsp_mux_003:sink20_data
	wire          rsp_demux_022_src1_ready;                                                           // rsp_mux_003:sink20_ready -> rsp_demux_022:src1_ready
	wire   [50:0] rsp_demux_022_src1_channel;                                                         // rsp_demux_022:src1_channel -> rsp_mux_003:sink20_channel
	wire          rsp_demux_022_src1_startofpacket;                                                   // rsp_demux_022:src1_startofpacket -> rsp_mux_003:sink20_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                     // rsp_demux_022:src1_endofpacket -> rsp_mux_003:sink20_endofpacket
	wire          rsp_demux_022_src2_valid;                                                           // rsp_demux_022:src2_valid -> rsp_mux_004:sink20_valid
	wire  [134:0] rsp_demux_022_src2_data;                                                            // rsp_demux_022:src2_data -> rsp_mux_004:sink20_data
	wire          rsp_demux_022_src2_ready;                                                           // rsp_mux_004:sink20_ready -> rsp_demux_022:src2_ready
	wire   [50:0] rsp_demux_022_src2_channel;                                                         // rsp_demux_022:src2_channel -> rsp_mux_004:sink20_channel
	wire          rsp_demux_022_src2_startofpacket;                                                   // rsp_demux_022:src2_startofpacket -> rsp_mux_004:sink20_startofpacket
	wire          rsp_demux_022_src2_endofpacket;                                                     // rsp_demux_022:src2_endofpacket -> rsp_mux_004:sink20_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux_002:sink23_valid
	wire  [134:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux_002:sink23_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux_002:sink23_ready -> rsp_demux_023:src0_ready
	wire   [50:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux_002:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux_002:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux_002:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                           // rsp_demux_023:src1_valid -> rsp_mux_003:sink21_valid
	wire  [134:0] rsp_demux_023_src1_data;                                                            // rsp_demux_023:src1_data -> rsp_mux_003:sink21_data
	wire          rsp_demux_023_src1_ready;                                                           // rsp_mux_003:sink21_ready -> rsp_demux_023:src1_ready
	wire   [50:0] rsp_demux_023_src1_channel;                                                         // rsp_demux_023:src1_channel -> rsp_mux_003:sink21_channel
	wire          rsp_demux_023_src1_startofpacket;                                                   // rsp_demux_023:src1_startofpacket -> rsp_mux_003:sink21_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                     // rsp_demux_023:src1_endofpacket -> rsp_mux_003:sink21_endofpacket
	wire          rsp_demux_023_src2_valid;                                                           // rsp_demux_023:src2_valid -> rsp_mux_004:sink21_valid
	wire  [134:0] rsp_demux_023_src2_data;                                                            // rsp_demux_023:src2_data -> rsp_mux_004:sink21_data
	wire          rsp_demux_023_src2_ready;                                                           // rsp_mux_004:sink21_ready -> rsp_demux_023:src2_ready
	wire   [50:0] rsp_demux_023_src2_channel;                                                         // rsp_demux_023:src2_channel -> rsp_mux_004:sink21_channel
	wire          rsp_demux_023_src2_startofpacket;                                                   // rsp_demux_023:src2_startofpacket -> rsp_mux_004:sink21_startofpacket
	wire          rsp_demux_023_src2_endofpacket;                                                     // rsp_demux_023:src2_endofpacket -> rsp_mux_004:sink21_endofpacket
	wire          rsp_demux_024_src0_valid;                                                           // rsp_demux_024:src0_valid -> rsp_mux_002:sink24_valid
	wire  [134:0] rsp_demux_024_src0_data;                                                            // rsp_demux_024:src0_data -> rsp_mux_002:sink24_data
	wire          rsp_demux_024_src0_ready;                                                           // rsp_mux_002:sink24_ready -> rsp_demux_024:src0_ready
	wire   [50:0] rsp_demux_024_src0_channel;                                                         // rsp_demux_024:src0_channel -> rsp_mux_002:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                   // rsp_demux_024:src0_startofpacket -> rsp_mux_002:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                     // rsp_demux_024:src0_endofpacket -> rsp_mux_002:sink24_endofpacket
	wire          rsp_demux_024_src1_valid;                                                           // rsp_demux_024:src1_valid -> rsp_mux_003:sink22_valid
	wire  [134:0] rsp_demux_024_src1_data;                                                            // rsp_demux_024:src1_data -> rsp_mux_003:sink22_data
	wire          rsp_demux_024_src1_ready;                                                           // rsp_mux_003:sink22_ready -> rsp_demux_024:src1_ready
	wire   [50:0] rsp_demux_024_src1_channel;                                                         // rsp_demux_024:src1_channel -> rsp_mux_003:sink22_channel
	wire          rsp_demux_024_src1_startofpacket;                                                   // rsp_demux_024:src1_startofpacket -> rsp_mux_003:sink22_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                     // rsp_demux_024:src1_endofpacket -> rsp_mux_003:sink22_endofpacket
	wire          rsp_demux_024_src2_valid;                                                           // rsp_demux_024:src2_valid -> rsp_mux_004:sink22_valid
	wire  [134:0] rsp_demux_024_src2_data;                                                            // rsp_demux_024:src2_data -> rsp_mux_004:sink22_data
	wire          rsp_demux_024_src2_ready;                                                           // rsp_mux_004:sink22_ready -> rsp_demux_024:src2_ready
	wire   [50:0] rsp_demux_024_src2_channel;                                                         // rsp_demux_024:src2_channel -> rsp_mux_004:sink22_channel
	wire          rsp_demux_024_src2_startofpacket;                                                   // rsp_demux_024:src2_startofpacket -> rsp_mux_004:sink22_startofpacket
	wire          rsp_demux_024_src2_endofpacket;                                                     // rsp_demux_024:src2_endofpacket -> rsp_mux_004:sink22_endofpacket
	wire          rsp_demux_025_src0_valid;                                                           // rsp_demux_025:src0_valid -> rsp_mux_002:sink25_valid
	wire  [134:0] rsp_demux_025_src0_data;                                                            // rsp_demux_025:src0_data -> rsp_mux_002:sink25_data
	wire          rsp_demux_025_src0_ready;                                                           // rsp_mux_002:sink25_ready -> rsp_demux_025:src0_ready
	wire   [50:0] rsp_demux_025_src0_channel;                                                         // rsp_demux_025:src0_channel -> rsp_mux_002:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                   // rsp_demux_025:src0_startofpacket -> rsp_mux_002:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                     // rsp_demux_025:src0_endofpacket -> rsp_mux_002:sink25_endofpacket
	wire          rsp_demux_025_src1_valid;                                                           // rsp_demux_025:src1_valid -> rsp_mux_003:sink23_valid
	wire  [134:0] rsp_demux_025_src1_data;                                                            // rsp_demux_025:src1_data -> rsp_mux_003:sink23_data
	wire          rsp_demux_025_src1_ready;                                                           // rsp_mux_003:sink23_ready -> rsp_demux_025:src1_ready
	wire   [50:0] rsp_demux_025_src1_channel;                                                         // rsp_demux_025:src1_channel -> rsp_mux_003:sink23_channel
	wire          rsp_demux_025_src1_startofpacket;                                                   // rsp_demux_025:src1_startofpacket -> rsp_mux_003:sink23_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                                     // rsp_demux_025:src1_endofpacket -> rsp_mux_003:sink23_endofpacket
	wire          rsp_demux_025_src2_valid;                                                           // rsp_demux_025:src2_valid -> rsp_mux_004:sink23_valid
	wire  [134:0] rsp_demux_025_src2_data;                                                            // rsp_demux_025:src2_data -> rsp_mux_004:sink23_data
	wire          rsp_demux_025_src2_ready;                                                           // rsp_mux_004:sink23_ready -> rsp_demux_025:src2_ready
	wire   [50:0] rsp_demux_025_src2_channel;                                                         // rsp_demux_025:src2_channel -> rsp_mux_004:sink23_channel
	wire          rsp_demux_025_src2_startofpacket;                                                   // rsp_demux_025:src2_startofpacket -> rsp_mux_004:sink23_startofpacket
	wire          rsp_demux_025_src2_endofpacket;                                                     // rsp_demux_025:src2_endofpacket -> rsp_mux_004:sink23_endofpacket
	wire          rsp_demux_026_src0_valid;                                                           // rsp_demux_026:src0_valid -> rsp_mux_002:sink26_valid
	wire  [134:0] rsp_demux_026_src0_data;                                                            // rsp_demux_026:src0_data -> rsp_mux_002:sink26_data
	wire          rsp_demux_026_src0_ready;                                                           // rsp_mux_002:sink26_ready -> rsp_demux_026:src0_ready
	wire   [50:0] rsp_demux_026_src0_channel;                                                         // rsp_demux_026:src0_channel -> rsp_mux_002:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                   // rsp_demux_026:src0_startofpacket -> rsp_mux_002:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                     // rsp_demux_026:src0_endofpacket -> rsp_mux_002:sink26_endofpacket
	wire          rsp_demux_026_src1_valid;                                                           // rsp_demux_026:src1_valid -> rsp_mux_003:sink24_valid
	wire  [134:0] rsp_demux_026_src1_data;                                                            // rsp_demux_026:src1_data -> rsp_mux_003:sink24_data
	wire          rsp_demux_026_src1_ready;                                                           // rsp_mux_003:sink24_ready -> rsp_demux_026:src1_ready
	wire   [50:0] rsp_demux_026_src1_channel;                                                         // rsp_demux_026:src1_channel -> rsp_mux_003:sink24_channel
	wire          rsp_demux_026_src1_startofpacket;                                                   // rsp_demux_026:src1_startofpacket -> rsp_mux_003:sink24_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                                     // rsp_demux_026:src1_endofpacket -> rsp_mux_003:sink24_endofpacket
	wire          rsp_demux_026_src2_valid;                                                           // rsp_demux_026:src2_valid -> rsp_mux_004:sink24_valid
	wire  [134:0] rsp_demux_026_src2_data;                                                            // rsp_demux_026:src2_data -> rsp_mux_004:sink24_data
	wire          rsp_demux_026_src2_ready;                                                           // rsp_mux_004:sink24_ready -> rsp_demux_026:src2_ready
	wire   [50:0] rsp_demux_026_src2_channel;                                                         // rsp_demux_026:src2_channel -> rsp_mux_004:sink24_channel
	wire          rsp_demux_026_src2_startofpacket;                                                   // rsp_demux_026:src2_startofpacket -> rsp_mux_004:sink24_startofpacket
	wire          rsp_demux_026_src2_endofpacket;                                                     // rsp_demux_026:src2_endofpacket -> rsp_mux_004:sink24_endofpacket
	wire          rsp_demux_027_src0_valid;                                                           // rsp_demux_027:src0_valid -> rsp_mux_002:sink27_valid
	wire  [134:0] rsp_demux_027_src0_data;                                                            // rsp_demux_027:src0_data -> rsp_mux_002:sink27_data
	wire          rsp_demux_027_src0_ready;                                                           // rsp_mux_002:sink27_ready -> rsp_demux_027:src0_ready
	wire   [50:0] rsp_demux_027_src0_channel;                                                         // rsp_demux_027:src0_channel -> rsp_mux_002:sink27_channel
	wire          rsp_demux_027_src0_startofpacket;                                                   // rsp_demux_027:src0_startofpacket -> rsp_mux_002:sink27_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                     // rsp_demux_027:src0_endofpacket -> rsp_mux_002:sink27_endofpacket
	wire          rsp_demux_027_src1_valid;                                                           // rsp_demux_027:src1_valid -> rsp_mux_003:sink25_valid
	wire  [134:0] rsp_demux_027_src1_data;                                                            // rsp_demux_027:src1_data -> rsp_mux_003:sink25_data
	wire          rsp_demux_027_src1_ready;                                                           // rsp_mux_003:sink25_ready -> rsp_demux_027:src1_ready
	wire   [50:0] rsp_demux_027_src1_channel;                                                         // rsp_demux_027:src1_channel -> rsp_mux_003:sink25_channel
	wire          rsp_demux_027_src1_startofpacket;                                                   // rsp_demux_027:src1_startofpacket -> rsp_mux_003:sink25_startofpacket
	wire          rsp_demux_027_src1_endofpacket;                                                     // rsp_demux_027:src1_endofpacket -> rsp_mux_003:sink25_endofpacket
	wire          rsp_demux_027_src2_valid;                                                           // rsp_demux_027:src2_valid -> rsp_mux_004:sink25_valid
	wire  [134:0] rsp_demux_027_src2_data;                                                            // rsp_demux_027:src2_data -> rsp_mux_004:sink25_data
	wire          rsp_demux_027_src2_ready;                                                           // rsp_mux_004:sink25_ready -> rsp_demux_027:src2_ready
	wire   [50:0] rsp_demux_027_src2_channel;                                                         // rsp_demux_027:src2_channel -> rsp_mux_004:sink25_channel
	wire          rsp_demux_027_src2_startofpacket;                                                   // rsp_demux_027:src2_startofpacket -> rsp_mux_004:sink25_startofpacket
	wire          rsp_demux_027_src2_endofpacket;                                                     // rsp_demux_027:src2_endofpacket -> rsp_mux_004:sink25_endofpacket
	wire          rsp_demux_028_src0_valid;                                                           // rsp_demux_028:src0_valid -> rsp_mux_002:sink28_valid
	wire  [134:0] rsp_demux_028_src0_data;                                                            // rsp_demux_028:src0_data -> rsp_mux_002:sink28_data
	wire          rsp_demux_028_src0_ready;                                                           // rsp_mux_002:sink28_ready -> rsp_demux_028:src0_ready
	wire   [50:0] rsp_demux_028_src0_channel;                                                         // rsp_demux_028:src0_channel -> rsp_mux_002:sink28_channel
	wire          rsp_demux_028_src0_startofpacket;                                                   // rsp_demux_028:src0_startofpacket -> rsp_mux_002:sink28_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                     // rsp_demux_028:src0_endofpacket -> rsp_mux_002:sink28_endofpacket
	wire          rsp_demux_028_src1_valid;                                                           // rsp_demux_028:src1_valid -> rsp_mux_003:sink26_valid
	wire  [134:0] rsp_demux_028_src1_data;                                                            // rsp_demux_028:src1_data -> rsp_mux_003:sink26_data
	wire          rsp_demux_028_src1_ready;                                                           // rsp_mux_003:sink26_ready -> rsp_demux_028:src1_ready
	wire   [50:0] rsp_demux_028_src1_channel;                                                         // rsp_demux_028:src1_channel -> rsp_mux_003:sink26_channel
	wire          rsp_demux_028_src1_startofpacket;                                                   // rsp_demux_028:src1_startofpacket -> rsp_mux_003:sink26_startofpacket
	wire          rsp_demux_028_src1_endofpacket;                                                     // rsp_demux_028:src1_endofpacket -> rsp_mux_003:sink26_endofpacket
	wire          rsp_demux_028_src2_valid;                                                           // rsp_demux_028:src2_valid -> rsp_mux_004:sink26_valid
	wire  [134:0] rsp_demux_028_src2_data;                                                            // rsp_demux_028:src2_data -> rsp_mux_004:sink26_data
	wire          rsp_demux_028_src2_ready;                                                           // rsp_mux_004:sink26_ready -> rsp_demux_028:src2_ready
	wire   [50:0] rsp_demux_028_src2_channel;                                                         // rsp_demux_028:src2_channel -> rsp_mux_004:sink26_channel
	wire          rsp_demux_028_src2_startofpacket;                                                   // rsp_demux_028:src2_startofpacket -> rsp_mux_004:sink26_startofpacket
	wire          rsp_demux_028_src2_endofpacket;                                                     // rsp_demux_028:src2_endofpacket -> rsp_mux_004:sink26_endofpacket
	wire          rsp_demux_029_src0_valid;                                                           // rsp_demux_029:src0_valid -> rsp_mux_002:sink29_valid
	wire  [134:0] rsp_demux_029_src0_data;                                                            // rsp_demux_029:src0_data -> rsp_mux_002:sink29_data
	wire          rsp_demux_029_src0_ready;                                                           // rsp_mux_002:sink29_ready -> rsp_demux_029:src0_ready
	wire   [50:0] rsp_demux_029_src0_channel;                                                         // rsp_demux_029:src0_channel -> rsp_mux_002:sink29_channel
	wire          rsp_demux_029_src0_startofpacket;                                                   // rsp_demux_029:src0_startofpacket -> rsp_mux_002:sink29_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                     // rsp_demux_029:src0_endofpacket -> rsp_mux_002:sink29_endofpacket
	wire          rsp_demux_029_src1_valid;                                                           // rsp_demux_029:src1_valid -> rsp_mux_003:sink27_valid
	wire  [134:0] rsp_demux_029_src1_data;                                                            // rsp_demux_029:src1_data -> rsp_mux_003:sink27_data
	wire          rsp_demux_029_src1_ready;                                                           // rsp_mux_003:sink27_ready -> rsp_demux_029:src1_ready
	wire   [50:0] rsp_demux_029_src1_channel;                                                         // rsp_demux_029:src1_channel -> rsp_mux_003:sink27_channel
	wire          rsp_demux_029_src1_startofpacket;                                                   // rsp_demux_029:src1_startofpacket -> rsp_mux_003:sink27_startofpacket
	wire          rsp_demux_029_src1_endofpacket;                                                     // rsp_demux_029:src1_endofpacket -> rsp_mux_003:sink27_endofpacket
	wire          rsp_demux_029_src2_valid;                                                           // rsp_demux_029:src2_valid -> rsp_mux_004:sink27_valid
	wire  [134:0] rsp_demux_029_src2_data;                                                            // rsp_demux_029:src2_data -> rsp_mux_004:sink27_data
	wire          rsp_demux_029_src2_ready;                                                           // rsp_mux_004:sink27_ready -> rsp_demux_029:src2_ready
	wire   [50:0] rsp_demux_029_src2_channel;                                                         // rsp_demux_029:src2_channel -> rsp_mux_004:sink27_channel
	wire          rsp_demux_029_src2_startofpacket;                                                   // rsp_demux_029:src2_startofpacket -> rsp_mux_004:sink27_startofpacket
	wire          rsp_demux_029_src2_endofpacket;                                                     // rsp_demux_029:src2_endofpacket -> rsp_mux_004:sink27_endofpacket
	wire          rsp_demux_030_src0_valid;                                                           // rsp_demux_030:src0_valid -> rsp_mux_002:sink30_valid
	wire  [134:0] rsp_demux_030_src0_data;                                                            // rsp_demux_030:src0_data -> rsp_mux_002:sink30_data
	wire          rsp_demux_030_src0_ready;                                                           // rsp_mux_002:sink30_ready -> rsp_demux_030:src0_ready
	wire   [50:0] rsp_demux_030_src0_channel;                                                         // rsp_demux_030:src0_channel -> rsp_mux_002:sink30_channel
	wire          rsp_demux_030_src0_startofpacket;                                                   // rsp_demux_030:src0_startofpacket -> rsp_mux_002:sink30_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                     // rsp_demux_030:src0_endofpacket -> rsp_mux_002:sink30_endofpacket
	wire          rsp_demux_030_src1_valid;                                                           // rsp_demux_030:src1_valid -> rsp_mux_003:sink28_valid
	wire  [134:0] rsp_demux_030_src1_data;                                                            // rsp_demux_030:src1_data -> rsp_mux_003:sink28_data
	wire          rsp_demux_030_src1_ready;                                                           // rsp_mux_003:sink28_ready -> rsp_demux_030:src1_ready
	wire   [50:0] rsp_demux_030_src1_channel;                                                         // rsp_demux_030:src1_channel -> rsp_mux_003:sink28_channel
	wire          rsp_demux_030_src1_startofpacket;                                                   // rsp_demux_030:src1_startofpacket -> rsp_mux_003:sink28_startofpacket
	wire          rsp_demux_030_src1_endofpacket;                                                     // rsp_demux_030:src1_endofpacket -> rsp_mux_003:sink28_endofpacket
	wire          rsp_demux_030_src2_valid;                                                           // rsp_demux_030:src2_valid -> rsp_mux_004:sink28_valid
	wire  [134:0] rsp_demux_030_src2_data;                                                            // rsp_demux_030:src2_data -> rsp_mux_004:sink28_data
	wire          rsp_demux_030_src2_ready;                                                           // rsp_mux_004:sink28_ready -> rsp_demux_030:src2_ready
	wire   [50:0] rsp_demux_030_src2_channel;                                                         // rsp_demux_030:src2_channel -> rsp_mux_004:sink28_channel
	wire          rsp_demux_030_src2_startofpacket;                                                   // rsp_demux_030:src2_startofpacket -> rsp_mux_004:sink28_startofpacket
	wire          rsp_demux_030_src2_endofpacket;                                                     // rsp_demux_030:src2_endofpacket -> rsp_mux_004:sink28_endofpacket
	wire          rsp_demux_031_src0_valid;                                                           // rsp_demux_031:src0_valid -> rsp_mux_002:sink31_valid
	wire  [134:0] rsp_demux_031_src0_data;                                                            // rsp_demux_031:src0_data -> rsp_mux_002:sink31_data
	wire          rsp_demux_031_src0_ready;                                                           // rsp_mux_002:sink31_ready -> rsp_demux_031:src0_ready
	wire   [50:0] rsp_demux_031_src0_channel;                                                         // rsp_demux_031:src0_channel -> rsp_mux_002:sink31_channel
	wire          rsp_demux_031_src0_startofpacket;                                                   // rsp_demux_031:src0_startofpacket -> rsp_mux_002:sink31_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                     // rsp_demux_031:src0_endofpacket -> rsp_mux_002:sink31_endofpacket
	wire          rsp_demux_031_src1_valid;                                                           // rsp_demux_031:src1_valid -> rsp_mux_003:sink29_valid
	wire  [134:0] rsp_demux_031_src1_data;                                                            // rsp_demux_031:src1_data -> rsp_mux_003:sink29_data
	wire          rsp_demux_031_src1_ready;                                                           // rsp_mux_003:sink29_ready -> rsp_demux_031:src1_ready
	wire   [50:0] rsp_demux_031_src1_channel;                                                         // rsp_demux_031:src1_channel -> rsp_mux_003:sink29_channel
	wire          rsp_demux_031_src1_startofpacket;                                                   // rsp_demux_031:src1_startofpacket -> rsp_mux_003:sink29_startofpacket
	wire          rsp_demux_031_src1_endofpacket;                                                     // rsp_demux_031:src1_endofpacket -> rsp_mux_003:sink29_endofpacket
	wire          rsp_demux_031_src2_valid;                                                           // rsp_demux_031:src2_valid -> rsp_mux_004:sink29_valid
	wire  [134:0] rsp_demux_031_src2_data;                                                            // rsp_demux_031:src2_data -> rsp_mux_004:sink29_data
	wire          rsp_demux_031_src2_ready;                                                           // rsp_mux_004:sink29_ready -> rsp_demux_031:src2_ready
	wire   [50:0] rsp_demux_031_src2_channel;                                                         // rsp_demux_031:src2_channel -> rsp_mux_004:sink29_channel
	wire          rsp_demux_031_src2_startofpacket;                                                   // rsp_demux_031:src2_startofpacket -> rsp_mux_004:sink29_startofpacket
	wire          rsp_demux_031_src2_endofpacket;                                                     // rsp_demux_031:src2_endofpacket -> rsp_mux_004:sink29_endofpacket
	wire          rsp_demux_032_src0_valid;                                                           // rsp_demux_032:src0_valid -> rsp_mux_002:sink32_valid
	wire  [134:0] rsp_demux_032_src0_data;                                                            // rsp_demux_032:src0_data -> rsp_mux_002:sink32_data
	wire          rsp_demux_032_src0_ready;                                                           // rsp_mux_002:sink32_ready -> rsp_demux_032:src0_ready
	wire   [50:0] rsp_demux_032_src0_channel;                                                         // rsp_demux_032:src0_channel -> rsp_mux_002:sink32_channel
	wire          rsp_demux_032_src0_startofpacket;                                                   // rsp_demux_032:src0_startofpacket -> rsp_mux_002:sink32_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                     // rsp_demux_032:src0_endofpacket -> rsp_mux_002:sink32_endofpacket
	wire          rsp_demux_032_src1_valid;                                                           // rsp_demux_032:src1_valid -> rsp_mux_003:sink30_valid
	wire  [134:0] rsp_demux_032_src1_data;                                                            // rsp_demux_032:src1_data -> rsp_mux_003:sink30_data
	wire          rsp_demux_032_src1_ready;                                                           // rsp_mux_003:sink30_ready -> rsp_demux_032:src1_ready
	wire   [50:0] rsp_demux_032_src1_channel;                                                         // rsp_demux_032:src1_channel -> rsp_mux_003:sink30_channel
	wire          rsp_demux_032_src1_startofpacket;                                                   // rsp_demux_032:src1_startofpacket -> rsp_mux_003:sink30_startofpacket
	wire          rsp_demux_032_src1_endofpacket;                                                     // rsp_demux_032:src1_endofpacket -> rsp_mux_003:sink30_endofpacket
	wire          rsp_demux_032_src2_valid;                                                           // rsp_demux_032:src2_valid -> rsp_mux_004:sink30_valid
	wire  [134:0] rsp_demux_032_src2_data;                                                            // rsp_demux_032:src2_data -> rsp_mux_004:sink30_data
	wire          rsp_demux_032_src2_ready;                                                           // rsp_mux_004:sink30_ready -> rsp_demux_032:src2_ready
	wire   [50:0] rsp_demux_032_src2_channel;                                                         // rsp_demux_032:src2_channel -> rsp_mux_004:sink30_channel
	wire          rsp_demux_032_src2_startofpacket;                                                   // rsp_demux_032:src2_startofpacket -> rsp_mux_004:sink30_startofpacket
	wire          rsp_demux_032_src2_endofpacket;                                                     // rsp_demux_032:src2_endofpacket -> rsp_mux_004:sink30_endofpacket
	wire          rsp_demux_033_src0_valid;                                                           // rsp_demux_033:src0_valid -> rsp_mux_002:sink33_valid
	wire  [134:0] rsp_demux_033_src0_data;                                                            // rsp_demux_033:src0_data -> rsp_mux_002:sink33_data
	wire          rsp_demux_033_src0_ready;                                                           // rsp_mux_002:sink33_ready -> rsp_demux_033:src0_ready
	wire   [50:0] rsp_demux_033_src0_channel;                                                         // rsp_demux_033:src0_channel -> rsp_mux_002:sink33_channel
	wire          rsp_demux_033_src0_startofpacket;                                                   // rsp_demux_033:src0_startofpacket -> rsp_mux_002:sink33_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                     // rsp_demux_033:src0_endofpacket -> rsp_mux_002:sink33_endofpacket
	wire          rsp_demux_033_src1_valid;                                                           // rsp_demux_033:src1_valid -> rsp_mux_003:sink31_valid
	wire  [134:0] rsp_demux_033_src1_data;                                                            // rsp_demux_033:src1_data -> rsp_mux_003:sink31_data
	wire          rsp_demux_033_src1_ready;                                                           // rsp_mux_003:sink31_ready -> rsp_demux_033:src1_ready
	wire   [50:0] rsp_demux_033_src1_channel;                                                         // rsp_demux_033:src1_channel -> rsp_mux_003:sink31_channel
	wire          rsp_demux_033_src1_startofpacket;                                                   // rsp_demux_033:src1_startofpacket -> rsp_mux_003:sink31_startofpacket
	wire          rsp_demux_033_src1_endofpacket;                                                     // rsp_demux_033:src1_endofpacket -> rsp_mux_003:sink31_endofpacket
	wire          rsp_demux_033_src2_valid;                                                           // rsp_demux_033:src2_valid -> rsp_mux_004:sink31_valid
	wire  [134:0] rsp_demux_033_src2_data;                                                            // rsp_demux_033:src2_data -> rsp_mux_004:sink31_data
	wire          rsp_demux_033_src2_ready;                                                           // rsp_mux_004:sink31_ready -> rsp_demux_033:src2_ready
	wire   [50:0] rsp_demux_033_src2_channel;                                                         // rsp_demux_033:src2_channel -> rsp_mux_004:sink31_channel
	wire          rsp_demux_033_src2_startofpacket;                                                   // rsp_demux_033:src2_startofpacket -> rsp_mux_004:sink31_startofpacket
	wire          rsp_demux_033_src2_endofpacket;                                                     // rsp_demux_033:src2_endofpacket -> rsp_mux_004:sink31_endofpacket
	wire          rsp_demux_034_src0_valid;                                                           // rsp_demux_034:src0_valid -> rsp_mux_002:sink34_valid
	wire  [134:0] rsp_demux_034_src0_data;                                                            // rsp_demux_034:src0_data -> rsp_mux_002:sink34_data
	wire          rsp_demux_034_src0_ready;                                                           // rsp_mux_002:sink34_ready -> rsp_demux_034:src0_ready
	wire   [50:0] rsp_demux_034_src0_channel;                                                         // rsp_demux_034:src0_channel -> rsp_mux_002:sink34_channel
	wire          rsp_demux_034_src0_startofpacket;                                                   // rsp_demux_034:src0_startofpacket -> rsp_mux_002:sink34_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                     // rsp_demux_034:src0_endofpacket -> rsp_mux_002:sink34_endofpacket
	wire          rsp_demux_034_src1_valid;                                                           // rsp_demux_034:src1_valid -> rsp_mux_003:sink32_valid
	wire  [134:0] rsp_demux_034_src1_data;                                                            // rsp_demux_034:src1_data -> rsp_mux_003:sink32_data
	wire          rsp_demux_034_src1_ready;                                                           // rsp_mux_003:sink32_ready -> rsp_demux_034:src1_ready
	wire   [50:0] rsp_demux_034_src1_channel;                                                         // rsp_demux_034:src1_channel -> rsp_mux_003:sink32_channel
	wire          rsp_demux_034_src1_startofpacket;                                                   // rsp_demux_034:src1_startofpacket -> rsp_mux_003:sink32_startofpacket
	wire          rsp_demux_034_src1_endofpacket;                                                     // rsp_demux_034:src1_endofpacket -> rsp_mux_003:sink32_endofpacket
	wire          rsp_demux_034_src2_valid;                                                           // rsp_demux_034:src2_valid -> rsp_mux_004:sink32_valid
	wire  [134:0] rsp_demux_034_src2_data;                                                            // rsp_demux_034:src2_data -> rsp_mux_004:sink32_data
	wire          rsp_demux_034_src2_ready;                                                           // rsp_mux_004:sink32_ready -> rsp_demux_034:src2_ready
	wire   [50:0] rsp_demux_034_src2_channel;                                                         // rsp_demux_034:src2_channel -> rsp_mux_004:sink32_channel
	wire          rsp_demux_034_src2_startofpacket;                                                   // rsp_demux_034:src2_startofpacket -> rsp_mux_004:sink32_startofpacket
	wire          rsp_demux_034_src2_endofpacket;                                                     // rsp_demux_034:src2_endofpacket -> rsp_mux_004:sink32_endofpacket
	wire          rsp_demux_035_src0_valid;                                                           // rsp_demux_035:src0_valid -> rsp_mux_002:sink35_valid
	wire  [134:0] rsp_demux_035_src0_data;                                                            // rsp_demux_035:src0_data -> rsp_mux_002:sink35_data
	wire          rsp_demux_035_src0_ready;                                                           // rsp_mux_002:sink35_ready -> rsp_demux_035:src0_ready
	wire   [50:0] rsp_demux_035_src0_channel;                                                         // rsp_demux_035:src0_channel -> rsp_mux_002:sink35_channel
	wire          rsp_demux_035_src0_startofpacket;                                                   // rsp_demux_035:src0_startofpacket -> rsp_mux_002:sink35_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                     // rsp_demux_035:src0_endofpacket -> rsp_mux_002:sink35_endofpacket
	wire          rsp_demux_035_src1_valid;                                                           // rsp_demux_035:src1_valid -> rsp_mux_003:sink33_valid
	wire  [134:0] rsp_demux_035_src1_data;                                                            // rsp_demux_035:src1_data -> rsp_mux_003:sink33_data
	wire          rsp_demux_035_src1_ready;                                                           // rsp_mux_003:sink33_ready -> rsp_demux_035:src1_ready
	wire   [50:0] rsp_demux_035_src1_channel;                                                         // rsp_demux_035:src1_channel -> rsp_mux_003:sink33_channel
	wire          rsp_demux_035_src1_startofpacket;                                                   // rsp_demux_035:src1_startofpacket -> rsp_mux_003:sink33_startofpacket
	wire          rsp_demux_035_src1_endofpacket;                                                     // rsp_demux_035:src1_endofpacket -> rsp_mux_003:sink33_endofpacket
	wire          rsp_demux_035_src2_valid;                                                           // rsp_demux_035:src2_valid -> rsp_mux_004:sink33_valid
	wire  [134:0] rsp_demux_035_src2_data;                                                            // rsp_demux_035:src2_data -> rsp_mux_004:sink33_data
	wire          rsp_demux_035_src2_ready;                                                           // rsp_mux_004:sink33_ready -> rsp_demux_035:src2_ready
	wire   [50:0] rsp_demux_035_src2_channel;                                                         // rsp_demux_035:src2_channel -> rsp_mux_004:sink33_channel
	wire          rsp_demux_035_src2_startofpacket;                                                   // rsp_demux_035:src2_startofpacket -> rsp_mux_004:sink33_startofpacket
	wire          rsp_demux_035_src2_endofpacket;                                                     // rsp_demux_035:src2_endofpacket -> rsp_mux_004:sink33_endofpacket
	wire          rsp_demux_036_src0_valid;                                                           // rsp_demux_036:src0_valid -> rsp_mux_002:sink36_valid
	wire  [134:0] rsp_demux_036_src0_data;                                                            // rsp_demux_036:src0_data -> rsp_mux_002:sink36_data
	wire          rsp_demux_036_src0_ready;                                                           // rsp_mux_002:sink36_ready -> rsp_demux_036:src0_ready
	wire   [50:0] rsp_demux_036_src0_channel;                                                         // rsp_demux_036:src0_channel -> rsp_mux_002:sink36_channel
	wire          rsp_demux_036_src0_startofpacket;                                                   // rsp_demux_036:src0_startofpacket -> rsp_mux_002:sink36_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                     // rsp_demux_036:src0_endofpacket -> rsp_mux_002:sink36_endofpacket
	wire          rsp_demux_036_src1_valid;                                                           // rsp_demux_036:src1_valid -> rsp_mux_003:sink34_valid
	wire  [134:0] rsp_demux_036_src1_data;                                                            // rsp_demux_036:src1_data -> rsp_mux_003:sink34_data
	wire          rsp_demux_036_src1_ready;                                                           // rsp_mux_003:sink34_ready -> rsp_demux_036:src1_ready
	wire   [50:0] rsp_demux_036_src1_channel;                                                         // rsp_demux_036:src1_channel -> rsp_mux_003:sink34_channel
	wire          rsp_demux_036_src1_startofpacket;                                                   // rsp_demux_036:src1_startofpacket -> rsp_mux_003:sink34_startofpacket
	wire          rsp_demux_036_src1_endofpacket;                                                     // rsp_demux_036:src1_endofpacket -> rsp_mux_003:sink34_endofpacket
	wire          rsp_demux_036_src2_valid;                                                           // rsp_demux_036:src2_valid -> rsp_mux_004:sink34_valid
	wire  [134:0] rsp_demux_036_src2_data;                                                            // rsp_demux_036:src2_data -> rsp_mux_004:sink34_data
	wire          rsp_demux_036_src2_ready;                                                           // rsp_mux_004:sink34_ready -> rsp_demux_036:src2_ready
	wire   [50:0] rsp_demux_036_src2_channel;                                                         // rsp_demux_036:src2_channel -> rsp_mux_004:sink34_channel
	wire          rsp_demux_036_src2_startofpacket;                                                   // rsp_demux_036:src2_startofpacket -> rsp_mux_004:sink34_startofpacket
	wire          rsp_demux_036_src2_endofpacket;                                                     // rsp_demux_036:src2_endofpacket -> rsp_mux_004:sink34_endofpacket
	wire          rsp_demux_037_src0_valid;                                                           // rsp_demux_037:src0_valid -> rsp_mux_002:sink37_valid
	wire  [134:0] rsp_demux_037_src0_data;                                                            // rsp_demux_037:src0_data -> rsp_mux_002:sink37_data
	wire          rsp_demux_037_src0_ready;                                                           // rsp_mux_002:sink37_ready -> rsp_demux_037:src0_ready
	wire   [50:0] rsp_demux_037_src0_channel;                                                         // rsp_demux_037:src0_channel -> rsp_mux_002:sink37_channel
	wire          rsp_demux_037_src0_startofpacket;                                                   // rsp_demux_037:src0_startofpacket -> rsp_mux_002:sink37_startofpacket
	wire          rsp_demux_037_src0_endofpacket;                                                     // rsp_demux_037:src0_endofpacket -> rsp_mux_002:sink37_endofpacket
	wire          rsp_demux_037_src1_valid;                                                           // rsp_demux_037:src1_valid -> rsp_mux_003:sink35_valid
	wire  [134:0] rsp_demux_037_src1_data;                                                            // rsp_demux_037:src1_data -> rsp_mux_003:sink35_data
	wire          rsp_demux_037_src1_ready;                                                           // rsp_mux_003:sink35_ready -> rsp_demux_037:src1_ready
	wire   [50:0] rsp_demux_037_src1_channel;                                                         // rsp_demux_037:src1_channel -> rsp_mux_003:sink35_channel
	wire          rsp_demux_037_src1_startofpacket;                                                   // rsp_demux_037:src1_startofpacket -> rsp_mux_003:sink35_startofpacket
	wire          rsp_demux_037_src1_endofpacket;                                                     // rsp_demux_037:src1_endofpacket -> rsp_mux_003:sink35_endofpacket
	wire          rsp_demux_037_src2_valid;                                                           // rsp_demux_037:src2_valid -> rsp_mux_004:sink35_valid
	wire  [134:0] rsp_demux_037_src2_data;                                                            // rsp_demux_037:src2_data -> rsp_mux_004:sink35_data
	wire          rsp_demux_037_src2_ready;                                                           // rsp_mux_004:sink35_ready -> rsp_demux_037:src2_ready
	wire   [50:0] rsp_demux_037_src2_channel;                                                         // rsp_demux_037:src2_channel -> rsp_mux_004:sink35_channel
	wire          rsp_demux_037_src2_startofpacket;                                                   // rsp_demux_037:src2_startofpacket -> rsp_mux_004:sink35_startofpacket
	wire          rsp_demux_037_src2_endofpacket;                                                     // rsp_demux_037:src2_endofpacket -> rsp_mux_004:sink35_endofpacket
	wire          rsp_demux_038_src0_valid;                                                           // rsp_demux_038:src0_valid -> rsp_mux_002:sink38_valid
	wire  [134:0] rsp_demux_038_src0_data;                                                            // rsp_demux_038:src0_data -> rsp_mux_002:sink38_data
	wire          rsp_demux_038_src0_ready;                                                           // rsp_mux_002:sink38_ready -> rsp_demux_038:src0_ready
	wire   [50:0] rsp_demux_038_src0_channel;                                                         // rsp_demux_038:src0_channel -> rsp_mux_002:sink38_channel
	wire          rsp_demux_038_src0_startofpacket;                                                   // rsp_demux_038:src0_startofpacket -> rsp_mux_002:sink38_startofpacket
	wire          rsp_demux_038_src0_endofpacket;                                                     // rsp_demux_038:src0_endofpacket -> rsp_mux_002:sink38_endofpacket
	wire          rsp_demux_038_src1_valid;                                                           // rsp_demux_038:src1_valid -> rsp_mux_003:sink36_valid
	wire  [134:0] rsp_demux_038_src1_data;                                                            // rsp_demux_038:src1_data -> rsp_mux_003:sink36_data
	wire          rsp_demux_038_src1_ready;                                                           // rsp_mux_003:sink36_ready -> rsp_demux_038:src1_ready
	wire   [50:0] rsp_demux_038_src1_channel;                                                         // rsp_demux_038:src1_channel -> rsp_mux_003:sink36_channel
	wire          rsp_demux_038_src1_startofpacket;                                                   // rsp_demux_038:src1_startofpacket -> rsp_mux_003:sink36_startofpacket
	wire          rsp_demux_038_src1_endofpacket;                                                     // rsp_demux_038:src1_endofpacket -> rsp_mux_003:sink36_endofpacket
	wire          rsp_demux_038_src2_valid;                                                           // rsp_demux_038:src2_valid -> rsp_mux_004:sink36_valid
	wire  [134:0] rsp_demux_038_src2_data;                                                            // rsp_demux_038:src2_data -> rsp_mux_004:sink36_data
	wire          rsp_demux_038_src2_ready;                                                           // rsp_mux_004:sink36_ready -> rsp_demux_038:src2_ready
	wire   [50:0] rsp_demux_038_src2_channel;                                                         // rsp_demux_038:src2_channel -> rsp_mux_004:sink36_channel
	wire          rsp_demux_038_src2_startofpacket;                                                   // rsp_demux_038:src2_startofpacket -> rsp_mux_004:sink36_startofpacket
	wire          rsp_demux_038_src2_endofpacket;                                                     // rsp_demux_038:src2_endofpacket -> rsp_mux_004:sink36_endofpacket
	wire          rsp_demux_039_src0_valid;                                                           // rsp_demux_039:src0_valid -> rsp_mux_002:sink39_valid
	wire  [134:0] rsp_demux_039_src0_data;                                                            // rsp_demux_039:src0_data -> rsp_mux_002:sink39_data
	wire          rsp_demux_039_src0_ready;                                                           // rsp_mux_002:sink39_ready -> rsp_demux_039:src0_ready
	wire   [50:0] rsp_demux_039_src0_channel;                                                         // rsp_demux_039:src0_channel -> rsp_mux_002:sink39_channel
	wire          rsp_demux_039_src0_startofpacket;                                                   // rsp_demux_039:src0_startofpacket -> rsp_mux_002:sink39_startofpacket
	wire          rsp_demux_039_src0_endofpacket;                                                     // rsp_demux_039:src0_endofpacket -> rsp_mux_002:sink39_endofpacket
	wire          rsp_demux_039_src1_valid;                                                           // rsp_demux_039:src1_valid -> rsp_mux_003:sink37_valid
	wire  [134:0] rsp_demux_039_src1_data;                                                            // rsp_demux_039:src1_data -> rsp_mux_003:sink37_data
	wire          rsp_demux_039_src1_ready;                                                           // rsp_mux_003:sink37_ready -> rsp_demux_039:src1_ready
	wire   [50:0] rsp_demux_039_src1_channel;                                                         // rsp_demux_039:src1_channel -> rsp_mux_003:sink37_channel
	wire          rsp_demux_039_src1_startofpacket;                                                   // rsp_demux_039:src1_startofpacket -> rsp_mux_003:sink37_startofpacket
	wire          rsp_demux_039_src1_endofpacket;                                                     // rsp_demux_039:src1_endofpacket -> rsp_mux_003:sink37_endofpacket
	wire          rsp_demux_039_src2_valid;                                                           // rsp_demux_039:src2_valid -> rsp_mux_004:sink37_valid
	wire  [134:0] rsp_demux_039_src2_data;                                                            // rsp_demux_039:src2_data -> rsp_mux_004:sink37_data
	wire          rsp_demux_039_src2_ready;                                                           // rsp_mux_004:sink37_ready -> rsp_demux_039:src2_ready
	wire   [50:0] rsp_demux_039_src2_channel;                                                         // rsp_demux_039:src2_channel -> rsp_mux_004:sink37_channel
	wire          rsp_demux_039_src2_startofpacket;                                                   // rsp_demux_039:src2_startofpacket -> rsp_mux_004:sink37_startofpacket
	wire          rsp_demux_039_src2_endofpacket;                                                     // rsp_demux_039:src2_endofpacket -> rsp_mux_004:sink37_endofpacket
	wire          rsp_demux_040_src0_valid;                                                           // rsp_demux_040:src0_valid -> rsp_mux_002:sink40_valid
	wire  [134:0] rsp_demux_040_src0_data;                                                            // rsp_demux_040:src0_data -> rsp_mux_002:sink40_data
	wire          rsp_demux_040_src0_ready;                                                           // rsp_mux_002:sink40_ready -> rsp_demux_040:src0_ready
	wire   [50:0] rsp_demux_040_src0_channel;                                                         // rsp_demux_040:src0_channel -> rsp_mux_002:sink40_channel
	wire          rsp_demux_040_src0_startofpacket;                                                   // rsp_demux_040:src0_startofpacket -> rsp_mux_002:sink40_startofpacket
	wire          rsp_demux_040_src0_endofpacket;                                                     // rsp_demux_040:src0_endofpacket -> rsp_mux_002:sink40_endofpacket
	wire          rsp_demux_040_src1_valid;                                                           // rsp_demux_040:src1_valid -> rsp_mux_003:sink38_valid
	wire  [134:0] rsp_demux_040_src1_data;                                                            // rsp_demux_040:src1_data -> rsp_mux_003:sink38_data
	wire          rsp_demux_040_src1_ready;                                                           // rsp_mux_003:sink38_ready -> rsp_demux_040:src1_ready
	wire   [50:0] rsp_demux_040_src1_channel;                                                         // rsp_demux_040:src1_channel -> rsp_mux_003:sink38_channel
	wire          rsp_demux_040_src1_startofpacket;                                                   // rsp_demux_040:src1_startofpacket -> rsp_mux_003:sink38_startofpacket
	wire          rsp_demux_040_src1_endofpacket;                                                     // rsp_demux_040:src1_endofpacket -> rsp_mux_003:sink38_endofpacket
	wire          rsp_demux_040_src2_valid;                                                           // rsp_demux_040:src2_valid -> rsp_mux_004:sink38_valid
	wire  [134:0] rsp_demux_040_src2_data;                                                            // rsp_demux_040:src2_data -> rsp_mux_004:sink38_data
	wire          rsp_demux_040_src2_ready;                                                           // rsp_mux_004:sink38_ready -> rsp_demux_040:src2_ready
	wire   [50:0] rsp_demux_040_src2_channel;                                                         // rsp_demux_040:src2_channel -> rsp_mux_004:sink38_channel
	wire          rsp_demux_040_src2_startofpacket;                                                   // rsp_demux_040:src2_startofpacket -> rsp_mux_004:sink38_startofpacket
	wire          rsp_demux_040_src2_endofpacket;                                                     // rsp_demux_040:src2_endofpacket -> rsp_mux_004:sink38_endofpacket
	wire          rsp_demux_041_src0_valid;                                                           // rsp_demux_041:src0_valid -> rsp_mux_002:sink41_valid
	wire  [134:0] rsp_demux_041_src0_data;                                                            // rsp_demux_041:src0_data -> rsp_mux_002:sink41_data
	wire          rsp_demux_041_src0_ready;                                                           // rsp_mux_002:sink41_ready -> rsp_demux_041:src0_ready
	wire   [50:0] rsp_demux_041_src0_channel;                                                         // rsp_demux_041:src0_channel -> rsp_mux_002:sink41_channel
	wire          rsp_demux_041_src0_startofpacket;                                                   // rsp_demux_041:src0_startofpacket -> rsp_mux_002:sink41_startofpacket
	wire          rsp_demux_041_src0_endofpacket;                                                     // rsp_demux_041:src0_endofpacket -> rsp_mux_002:sink41_endofpacket
	wire          rsp_demux_041_src1_valid;                                                           // rsp_demux_041:src1_valid -> rsp_mux_003:sink39_valid
	wire  [134:0] rsp_demux_041_src1_data;                                                            // rsp_demux_041:src1_data -> rsp_mux_003:sink39_data
	wire          rsp_demux_041_src1_ready;                                                           // rsp_mux_003:sink39_ready -> rsp_demux_041:src1_ready
	wire   [50:0] rsp_demux_041_src1_channel;                                                         // rsp_demux_041:src1_channel -> rsp_mux_003:sink39_channel
	wire          rsp_demux_041_src1_startofpacket;                                                   // rsp_demux_041:src1_startofpacket -> rsp_mux_003:sink39_startofpacket
	wire          rsp_demux_041_src1_endofpacket;                                                     // rsp_demux_041:src1_endofpacket -> rsp_mux_003:sink39_endofpacket
	wire          rsp_demux_041_src2_valid;                                                           // rsp_demux_041:src2_valid -> rsp_mux_004:sink39_valid
	wire  [134:0] rsp_demux_041_src2_data;                                                            // rsp_demux_041:src2_data -> rsp_mux_004:sink39_data
	wire          rsp_demux_041_src2_ready;                                                           // rsp_mux_004:sink39_ready -> rsp_demux_041:src2_ready
	wire   [50:0] rsp_demux_041_src2_channel;                                                         // rsp_demux_041:src2_channel -> rsp_mux_004:sink39_channel
	wire          rsp_demux_041_src2_startofpacket;                                                   // rsp_demux_041:src2_startofpacket -> rsp_mux_004:sink39_startofpacket
	wire          rsp_demux_041_src2_endofpacket;                                                     // rsp_demux_041:src2_endofpacket -> rsp_mux_004:sink39_endofpacket
	wire          rsp_demux_042_src0_valid;                                                           // rsp_demux_042:src0_valid -> rsp_mux_002:sink42_valid
	wire  [134:0] rsp_demux_042_src0_data;                                                            // rsp_demux_042:src0_data -> rsp_mux_002:sink42_data
	wire          rsp_demux_042_src0_ready;                                                           // rsp_mux_002:sink42_ready -> rsp_demux_042:src0_ready
	wire   [50:0] rsp_demux_042_src0_channel;                                                         // rsp_demux_042:src0_channel -> rsp_mux_002:sink42_channel
	wire          rsp_demux_042_src0_startofpacket;                                                   // rsp_demux_042:src0_startofpacket -> rsp_mux_002:sink42_startofpacket
	wire          rsp_demux_042_src0_endofpacket;                                                     // rsp_demux_042:src0_endofpacket -> rsp_mux_002:sink42_endofpacket
	wire          rsp_demux_042_src1_valid;                                                           // rsp_demux_042:src1_valid -> rsp_mux_003:sink40_valid
	wire  [134:0] rsp_demux_042_src1_data;                                                            // rsp_demux_042:src1_data -> rsp_mux_003:sink40_data
	wire          rsp_demux_042_src1_ready;                                                           // rsp_mux_003:sink40_ready -> rsp_demux_042:src1_ready
	wire   [50:0] rsp_demux_042_src1_channel;                                                         // rsp_demux_042:src1_channel -> rsp_mux_003:sink40_channel
	wire          rsp_demux_042_src1_startofpacket;                                                   // rsp_demux_042:src1_startofpacket -> rsp_mux_003:sink40_startofpacket
	wire          rsp_demux_042_src1_endofpacket;                                                     // rsp_demux_042:src1_endofpacket -> rsp_mux_003:sink40_endofpacket
	wire          rsp_demux_042_src2_valid;                                                           // rsp_demux_042:src2_valid -> rsp_mux_004:sink40_valid
	wire  [134:0] rsp_demux_042_src2_data;                                                            // rsp_demux_042:src2_data -> rsp_mux_004:sink40_data
	wire          rsp_demux_042_src2_ready;                                                           // rsp_mux_004:sink40_ready -> rsp_demux_042:src2_ready
	wire   [50:0] rsp_demux_042_src2_channel;                                                         // rsp_demux_042:src2_channel -> rsp_mux_004:sink40_channel
	wire          rsp_demux_042_src2_startofpacket;                                                   // rsp_demux_042:src2_startofpacket -> rsp_mux_004:sink40_startofpacket
	wire          rsp_demux_042_src2_endofpacket;                                                     // rsp_demux_042:src2_endofpacket -> rsp_mux_004:sink40_endofpacket
	wire          rsp_demux_043_src0_valid;                                                           // rsp_demux_043:src0_valid -> rsp_mux_002:sink43_valid
	wire  [134:0] rsp_demux_043_src0_data;                                                            // rsp_demux_043:src0_data -> rsp_mux_002:sink43_data
	wire          rsp_demux_043_src0_ready;                                                           // rsp_mux_002:sink43_ready -> rsp_demux_043:src0_ready
	wire   [50:0] rsp_demux_043_src0_channel;                                                         // rsp_demux_043:src0_channel -> rsp_mux_002:sink43_channel
	wire          rsp_demux_043_src0_startofpacket;                                                   // rsp_demux_043:src0_startofpacket -> rsp_mux_002:sink43_startofpacket
	wire          rsp_demux_043_src0_endofpacket;                                                     // rsp_demux_043:src0_endofpacket -> rsp_mux_002:sink43_endofpacket
	wire          rsp_demux_043_src1_valid;                                                           // rsp_demux_043:src1_valid -> rsp_mux_003:sink41_valid
	wire  [134:0] rsp_demux_043_src1_data;                                                            // rsp_demux_043:src1_data -> rsp_mux_003:sink41_data
	wire          rsp_demux_043_src1_ready;                                                           // rsp_mux_003:sink41_ready -> rsp_demux_043:src1_ready
	wire   [50:0] rsp_demux_043_src1_channel;                                                         // rsp_demux_043:src1_channel -> rsp_mux_003:sink41_channel
	wire          rsp_demux_043_src1_startofpacket;                                                   // rsp_demux_043:src1_startofpacket -> rsp_mux_003:sink41_startofpacket
	wire          rsp_demux_043_src1_endofpacket;                                                     // rsp_demux_043:src1_endofpacket -> rsp_mux_003:sink41_endofpacket
	wire          rsp_demux_043_src2_valid;                                                           // rsp_demux_043:src2_valid -> rsp_mux_004:sink41_valid
	wire  [134:0] rsp_demux_043_src2_data;                                                            // rsp_demux_043:src2_data -> rsp_mux_004:sink41_data
	wire          rsp_demux_043_src2_ready;                                                           // rsp_mux_004:sink41_ready -> rsp_demux_043:src2_ready
	wire   [50:0] rsp_demux_043_src2_channel;                                                         // rsp_demux_043:src2_channel -> rsp_mux_004:sink41_channel
	wire          rsp_demux_043_src2_startofpacket;                                                   // rsp_demux_043:src2_startofpacket -> rsp_mux_004:sink41_startofpacket
	wire          rsp_demux_043_src2_endofpacket;                                                     // rsp_demux_043:src2_endofpacket -> rsp_mux_004:sink41_endofpacket
	wire          rsp_demux_044_src0_valid;                                                           // rsp_demux_044:src0_valid -> rsp_mux_002:sink44_valid
	wire  [134:0] rsp_demux_044_src0_data;                                                            // rsp_demux_044:src0_data -> rsp_mux_002:sink44_data
	wire          rsp_demux_044_src0_ready;                                                           // rsp_mux_002:sink44_ready -> rsp_demux_044:src0_ready
	wire   [50:0] rsp_demux_044_src0_channel;                                                         // rsp_demux_044:src0_channel -> rsp_mux_002:sink44_channel
	wire          rsp_demux_044_src0_startofpacket;                                                   // rsp_demux_044:src0_startofpacket -> rsp_mux_002:sink44_startofpacket
	wire          rsp_demux_044_src0_endofpacket;                                                     // rsp_demux_044:src0_endofpacket -> rsp_mux_002:sink44_endofpacket
	wire          rsp_demux_044_src1_valid;                                                           // rsp_demux_044:src1_valid -> rsp_mux_003:sink42_valid
	wire  [134:0] rsp_demux_044_src1_data;                                                            // rsp_demux_044:src1_data -> rsp_mux_003:sink42_data
	wire          rsp_demux_044_src1_ready;                                                           // rsp_mux_003:sink42_ready -> rsp_demux_044:src1_ready
	wire   [50:0] rsp_demux_044_src1_channel;                                                         // rsp_demux_044:src1_channel -> rsp_mux_003:sink42_channel
	wire          rsp_demux_044_src1_startofpacket;                                                   // rsp_demux_044:src1_startofpacket -> rsp_mux_003:sink42_startofpacket
	wire          rsp_demux_044_src1_endofpacket;                                                     // rsp_demux_044:src1_endofpacket -> rsp_mux_003:sink42_endofpacket
	wire          rsp_demux_044_src2_valid;                                                           // rsp_demux_044:src2_valid -> rsp_mux_004:sink42_valid
	wire  [134:0] rsp_demux_044_src2_data;                                                            // rsp_demux_044:src2_data -> rsp_mux_004:sink42_data
	wire          rsp_demux_044_src2_ready;                                                           // rsp_mux_004:sink42_ready -> rsp_demux_044:src2_ready
	wire   [50:0] rsp_demux_044_src2_channel;                                                         // rsp_demux_044:src2_channel -> rsp_mux_004:sink42_channel
	wire          rsp_demux_044_src2_startofpacket;                                                   // rsp_demux_044:src2_startofpacket -> rsp_mux_004:sink42_startofpacket
	wire          rsp_demux_044_src2_endofpacket;                                                     // rsp_demux_044:src2_endofpacket -> rsp_mux_004:sink42_endofpacket
	wire          rsp_demux_045_src0_valid;                                                           // rsp_demux_045:src0_valid -> rsp_mux_002:sink45_valid
	wire  [134:0] rsp_demux_045_src0_data;                                                            // rsp_demux_045:src0_data -> rsp_mux_002:sink45_data
	wire          rsp_demux_045_src0_ready;                                                           // rsp_mux_002:sink45_ready -> rsp_demux_045:src0_ready
	wire   [50:0] rsp_demux_045_src0_channel;                                                         // rsp_demux_045:src0_channel -> rsp_mux_002:sink45_channel
	wire          rsp_demux_045_src0_startofpacket;                                                   // rsp_demux_045:src0_startofpacket -> rsp_mux_002:sink45_startofpacket
	wire          rsp_demux_045_src0_endofpacket;                                                     // rsp_demux_045:src0_endofpacket -> rsp_mux_002:sink45_endofpacket
	wire          rsp_demux_045_src1_valid;                                                           // rsp_demux_045:src1_valid -> rsp_mux_003:sink43_valid
	wire  [134:0] rsp_demux_045_src1_data;                                                            // rsp_demux_045:src1_data -> rsp_mux_003:sink43_data
	wire          rsp_demux_045_src1_ready;                                                           // rsp_mux_003:sink43_ready -> rsp_demux_045:src1_ready
	wire   [50:0] rsp_demux_045_src1_channel;                                                         // rsp_demux_045:src1_channel -> rsp_mux_003:sink43_channel
	wire          rsp_demux_045_src1_startofpacket;                                                   // rsp_demux_045:src1_startofpacket -> rsp_mux_003:sink43_startofpacket
	wire          rsp_demux_045_src1_endofpacket;                                                     // rsp_demux_045:src1_endofpacket -> rsp_mux_003:sink43_endofpacket
	wire          rsp_demux_045_src2_valid;                                                           // rsp_demux_045:src2_valid -> rsp_mux_004:sink43_valid
	wire  [134:0] rsp_demux_045_src2_data;                                                            // rsp_demux_045:src2_data -> rsp_mux_004:sink43_data
	wire          rsp_demux_045_src2_ready;                                                           // rsp_mux_004:sink43_ready -> rsp_demux_045:src2_ready
	wire   [50:0] rsp_demux_045_src2_channel;                                                         // rsp_demux_045:src2_channel -> rsp_mux_004:sink43_channel
	wire          rsp_demux_045_src2_startofpacket;                                                   // rsp_demux_045:src2_startofpacket -> rsp_mux_004:sink43_startofpacket
	wire          rsp_demux_045_src2_endofpacket;                                                     // rsp_demux_045:src2_endofpacket -> rsp_mux_004:sink43_endofpacket
	wire          rsp_demux_046_src0_valid;                                                           // rsp_demux_046:src0_valid -> rsp_mux_002:sink46_valid
	wire  [134:0] rsp_demux_046_src0_data;                                                            // rsp_demux_046:src0_data -> rsp_mux_002:sink46_data
	wire          rsp_demux_046_src0_ready;                                                           // rsp_mux_002:sink46_ready -> rsp_demux_046:src0_ready
	wire   [50:0] rsp_demux_046_src0_channel;                                                         // rsp_demux_046:src0_channel -> rsp_mux_002:sink46_channel
	wire          rsp_demux_046_src0_startofpacket;                                                   // rsp_demux_046:src0_startofpacket -> rsp_mux_002:sink46_startofpacket
	wire          rsp_demux_046_src0_endofpacket;                                                     // rsp_demux_046:src0_endofpacket -> rsp_mux_002:sink46_endofpacket
	wire          rsp_demux_046_src1_valid;                                                           // rsp_demux_046:src1_valid -> rsp_mux_003:sink44_valid
	wire  [134:0] rsp_demux_046_src1_data;                                                            // rsp_demux_046:src1_data -> rsp_mux_003:sink44_data
	wire          rsp_demux_046_src1_ready;                                                           // rsp_mux_003:sink44_ready -> rsp_demux_046:src1_ready
	wire   [50:0] rsp_demux_046_src1_channel;                                                         // rsp_demux_046:src1_channel -> rsp_mux_003:sink44_channel
	wire          rsp_demux_046_src1_startofpacket;                                                   // rsp_demux_046:src1_startofpacket -> rsp_mux_003:sink44_startofpacket
	wire          rsp_demux_046_src1_endofpacket;                                                     // rsp_demux_046:src1_endofpacket -> rsp_mux_003:sink44_endofpacket
	wire          rsp_demux_046_src2_valid;                                                           // rsp_demux_046:src2_valid -> rsp_mux_004:sink44_valid
	wire  [134:0] rsp_demux_046_src2_data;                                                            // rsp_demux_046:src2_data -> rsp_mux_004:sink44_data
	wire          rsp_demux_046_src2_ready;                                                           // rsp_mux_004:sink44_ready -> rsp_demux_046:src2_ready
	wire   [50:0] rsp_demux_046_src2_channel;                                                         // rsp_demux_046:src2_channel -> rsp_mux_004:sink44_channel
	wire          rsp_demux_046_src2_startofpacket;                                                   // rsp_demux_046:src2_startofpacket -> rsp_mux_004:sink44_startofpacket
	wire          rsp_demux_046_src2_endofpacket;                                                     // rsp_demux_046:src2_endofpacket -> rsp_mux_004:sink44_endofpacket
	wire          rsp_demux_047_src0_valid;                                                           // rsp_demux_047:src0_valid -> rsp_mux_002:sink47_valid
	wire  [134:0] rsp_demux_047_src0_data;                                                            // rsp_demux_047:src0_data -> rsp_mux_002:sink47_data
	wire          rsp_demux_047_src0_ready;                                                           // rsp_mux_002:sink47_ready -> rsp_demux_047:src0_ready
	wire   [50:0] rsp_demux_047_src0_channel;                                                         // rsp_demux_047:src0_channel -> rsp_mux_002:sink47_channel
	wire          rsp_demux_047_src0_startofpacket;                                                   // rsp_demux_047:src0_startofpacket -> rsp_mux_002:sink47_startofpacket
	wire          rsp_demux_047_src0_endofpacket;                                                     // rsp_demux_047:src0_endofpacket -> rsp_mux_002:sink47_endofpacket
	wire          rsp_demux_047_src1_valid;                                                           // rsp_demux_047:src1_valid -> rsp_mux_003:sink45_valid
	wire  [134:0] rsp_demux_047_src1_data;                                                            // rsp_demux_047:src1_data -> rsp_mux_003:sink45_data
	wire          rsp_demux_047_src1_ready;                                                           // rsp_mux_003:sink45_ready -> rsp_demux_047:src1_ready
	wire   [50:0] rsp_demux_047_src1_channel;                                                         // rsp_demux_047:src1_channel -> rsp_mux_003:sink45_channel
	wire          rsp_demux_047_src1_startofpacket;                                                   // rsp_demux_047:src1_startofpacket -> rsp_mux_003:sink45_startofpacket
	wire          rsp_demux_047_src1_endofpacket;                                                     // rsp_demux_047:src1_endofpacket -> rsp_mux_003:sink45_endofpacket
	wire          rsp_demux_047_src2_valid;                                                           // rsp_demux_047:src2_valid -> rsp_mux_004:sink45_valid
	wire  [134:0] rsp_demux_047_src2_data;                                                            // rsp_demux_047:src2_data -> rsp_mux_004:sink45_data
	wire          rsp_demux_047_src2_ready;                                                           // rsp_mux_004:sink45_ready -> rsp_demux_047:src2_ready
	wire   [50:0] rsp_demux_047_src2_channel;                                                         // rsp_demux_047:src2_channel -> rsp_mux_004:sink45_channel
	wire          rsp_demux_047_src2_startofpacket;                                                   // rsp_demux_047:src2_startofpacket -> rsp_mux_004:sink45_startofpacket
	wire          rsp_demux_047_src2_endofpacket;                                                     // rsp_demux_047:src2_endofpacket -> rsp_mux_004:sink45_endofpacket
	wire          rsp_demux_048_src0_valid;                                                           // rsp_demux_048:src0_valid -> rsp_mux_002:sink48_valid
	wire  [134:0] rsp_demux_048_src0_data;                                                            // rsp_demux_048:src0_data -> rsp_mux_002:sink48_data
	wire          rsp_demux_048_src0_ready;                                                           // rsp_mux_002:sink48_ready -> rsp_demux_048:src0_ready
	wire   [50:0] rsp_demux_048_src0_channel;                                                         // rsp_demux_048:src0_channel -> rsp_mux_002:sink48_channel
	wire          rsp_demux_048_src0_startofpacket;                                                   // rsp_demux_048:src0_startofpacket -> rsp_mux_002:sink48_startofpacket
	wire          rsp_demux_048_src0_endofpacket;                                                     // rsp_demux_048:src0_endofpacket -> rsp_mux_002:sink48_endofpacket
	wire          rsp_demux_048_src1_valid;                                                           // rsp_demux_048:src1_valid -> rsp_mux_003:sink46_valid
	wire  [134:0] rsp_demux_048_src1_data;                                                            // rsp_demux_048:src1_data -> rsp_mux_003:sink46_data
	wire          rsp_demux_048_src1_ready;                                                           // rsp_mux_003:sink46_ready -> rsp_demux_048:src1_ready
	wire   [50:0] rsp_demux_048_src1_channel;                                                         // rsp_demux_048:src1_channel -> rsp_mux_003:sink46_channel
	wire          rsp_demux_048_src1_startofpacket;                                                   // rsp_demux_048:src1_startofpacket -> rsp_mux_003:sink46_startofpacket
	wire          rsp_demux_048_src1_endofpacket;                                                     // rsp_demux_048:src1_endofpacket -> rsp_mux_003:sink46_endofpacket
	wire          rsp_demux_048_src2_valid;                                                           // rsp_demux_048:src2_valid -> rsp_mux_004:sink46_valid
	wire  [134:0] rsp_demux_048_src2_data;                                                            // rsp_demux_048:src2_data -> rsp_mux_004:sink46_data
	wire          rsp_demux_048_src2_ready;                                                           // rsp_mux_004:sink46_ready -> rsp_demux_048:src2_ready
	wire   [50:0] rsp_demux_048_src2_channel;                                                         // rsp_demux_048:src2_channel -> rsp_mux_004:sink46_channel
	wire          rsp_demux_048_src2_startofpacket;                                                   // rsp_demux_048:src2_startofpacket -> rsp_mux_004:sink46_startofpacket
	wire          rsp_demux_048_src2_endofpacket;                                                     // rsp_demux_048:src2_endofpacket -> rsp_mux_004:sink46_endofpacket
	wire          rsp_demux_049_src0_valid;                                                           // rsp_demux_049:src0_valid -> rsp_mux_002:sink49_valid
	wire  [134:0] rsp_demux_049_src0_data;                                                            // rsp_demux_049:src0_data -> rsp_mux_002:sink49_data
	wire          rsp_demux_049_src0_ready;                                                           // rsp_mux_002:sink49_ready -> rsp_demux_049:src0_ready
	wire   [50:0] rsp_demux_049_src0_channel;                                                         // rsp_demux_049:src0_channel -> rsp_mux_002:sink49_channel
	wire          rsp_demux_049_src0_startofpacket;                                                   // rsp_demux_049:src0_startofpacket -> rsp_mux_002:sink49_startofpacket
	wire          rsp_demux_049_src0_endofpacket;                                                     // rsp_demux_049:src0_endofpacket -> rsp_mux_002:sink49_endofpacket
	wire          rsp_demux_049_src1_valid;                                                           // rsp_demux_049:src1_valid -> rsp_mux_003:sink47_valid
	wire  [134:0] rsp_demux_049_src1_data;                                                            // rsp_demux_049:src1_data -> rsp_mux_003:sink47_data
	wire          rsp_demux_049_src1_ready;                                                           // rsp_mux_003:sink47_ready -> rsp_demux_049:src1_ready
	wire   [50:0] rsp_demux_049_src1_channel;                                                         // rsp_demux_049:src1_channel -> rsp_mux_003:sink47_channel
	wire          rsp_demux_049_src1_startofpacket;                                                   // rsp_demux_049:src1_startofpacket -> rsp_mux_003:sink47_startofpacket
	wire          rsp_demux_049_src1_endofpacket;                                                     // rsp_demux_049:src1_endofpacket -> rsp_mux_003:sink47_endofpacket
	wire          rsp_demux_049_src2_valid;                                                           // rsp_demux_049:src2_valid -> rsp_mux_004:sink47_valid
	wire  [134:0] rsp_demux_049_src2_data;                                                            // rsp_demux_049:src2_data -> rsp_mux_004:sink47_data
	wire          rsp_demux_049_src2_ready;                                                           // rsp_mux_004:sink47_ready -> rsp_demux_049:src2_ready
	wire   [50:0] rsp_demux_049_src2_channel;                                                         // rsp_demux_049:src2_channel -> rsp_mux_004:sink47_channel
	wire          rsp_demux_049_src2_startofpacket;                                                   // rsp_demux_049:src2_startofpacket -> rsp_mux_004:sink47_startofpacket
	wire          rsp_demux_049_src2_endofpacket;                                                     // rsp_demux_049:src2_endofpacket -> rsp_mux_004:sink47_endofpacket
	wire          rsp_demux_050_src0_valid;                                                           // rsp_demux_050:src0_valid -> rsp_mux_002:sink50_valid
	wire  [134:0] rsp_demux_050_src0_data;                                                            // rsp_demux_050:src0_data -> rsp_mux_002:sink50_data
	wire          rsp_demux_050_src0_ready;                                                           // rsp_mux_002:sink50_ready -> rsp_demux_050:src0_ready
	wire   [50:0] rsp_demux_050_src0_channel;                                                         // rsp_demux_050:src0_channel -> rsp_mux_002:sink50_channel
	wire          rsp_demux_050_src0_startofpacket;                                                   // rsp_demux_050:src0_startofpacket -> rsp_mux_002:sink50_startofpacket
	wire          rsp_demux_050_src0_endofpacket;                                                     // rsp_demux_050:src0_endofpacket -> rsp_mux_002:sink50_endofpacket
	wire          rsp_demux_050_src1_valid;                                                           // rsp_demux_050:src1_valid -> rsp_mux_003:sink48_valid
	wire  [134:0] rsp_demux_050_src1_data;                                                            // rsp_demux_050:src1_data -> rsp_mux_003:sink48_data
	wire          rsp_demux_050_src1_ready;                                                           // rsp_mux_003:sink48_ready -> rsp_demux_050:src1_ready
	wire   [50:0] rsp_demux_050_src1_channel;                                                         // rsp_demux_050:src1_channel -> rsp_mux_003:sink48_channel
	wire          rsp_demux_050_src1_startofpacket;                                                   // rsp_demux_050:src1_startofpacket -> rsp_mux_003:sink48_startofpacket
	wire          rsp_demux_050_src1_endofpacket;                                                     // rsp_demux_050:src1_endofpacket -> rsp_mux_003:sink48_endofpacket
	wire          rsp_demux_050_src2_valid;                                                           // rsp_demux_050:src2_valid -> rsp_mux_004:sink48_valid
	wire  [134:0] rsp_demux_050_src2_data;                                                            // rsp_demux_050:src2_data -> rsp_mux_004:sink48_data
	wire          rsp_demux_050_src2_ready;                                                           // rsp_mux_004:sink48_ready -> rsp_demux_050:src2_ready
	wire   [50:0] rsp_demux_050_src2_channel;                                                         // rsp_demux_050:src2_channel -> rsp_mux_004:sink48_channel
	wire          rsp_demux_050_src2_startofpacket;                                                   // rsp_demux_050:src2_startofpacket -> rsp_mux_004:sink48_startofpacket
	wire          rsp_demux_050_src2_endofpacket;                                                     // rsp_demux_050:src2_endofpacket -> rsp_mux_004:sink48_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_valid
	wire  [134:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                           // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire   [50:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:in_endofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid;         // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_valid -> cmd_mux:sink2_valid
	wire  [170:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data;          // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_data -> cmd_mux:sink2_data
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready;         // cmd_mux:sink2_ready -> fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_ready
	wire   [50:0] fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel;       // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_channel -> cmd_mux:sink2_channel
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket; // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket;   // fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src2_valid;                                                               // rsp_demux:src2_valid -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_valid
	wire  [170:0] rsp_demux_src2_data;                                                                // rsp_demux:src2_data -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                               // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire   [50:0] rsp_demux_src2_channel;                                                             // rsp_demux:src2_channel -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                       // rsp_demux:src2_startofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                         // rsp_demux:src2_endofpacket -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid;         // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [134:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data;          // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready;         // rsp_mux_002:sink0_ready -> onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_ready
	wire   [50:0] onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel;       // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket; // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket;   // onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire   [50:0] fpga_only_master_master_limiter_cmd_valid_data;                                     // fpga_only_master_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [50:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [50:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                                     // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [65:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                                      // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          adc_0_adc_slave_agent_rdata_fifo_out_valid;                                         // adc_0_adc_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] adc_0_adc_slave_agent_rdata_fifo_out_data;                                          // adc_0_adc_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          adc_0_adc_slave_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_001:in_0_ready -> adc_0_adc_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> adc_0_adc_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> adc_0_adc_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // adc_0_adc_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> adc_0_adc_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                             // avalon_st_adapter_002:in_0_ready -> jtag_uart_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid;                          // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data;                           // intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_003:in_0_ready -> intr_capturer_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> intr_capturer_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_valid;                                // sysid_qsys_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_out_data;                                 // sysid_qsys_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_004:in_0_ready -> sysid_qsys_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          dipsw_pio_s1_agent_rdata_fifo_out_valid;                                            // dipsw_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] dipsw_pio_s1_agent_rdata_fifo_out_data;                                             // dipsw_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          dipsw_pio_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_005:in_0_ready -> dipsw_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> dipsw_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> dipsw_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // dipsw_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> dipsw_pio_s1_agent:rdata_fifo_sink_error
	wire          button_pio_s1_agent_rdata_fifo_out_valid;                                           // button_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] button_pio_s1_agent_rdata_fifo_out_data;                                            // button_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          button_pio_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_006:in_0_ready -> button_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> button_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> button_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // button_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> button_pio_s1_agent:rdata_fifo_sink_error
	wire          gpio_pio_0_s1_agent_rdata_fifo_out_valid;                                           // gpio_pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] gpio_pio_0_s1_agent_rdata_fifo_out_data;                                            // gpio_pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          gpio_pio_0_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_007:in_0_ready -> gpio_pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> gpio_pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> gpio_pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // gpio_pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> gpio_pio_0_s1_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_out_valid;                                              // led_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_out_data;                                               // led_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_008:in_0_ready -> led_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_0_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] quad_pio_0_s1_agent_rdata_fifo_out_data;                                            // quad_pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          quad_pio_0_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_009:in_0_ready -> quad_pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> quad_pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> quad_pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // quad_pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> quad_pio_0_s1_agent:rdata_fifo_sink_error
	wire          quad_reset_pio_s1_agent_rdata_fifo_out_valid;                                       // quad_reset_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] quad_reset_pio_s1_agent_rdata_fifo_out_data;                                        // quad_reset_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          quad_reset_pio_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_010:in_0_ready -> quad_reset_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> quad_reset_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> quad_reset_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // quad_reset_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> quad_reset_pio_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_0_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] pid_correction_pio_0_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          pid_correction_pio_0_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_011:in_0_ready -> pid_correction_pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> pid_correction_pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> pid_correction_pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // pid_correction_pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> pid_correction_pio_0_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_0_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] pid_error_pio_0_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          pid_error_pio_0_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_012:in_0_ready -> pid_error_pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> pid_error_pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> pid_error_pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // pid_error_pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> pid_error_pio_0_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_1_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] quad_pio_1_s1_agent_rdata_fifo_out_data;                                            // quad_pio_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          quad_pio_1_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_013:in_0_ready -> quad_pio_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> quad_pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> quad_pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // quad_pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> quad_pio_1_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_2_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] quad_pio_2_s1_agent_rdata_fifo_out_data;                                            // quad_pio_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          quad_pio_2_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_014:in_0_ready -> quad_pio_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> quad_pio_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> quad_pio_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // quad_pio_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> quad_pio_2_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_3_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] quad_pio_3_s1_agent_rdata_fifo_out_data;                                            // quad_pio_3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          quad_pio_3_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_015:in_0_ready -> quad_pio_3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> quad_pio_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> quad_pio_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // quad_pio_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> quad_pio_3_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_4_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] quad_pio_4_s1_agent_rdata_fifo_out_data;                                            // quad_pio_4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          quad_pio_4_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_016:in_0_ready -> quad_pio_4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> quad_pio_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> quad_pio_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // quad_pio_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> quad_pio_4_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_5_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] quad_pio_5_s1_agent_rdata_fifo_out_data;                                            // quad_pio_5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          quad_pio_5_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_017:in_0_ready -> quad_pio_5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> quad_pio_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> quad_pio_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // quad_pio_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> quad_pio_5_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_6_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_6_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] quad_pio_6_s1_agent_rdata_fifo_out_data;                                            // quad_pio_6_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          quad_pio_6_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_018:in_0_ready -> quad_pio_6_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> quad_pio_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> quad_pio_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // quad_pio_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> quad_pio_6_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_7_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_7_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] quad_pio_7_s1_agent_rdata_fifo_out_data;                                            // quad_pio_7_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          quad_pio_7_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_019:in_0_ready -> quad_pio_7_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> quad_pio_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> quad_pio_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // quad_pio_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> quad_pio_7_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_1_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] pid_error_pio_1_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          pid_error_pio_1_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_020:in_0_ready -> pid_error_pio_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> pid_error_pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> pid_error_pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // pid_error_pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> pid_error_pio_1_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_2_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] pid_error_pio_2_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          pid_error_pio_2_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_021:in_0_ready -> pid_error_pio_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> pid_error_pio_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> pid_error_pio_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // pid_error_pio_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> pid_error_pio_2_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_3_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] pid_error_pio_3_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          pid_error_pio_3_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_022:in_0_ready -> pid_error_pio_3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> pid_error_pio_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> pid_error_pio_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // pid_error_pio_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> pid_error_pio_3_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_4_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] pid_error_pio_4_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          pid_error_pio_4_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_023:in_0_ready -> pid_error_pio_4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> pid_error_pio_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> pid_error_pio_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // pid_error_pio_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> pid_error_pio_4_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_5_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] pid_error_pio_5_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          pid_error_pio_5_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_024:in_0_ready -> pid_error_pio_5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                  // avalon_st_adapter_024:out_0_valid -> pid_error_pio_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                   // avalon_st_adapter_024:out_0_data -> pid_error_pio_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                  // pid_error_pio_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                  // avalon_st_adapter_024:out_0_error -> pid_error_pio_5_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_6_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_6_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] pid_error_pio_6_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_6_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_025:in_0_data
	wire          pid_error_pio_6_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_025:in_0_ready -> pid_error_pio_6_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                  // avalon_st_adapter_025:out_0_valid -> pid_error_pio_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                   // avalon_st_adapter_025:out_0_data -> pid_error_pio_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                  // pid_error_pio_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                  // avalon_st_adapter_025:out_0_error -> pid_error_pio_6_s1_agent:rdata_fifo_sink_error
	wire          pid_error_pio_7_s1_agent_rdata_fifo_out_valid;                                      // pid_error_pio_7_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] pid_error_pio_7_s1_agent_rdata_fifo_out_data;                                       // pid_error_pio_7_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_026:in_0_data
	wire          pid_error_pio_7_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_026:in_0_ready -> pid_error_pio_7_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                  // avalon_st_adapter_026:out_0_valid -> pid_error_pio_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                   // avalon_st_adapter_026:out_0_data -> pid_error_pio_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                  // pid_error_pio_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                  // avalon_st_adapter_026:out_0_error -> pid_error_pio_7_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_1_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] pid_correction_pio_1_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_027:in_0_data
	wire          pid_correction_pio_1_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_027:in_0_ready -> pid_correction_pio_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                  // avalon_st_adapter_027:out_0_valid -> pid_correction_pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                   // avalon_st_adapter_027:out_0_data -> pid_correction_pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                  // pid_correction_pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                  // avalon_st_adapter_027:out_0_error -> pid_correction_pio_1_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_2_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] pid_correction_pio_2_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_028:in_0_data
	wire          pid_correction_pio_2_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_028:in_0_ready -> pid_correction_pio_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                  // avalon_st_adapter_028:out_0_valid -> pid_correction_pio_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                   // avalon_st_adapter_028:out_0_data -> pid_correction_pio_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                  // pid_correction_pio_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                  // avalon_st_adapter_028:out_0_error -> pid_correction_pio_2_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_3_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] pid_correction_pio_3_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_029:in_0_data
	wire          pid_correction_pio_3_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_029:in_0_ready -> pid_correction_pio_3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                  // avalon_st_adapter_029:out_0_valid -> pid_correction_pio_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                   // avalon_st_adapter_029:out_0_data -> pid_correction_pio_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                  // pid_correction_pio_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                  // avalon_st_adapter_029:out_0_error -> pid_correction_pio_3_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_5_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] pid_correction_pio_5_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_030:in_0_data
	wire          pid_correction_pio_5_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_030:in_0_ready -> pid_correction_pio_5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                  // avalon_st_adapter_030:out_0_valid -> pid_correction_pio_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                                   // avalon_st_adapter_030:out_0_data -> pid_correction_pio_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                  // pid_correction_pio_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                  // avalon_st_adapter_030:out_0_error -> pid_correction_pio_5_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_6_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_6_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] pid_correction_pio_6_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_6_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_031:in_0_data
	wire          pid_correction_pio_6_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_031:in_0_ready -> pid_correction_pio_6_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                  // avalon_st_adapter_031:out_0_valid -> pid_correction_pio_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                                   // avalon_st_adapter_031:out_0_data -> pid_correction_pio_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                  // pid_correction_pio_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                  // avalon_st_adapter_031:out_0_error -> pid_correction_pio_6_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_7_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_7_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_032:in_0_valid
	wire   [33:0] pid_correction_pio_7_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_7_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_032:in_0_data
	wire          pid_correction_pio_7_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_032:in_0_ready -> pid_correction_pio_7_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_032_out_0_valid;                                                  // avalon_st_adapter_032:out_0_valid -> pid_correction_pio_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_032_out_0_data;                                                   // avalon_st_adapter_032:out_0_data -> pid_correction_pio_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                                  // pid_correction_pio_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                                  // avalon_st_adapter_032:out_0_error -> pid_correction_pio_7_s1_agent:rdata_fifo_sink_error
	wire          pid_correction_pio_4_s1_agent_rdata_fifo_out_valid;                                 // pid_correction_pio_4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_033:in_0_valid
	wire   [33:0] pid_correction_pio_4_s1_agent_rdata_fifo_out_data;                                  // pid_correction_pio_4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_033:in_0_data
	wire          pid_correction_pio_4_s1_agent_rdata_fifo_out_ready;                                 // avalon_st_adapter_033:in_0_ready -> pid_correction_pio_4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_033_out_0_valid;                                                  // avalon_st_adapter_033:out_0_valid -> pid_correction_pio_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_033_out_0_data;                                                   // avalon_st_adapter_033:out_0_data -> pid_correction_pio_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                                  // pid_correction_pio_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                                  // avalon_st_adapter_033:out_0_error -> pid_correction_pio_4_s1_agent:rdata_fifo_sink_error
	wire          pid_values_pio_s1_agent_rdata_fifo_out_valid;                                       // pid_values_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_034:in_0_valid
	wire   [33:0] pid_values_pio_s1_agent_rdata_fifo_out_data;                                        // pid_values_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_034:in_0_data
	wire          pid_values_pio_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_034:in_0_ready -> pid_values_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_034_out_0_valid;                                                  // avalon_st_adapter_034:out_0_valid -> pid_values_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_034_out_0_data;                                                   // avalon_st_adapter_034:out_0_data -> pid_values_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                                  // pid_values_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                                  // avalon_st_adapter_034:out_0_error -> pid_values_pio_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_0_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_035:in_0_valid
	wire   [33:0] pwm_pio_0_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_035:in_0_data
	wire          pwm_pio_0_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_035:in_0_ready -> pwm_pio_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_035_out_0_valid;                                                  // avalon_st_adapter_035:out_0_valid -> pwm_pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_035_out_0_data;                                                   // avalon_st_adapter_035:out_0_data -> pwm_pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                                  // pwm_pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                                  // avalon_st_adapter_035:out_0_error -> pwm_pio_0_s1_agent:rdata_fifo_sink_error
	wire          gpio_pio_1_s1_agent_rdata_fifo_out_valid;                                           // gpio_pio_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_036:in_0_valid
	wire   [33:0] gpio_pio_1_s1_agent_rdata_fifo_out_data;                                            // gpio_pio_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_036:in_0_data
	wire          gpio_pio_1_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_036:in_0_ready -> gpio_pio_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_036_out_0_valid;                                                  // avalon_st_adapter_036:out_0_valid -> gpio_pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_036_out_0_data;                                                   // avalon_st_adapter_036:out_0_data -> gpio_pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                                  // gpio_pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                                  // avalon_st_adapter_036:out_0_error -> gpio_pio_1_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_1_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_037:in_0_valid
	wire   [33:0] pwm_pio_1_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_037:in_0_data
	wire          pwm_pio_1_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_037:in_0_ready -> pwm_pio_1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_037_out_0_valid;                                                  // avalon_st_adapter_037:out_0_valid -> pwm_pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_037_out_0_data;                                                   // avalon_st_adapter_037:out_0_data -> pwm_pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_037_out_0_ready;                                                  // pwm_pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_037:out_0_ready
	wire    [0:0] avalon_st_adapter_037_out_0_error;                                                  // avalon_st_adapter_037:out_0_error -> pwm_pio_1_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_2_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_038:in_0_valid
	wire   [33:0] pwm_pio_2_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_038:in_0_data
	wire          pwm_pio_2_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_038:in_0_ready -> pwm_pio_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_038_out_0_valid;                                                  // avalon_st_adapter_038:out_0_valid -> pwm_pio_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_038_out_0_data;                                                   // avalon_st_adapter_038:out_0_data -> pwm_pio_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_038_out_0_ready;                                                  // pwm_pio_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_038:out_0_ready
	wire    [0:0] avalon_st_adapter_038_out_0_error;                                                  // avalon_st_adapter_038:out_0_error -> pwm_pio_2_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_3_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_3_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_039:in_0_valid
	wire   [33:0] pwm_pio_3_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_3_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_039:in_0_data
	wire          pwm_pio_3_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_039:in_0_ready -> pwm_pio_3_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_039_out_0_valid;                                                  // avalon_st_adapter_039:out_0_valid -> pwm_pio_3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_039_out_0_data;                                                   // avalon_st_adapter_039:out_0_data -> pwm_pio_3_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_039_out_0_ready;                                                  // pwm_pio_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_039:out_0_ready
	wire    [0:0] avalon_st_adapter_039_out_0_error;                                                  // avalon_st_adapter_039:out_0_error -> pwm_pio_3_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_4_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_040:in_0_valid
	wire   [33:0] pwm_pio_4_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_040:in_0_data
	wire          pwm_pio_4_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_040:in_0_ready -> pwm_pio_4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_040_out_0_valid;                                                  // avalon_st_adapter_040:out_0_valid -> pwm_pio_4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_040_out_0_data;                                                   // avalon_st_adapter_040:out_0_data -> pwm_pio_4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_040_out_0_ready;                                                  // pwm_pio_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_040:out_0_ready
	wire    [0:0] avalon_st_adapter_040_out_0_error;                                                  // avalon_st_adapter_040:out_0_error -> pwm_pio_4_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_5_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_5_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_041:in_0_valid
	wire   [33:0] pwm_pio_5_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_5_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_041:in_0_data
	wire          pwm_pio_5_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_041:in_0_ready -> pwm_pio_5_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_041_out_0_valid;                                                  // avalon_st_adapter_041:out_0_valid -> pwm_pio_5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_041_out_0_data;                                                   // avalon_st_adapter_041:out_0_data -> pwm_pio_5_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_041_out_0_ready;                                                  // pwm_pio_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_041:out_0_ready
	wire    [0:0] avalon_st_adapter_041_out_0_error;                                                  // avalon_st_adapter_041:out_0_error -> pwm_pio_5_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_6_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_6_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_042:in_0_valid
	wire   [33:0] pwm_pio_6_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_6_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_042:in_0_data
	wire          pwm_pio_6_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_042:in_0_ready -> pwm_pio_6_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_042_out_0_valid;                                                  // avalon_st_adapter_042:out_0_valid -> pwm_pio_6_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_042_out_0_data;                                                   // avalon_st_adapter_042:out_0_data -> pwm_pio_6_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_042_out_0_ready;                                                  // pwm_pio_6_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_042:out_0_ready
	wire    [0:0] avalon_st_adapter_042_out_0_error;                                                  // avalon_st_adapter_042:out_0_error -> pwm_pio_6_s1_agent:rdata_fifo_sink_error
	wire          pwm_pio_7_s1_agent_rdata_fifo_out_valid;                                            // pwm_pio_7_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_043:in_0_valid
	wire   [33:0] pwm_pio_7_s1_agent_rdata_fifo_out_data;                                             // pwm_pio_7_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_043:in_0_data
	wire          pwm_pio_7_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_043:in_0_ready -> pwm_pio_7_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_043_out_0_valid;                                                  // avalon_st_adapter_043:out_0_valid -> pwm_pio_7_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_043_out_0_data;                                                   // avalon_st_adapter_043:out_0_data -> pwm_pio_7_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_043_out_0_ready;                                                  // pwm_pio_7_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_043:out_0_ready
	wire    [0:0] avalon_st_adapter_043_out_0_error;                                                  // avalon_st_adapter_043:out_0_error -> pwm_pio_7_s1_agent:rdata_fifo_sink_error
	wire          limit_pio_s1_agent_rdata_fifo_out_valid;                                            // limit_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_044:in_0_valid
	wire   [33:0] limit_pio_s1_agent_rdata_fifo_out_data;                                             // limit_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_044:in_0_data
	wire          limit_pio_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_044:in_0_ready -> limit_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_044_out_0_valid;                                                  // avalon_st_adapter_044:out_0_valid -> limit_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_044_out_0_data;                                                   // avalon_st_adapter_044:out_0_data -> limit_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_044_out_0_ready;                                                  // limit_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_044:out_0_ready
	wire    [0:0] avalon_st_adapter_044_out_0_error;                                                  // avalon_st_adapter_044:out_0_error -> limit_pio_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_8_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_8_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_045:in_0_valid
	wire   [33:0] quad_pio_8_s1_agent_rdata_fifo_out_data;                                            // quad_pio_8_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_045:in_0_data
	wire          quad_pio_8_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_045:in_0_ready -> quad_pio_8_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_045_out_0_valid;                                                  // avalon_st_adapter_045:out_0_valid -> quad_pio_8_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_045_out_0_data;                                                   // avalon_st_adapter_045:out_0_data -> quad_pio_8_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_045_out_0_ready;                                                  // quad_pio_8_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_045:out_0_ready
	wire    [0:0] avalon_st_adapter_045_out_0_error;                                                  // avalon_st_adapter_045:out_0_error -> quad_pio_8_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_9_s1_agent_rdata_fifo_out_valid;                                           // quad_pio_9_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_046:in_0_valid
	wire   [33:0] quad_pio_9_s1_agent_rdata_fifo_out_data;                                            // quad_pio_9_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_046:in_0_data
	wire          quad_pio_9_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_046:in_0_ready -> quad_pio_9_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_046_out_0_valid;                                                  // avalon_st_adapter_046:out_0_valid -> quad_pio_9_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_046_out_0_data;                                                   // avalon_st_adapter_046:out_0_data -> quad_pio_9_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_046_out_0_ready;                                                  // quad_pio_9_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_046:out_0_ready
	wire    [0:0] avalon_st_adapter_046_out_0_error;                                                  // avalon_st_adapter_046:out_0_error -> quad_pio_9_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_10_s1_agent_rdata_fifo_out_valid;                                          // quad_pio_10_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_047:in_0_valid
	wire   [33:0] quad_pio_10_s1_agent_rdata_fifo_out_data;                                           // quad_pio_10_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_047:in_0_data
	wire          quad_pio_10_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_047:in_0_ready -> quad_pio_10_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_047_out_0_valid;                                                  // avalon_st_adapter_047:out_0_valid -> quad_pio_10_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_047_out_0_data;                                                   // avalon_st_adapter_047:out_0_data -> quad_pio_10_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_047_out_0_ready;                                                  // quad_pio_10_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_047:out_0_ready
	wire    [0:0] avalon_st_adapter_047_out_0_error;                                                  // avalon_st_adapter_047:out_0_error -> quad_pio_10_s1_agent:rdata_fifo_sink_error
	wire          quad_pio_11_s1_agent_rdata_fifo_out_valid;                                          // quad_pio_11_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_048:in_0_valid
	wire   [33:0] quad_pio_11_s1_agent_rdata_fifo_out_data;                                           // quad_pio_11_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_048:in_0_data
	wire          quad_pio_11_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_048:in_0_ready -> quad_pio_11_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_048_out_0_valid;                                                  // avalon_st_adapter_048:out_0_valid -> quad_pio_11_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_048_out_0_data;                                                   // avalon_st_adapter_048:out_0_data -> quad_pio_11_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_048_out_0_ready;                                                  // quad_pio_11_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_048:out_0_ready
	wire    [0:0] avalon_st_adapter_048_out_0_error;                                                  // avalon_st_adapter_048:out_0_error -> quad_pio_11_s1_agent:rdata_fifo_sink_error
	wire          heartbeat_s1_agent_rdata_fifo_out_valid;                                            // heartbeat_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_049:in_0_valid
	wire   [33:0] heartbeat_s1_agent_rdata_fifo_out_data;                                             // heartbeat_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_049:in_0_data
	wire          heartbeat_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_049:in_0_ready -> heartbeat_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_049_out_0_valid;                                                  // avalon_st_adapter_049:out_0_valid -> heartbeat_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_049_out_0_data;                                                   // avalon_st_adapter_049:out_0_data -> heartbeat_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_049_out_0_ready;                                                  // heartbeat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_049:out_0_ready
	wire    [0:0] avalon_st_adapter_049_out_0_error;                                                  // avalon_st_adapter_049:out_0_error -> heartbeat_s1_agent:rdata_fifo_sink_error
	wire          e_stop_s1_agent_rdata_fifo_out_valid;                                               // e_stop_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_050:in_0_valid
	wire   [33:0] e_stop_s1_agent_rdata_fifo_out_data;                                                // e_stop_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_050:in_0_data
	wire          e_stop_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_050:in_0_ready -> e_stop_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_050_out_0_valid;                                                  // avalon_st_adapter_050:out_0_valid -> e_stop_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_050_out_0_data;                                                   // avalon_st_adapter_050:out_0_data -> e_stop_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_050_out_0_ready;                                                  // e_stop_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_050:out_0_ready
	wire    [0:0] avalon_st_adapter_050_out_0_error;                                                  // avalon_st_adapter_050:out_0_error -> e_stop_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fpga_only_master_master_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fpga_only_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fpga_only_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (fpga_only_master_master_byteenable),                                         //                          .byteenable
		.av_read                (fpga_only_master_master_read),                                               //                          .read
		.av_readdata            (fpga_only_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (fpga_only_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fpga_only_master_master_write),                                              //                          .write
		.av_writedata           (fpga_only_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                       //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                           //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_0_adc_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_0_adc_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (adc_0_adc_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (adc_0_adc_slave_agent_m0_read),                       //                         .read
		.uav_write              (adc_0_adc_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (adc_0_adc_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (adc_0_adc_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (adc_0_adc_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (adc_0_adc_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (adc_0_adc_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (adc_0_adc_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (adc_0_adc_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (adc_0_adc_slave_address),                             //      avalon_anti_slave_0.address
		.av_write               (adc_0_adc_slave_write),                               //                         .write
		.av_read                (adc_0_adc_slave_read),                                //                         .read
		.av_readdata            (adc_0_adc_slave_readdata),                            //                         .readdata
		.av_writedata           (adc_0_adc_slave_writedata),                           //                         .writedata
		.av_waitrequest         (adc_0_adc_slave_waitrequest),                         //                         .waitrequest
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),           //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                   //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                    //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),                //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),               //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),             //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intr_capturer_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (intr_capturer_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (intr_capturer_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (intr_capturer_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (intr_capturer_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (intr_capturer_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (intr_capturer_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (intr_capturer_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_read                (intr_capturer_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (intr_capturer_0_avalon_slave_0_readdata),               //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),              //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                    //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),                   //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dipsw_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dipsw_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (dipsw_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (dipsw_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (dipsw_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (dipsw_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (dipsw_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (dipsw_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (dipsw_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (dipsw_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (dipsw_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (dipsw_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (dipsw_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (dipsw_pio_s1_write),                                  //                         .write
		.av_readdata            (dipsw_pio_s1_readdata),                               //                         .readdata
		.av_writedata           (dipsw_pio_s1_writedata),                              //                         .writedata
		.av_chipselect          (dipsw_pio_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_pio_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (button_pio_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (button_pio_s1_agent_m0_read),                         //                         .read
		.uav_write              (button_pio_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (button_pio_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (button_pio_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (button_pio_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (button_pio_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (button_pio_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (button_pio_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (button_pio_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (button_pio_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (button_pio_s1_write),                                 //                         .write
		.av_readdata            (button_pio_s1_readdata),                              //                         .readdata
		.av_writedata           (button_pio_s1_writedata),                             //                         .writedata
		.av_chipselect          (button_pio_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio_pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio_pio_0_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (gpio_pio_0_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (gpio_pio_0_s1_agent_m0_read),                         //                         .read
		.uav_write              (gpio_pio_0_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (gpio_pio_0_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (gpio_pio_0_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (gpio_pio_0_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (gpio_pio_0_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (gpio_pio_0_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (gpio_pio_0_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (gpio_pio_0_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (gpio_pio_0_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (gpio_pio_0_s1_write),                                 //                         .write
		.av_readdata            (gpio_pio_0_s1_readdata),                              //                         .readdata
		.av_writedata           (gpio_pio_0_s1_writedata),                             //                         .writedata
		.av_chipselect          (gpio_pio_0_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                            //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (led_pio_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                    //                         .write
		.av_readdata            (led_pio_s1_readdata),                                 //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                                //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_0_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_0_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_0_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_0_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_0_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_0_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_0_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_0_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_0_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_0_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_0_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_0_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_0_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_reset_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_reset_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (quad_reset_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (quad_reset_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (quad_reset_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (quad_reset_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (quad_reset_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (quad_reset_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (quad_reset_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (quad_reset_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (quad_reset_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (quad_reset_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (quad_reset_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (quad_reset_pio_s1_write),                             //                         .write
		.av_readdata            (quad_reset_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (quad_reset_pio_s1_writedata),                         //                         .writedata
		.av_chipselect          (quad_reset_pio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_0_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_0_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_0_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_0_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_0_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_0_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_0_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_0_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_0_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_0_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_0_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_0_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_0_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_0_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_0_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_0_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_0_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_0_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_0_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_0_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_0_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_0_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_0_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_0_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_0_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_0_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_0_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_0_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_0_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_1_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_1_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_1_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_1_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_1_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_1_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_1_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_1_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_1_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_1_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_1_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_1_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_1_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_2_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_2_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_2_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_2_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_2_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_2_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_2_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_2_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_2_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_2_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_2_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_2_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_2_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_2_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_3_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_3_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_3_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_3_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_3_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_3_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_3_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_3_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_3_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_3_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_3_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_3_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_3_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_3_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_4_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_4_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_4_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_4_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_4_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_4_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_4_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_4_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_4_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_4_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_4_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_4_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_4_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_4_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_5_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_5_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_5_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_5_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_5_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_5_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_5_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_5_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_5_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_5_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_5_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_5_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_5_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_5_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_6_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_6_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_6_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_6_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_6_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_6_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_6_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_6_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_6_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_6_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_6_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_6_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_6_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_6_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_7_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_7_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_7_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_7_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_7_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_7_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_7_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_7_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_7_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_7_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_7_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_7_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_7_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_7_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_1_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_1_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_1_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_1_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_1_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_1_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_1_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_1_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_1_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_1_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_1_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_1_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_1_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_1_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_1_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_1_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_2_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_2_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_2_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_2_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_2_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_2_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_2_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_2_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_2_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_2_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_2_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_2_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_2_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_2_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_2_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_2_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_2_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_3_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_3_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_3_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_3_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_3_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_3_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_3_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_3_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_3_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_3_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_3_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_3_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_3_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_3_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_3_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_3_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_3_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_4_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_4_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_4_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_4_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_4_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_4_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_4_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_4_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_4_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_4_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_4_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_4_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_4_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_4_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_4_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_4_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_4_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_5_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_5_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_5_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_5_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_5_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_5_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_5_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_5_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_5_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_5_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_5_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_5_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_5_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_5_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_5_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_5_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_5_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_6_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_6_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_6_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_6_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_6_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_6_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_6_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_6_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_6_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_6_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_6_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_6_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_6_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_6_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_6_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_6_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_6_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_error_pio_7_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_error_pio_7_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pid_error_pio_7_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pid_error_pio_7_s1_agent_m0_read),                    //                         .read
		.uav_write              (pid_error_pio_7_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pid_error_pio_7_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pid_error_pio_7_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pid_error_pio_7_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pid_error_pio_7_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pid_error_pio_7_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pid_error_pio_7_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pid_error_pio_7_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pid_error_pio_7_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (pid_error_pio_7_s1_write),                            //                         .write
		.av_readdata            (pid_error_pio_7_s1_readdata),                         //                         .readdata
		.av_writedata           (pid_error_pio_7_s1_writedata),                        //                         .writedata
		.av_chipselect          (pid_error_pio_7_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_1_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_1_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_1_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_1_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_1_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_1_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_1_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_1_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_1_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_1_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_1_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_1_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_1_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_2_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_2_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_2_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_2_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_2_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_2_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_2_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_2_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_2_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_2_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_2_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_2_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_2_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_2_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_3_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_3_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_3_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_3_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_3_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_3_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_3_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_3_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_3_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_3_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_3_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_3_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_3_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_3_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_5_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_5_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_5_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_5_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_5_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_5_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_5_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_5_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_5_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_5_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_5_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_5_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_5_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_5_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_6_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_6_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_6_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_6_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_6_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_6_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_6_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_6_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_6_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_6_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_6_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_6_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_6_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_6_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_7_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_7_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_7_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_7_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_7_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_7_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_7_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_7_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_7_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_7_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_7_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_7_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_7_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_7_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_correction_pio_4_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_correction_pio_4_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (pid_correction_pio_4_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (pid_correction_pio_4_s1_agent_m0_read),               //                         .read
		.uav_write              (pid_correction_pio_4_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (pid_correction_pio_4_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (pid_correction_pio_4_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (pid_correction_pio_4_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (pid_correction_pio_4_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (pid_correction_pio_4_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (pid_correction_pio_4_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (pid_correction_pio_4_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (pid_correction_pio_4_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (pid_correction_pio_4_s1_readdata),                    //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pid_values_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pid_values_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (pid_values_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (pid_values_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (pid_values_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (pid_values_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (pid_values_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (pid_values_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (pid_values_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (pid_values_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (pid_values_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (pid_values_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (pid_values_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (pid_values_pio_s1_write),                             //                         .write
		.av_readdata            (pid_values_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (pid_values_pio_s1_writedata),                         //                         .writedata
		.av_chipselect          (pid_values_pio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_0_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_0_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_0_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_0_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_0_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_0_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_0_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_0_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_0_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_0_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_0_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_0_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_0_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_0_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_0_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_0_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio_pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio_pio_1_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (gpio_pio_1_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (gpio_pio_1_s1_agent_m0_read),                         //                         .read
		.uav_write              (gpio_pio_1_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (gpio_pio_1_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (gpio_pio_1_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (gpio_pio_1_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (gpio_pio_1_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (gpio_pio_1_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (gpio_pio_1_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (gpio_pio_1_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (gpio_pio_1_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (gpio_pio_1_s1_write),                                 //                         .write
		.av_readdata            (gpio_pio_1_s1_readdata),                              //                         .readdata
		.av_writedata           (gpio_pio_1_s1_writedata),                             //                         .writedata
		.av_chipselect          (gpio_pio_1_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_1_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_1_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_1_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_1_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_1_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_1_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_1_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_1_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_1_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_1_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_1_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_1_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_1_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_1_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_1_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_1_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_2_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_2_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_2_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_2_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_2_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_2_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_2_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_2_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_2_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_2_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_2_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_2_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_2_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_2_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_2_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_2_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_2_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_3_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_3_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_3_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_3_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_3_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_3_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_3_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_3_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_3_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_3_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_3_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_3_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_3_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_3_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_3_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_3_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_3_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_4_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_4_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_4_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_4_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_4_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_4_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_4_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_4_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_4_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_4_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_4_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_4_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_4_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_4_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_4_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_4_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_4_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_5_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_5_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_5_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_5_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_5_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_5_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_5_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_5_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_5_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_5_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_5_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_5_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_5_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_5_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_5_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_5_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_5_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_6_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_6_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_6_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_6_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_6_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_6_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_6_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_6_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_6_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_6_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_6_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_6_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_6_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_6_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_6_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_6_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_6_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_pio_7_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_pio_7_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_pio_7_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_pio_7_s1_agent_m0_read),                          //                         .read
		.uav_write              (pwm_pio_7_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_pio_7_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_pio_7_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_pio_7_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_pio_7_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_pio_7_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_pio_7_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_pio_7_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_pio_7_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_pio_7_s1_write),                                  //                         .write
		.av_readdata            (pwm_pio_7_s1_readdata),                               //                         .readdata
		.av_writedata           (pwm_pio_7_s1_writedata),                              //                         .writedata
		.av_chipselect          (pwm_pio_7_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) limit_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (limit_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (limit_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (limit_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (limit_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (limit_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (limit_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (limit_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (limit_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (limit_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (limit_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (limit_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (limit_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (limit_pio_s1_readdata),                               //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_8_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_8_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_8_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_8_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_8_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_8_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_8_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_8_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_8_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_8_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_8_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_8_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_8_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_8_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_9_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_9_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_9_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (quad_pio_9_s1_agent_m0_read),                         //                         .read
		.uav_write              (quad_pio_9_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (quad_pio_9_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (quad_pio_9_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (quad_pio_9_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (quad_pio_9_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (quad_pio_9_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (quad_pio_9_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (quad_pio_9_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (quad_pio_9_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_9_s1_readdata),                              //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_10_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_10_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_10_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (quad_pio_10_s1_agent_m0_read),                        //                         .read
		.uav_write              (quad_pio_10_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (quad_pio_10_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (quad_pio_10_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (quad_pio_10_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (quad_pio_10_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (quad_pio_10_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (quad_pio_10_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (quad_pio_10_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (quad_pio_10_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_10_s1_readdata),                             //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) quad_pio_11_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (quad_pio_11_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (quad_pio_11_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (quad_pio_11_s1_agent_m0_read),                        //                         .read
		.uav_write              (quad_pio_11_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (quad_pio_11_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (quad_pio_11_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (quad_pio_11_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (quad_pio_11_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (quad_pio_11_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (quad_pio_11_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (quad_pio_11_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (quad_pio_11_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (quad_pio_11_s1_readdata),                             //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) heartbeat_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (heartbeat_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (heartbeat_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (heartbeat_s1_agent_m0_read),                          //                         .read
		.uav_write              (heartbeat_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (heartbeat_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (heartbeat_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (heartbeat_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (heartbeat_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (heartbeat_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (heartbeat_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (heartbeat_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (heartbeat_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (heartbeat_s1_write),                                  //                         .write
		.av_readdata            (heartbeat_s1_readdata),                               //                         .readdata
		.av_writedata           (heartbeat_s1_writedata),                              //                         .writedata
		.av_chipselect          (heartbeat_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) e_stop_s1_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (e_stop_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (e_stop_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (e_stop_s1_agent_m0_read),                             //                         .read
		.uav_write              (e_stop_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (e_stop_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (e_stop_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (e_stop_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (e_stop_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (e_stop_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (e_stop_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (e_stop_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (e_stop_s1_address),                                   //      avalon_anti_slave_0.address
		.av_readdata            (e_stop_s1_readdata),                                  //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (165),
		.PKT_CACHE_L               (162),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (161),
		.PKT_PROTECTION_L          (159),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (166),
		.PKT_RESPONSE_STATUS_H     (167),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (146),
		.PKT_DEST_ID_L             (141),
		.PKT_THREAD_ID_H           (158),
		.PKT_THREAD_ID_L           (147),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (168),
		.PKT_ORI_BURST_SIZE_H      (170),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (171),
		.ST_CHANNEL_W              (51),
		.ID                        (1)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                 //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                  //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                               //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                         //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                           //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                 //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                             //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                              //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                           //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                     //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                       //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                             //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (129),
		.PKT_CACHE_L               (126),
		.PKT_THREAD_ID_H           (122),
		.PKT_THREAD_ID_L           (111),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fpga_only_master_master_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (fpga_only_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fpga_only_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fpga_only_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fpga_only_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fpga_only_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fpga_only_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fpga_only_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fpga_only_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fpga_only_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fpga_only_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fpga_only_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fpga_only_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fpga_only_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fpga_only_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fpga_only_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fpga_only_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (fpga_only_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (fpga_only_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (fpga_only_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (fpga_only_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (fpga_only_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (fpga_only_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (97),
		.PKT_CACHE_H               (129),
		.PKT_CACHE_L               (126),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_THREAD_ID_H           (122),
		.PKT_THREAD_ID_L           (111),
		.PKT_QOS_L                 (98),
		.PKT_QOS_H                 (98),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.ID                        (2)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                      //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                       //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),              //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                      //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                  //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                   //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                  //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                       //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                        //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),               //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                 //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                       //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                  //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                   //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),          //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),            //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                  //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                      // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                    //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                     //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                    //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                   //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                    //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                   //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                    //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                   //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                   //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                       //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                     //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                     //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                     //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                    //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                    //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                       //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                     //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                    //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                    //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                      //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                    //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                     //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                    //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                   //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                    //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                   //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                    //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                   //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                   //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                       //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                     //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                     //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                     //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                    //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                    //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (170),
		.PKT_ORI_BURST_SIZE_L      (168),
		.PKT_RESPONSE_STATUS_H     (167),
		.PKT_RESPONSE_STATUS_L     (166),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (161),
		.PKT_PROTECTION_L          (159),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (140),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (146),
		.PKT_DEST_ID_L             (141),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (171),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (172),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_0_adc_slave_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (adc_0_adc_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (adc_0_adc_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (adc_0_adc_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (adc_0_adc_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (adc_0_adc_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (adc_0_adc_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (adc_0_adc_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (adc_0_adc_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (adc_0_adc_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (adc_0_adc_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (adc_0_adc_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (adc_0_adc_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (adc_0_adc_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (adc_0_adc_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (adc_0_adc_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (adc_0_adc_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (adc_0_adc_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (adc_0_adc_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (adc_0_adc_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (adc_0_adc_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (adc_0_adc_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (adc_0_adc_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (adc_0_adc_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (adc_0_adc_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (adc_0_adc_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (adc_0_adc_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (adc_0_adc_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (adc_0_adc_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (adc_0_adc_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (adc_0_adc_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (adc_0_adc_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (adc_0_adc_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (adc_0_adc_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_0_adc_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (adc_0_adc_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_0_adc_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_0_adc_slave_agent_rf_source_data),                //        in.data
		.in_valid          (adc_0_adc_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (adc_0_adc_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (adc_0_adc_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (adc_0_adc_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (adc_0_adc_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (adc_0_adc_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (adc_0_adc_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (adc_0_adc_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (adc_0_adc_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_0_adc_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_0_adc_slave_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (adc_0_adc_slave_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (adc_0_adc_slave_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (adc_0_adc_slave_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (adc_0_adc_slave_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (adc_0_adc_slave_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intr_capturer_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (intr_capturer_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intr_capturer_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intr_capturer_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intr_capturer_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intr_capturer_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (intr_capturer_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intr_capturer_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intr_capturer_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (intr_capturer_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intr_capturer_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (intr_capturer_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intr_capturer_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (intr_capturer_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (intr_capturer_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intr_capturer_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intr_capturer_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intr_capturer_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_qsys_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_qsys_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_qsys_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_qsys_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dipsw_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dipsw_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (dipsw_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (dipsw_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (dipsw_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (dipsw_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (dipsw_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (dipsw_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (dipsw_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (dipsw_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (dipsw_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (dipsw_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (dipsw_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (dipsw_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (dipsw_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (dipsw_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (dipsw_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (dipsw_pio_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (dipsw_pio_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (dipsw_pio_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (dipsw_pio_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (dipsw_pio_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (dipsw_pio_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (dipsw_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (dipsw_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (dipsw_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (dipsw_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (dipsw_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (dipsw_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (dipsw_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (dipsw_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (dipsw_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dipsw_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (dipsw_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (dipsw_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (dipsw_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (dipsw_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (dipsw_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (dipsw_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (dipsw_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (dipsw_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (dipsw_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (dipsw_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dipsw_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dipsw_pio_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (dipsw_pio_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (dipsw_pio_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (dipsw_pio_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (dipsw_pio_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (dipsw_pio_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_pio_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (button_pio_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (button_pio_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (button_pio_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (button_pio_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (button_pio_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (button_pio_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (button_pio_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (button_pio_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (button_pio_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (button_pio_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (button_pio_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (button_pio_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (button_pio_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (button_pio_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (button_pio_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (button_pio_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (button_pio_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (button_pio_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (button_pio_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (button_pio_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (button_pio_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (button_pio_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (button_pio_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (button_pio_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (button_pio_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (button_pio_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (button_pio_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (button_pio_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (button_pio_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (button_pio_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_pio_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (button_pio_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (button_pio_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (button_pio_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (button_pio_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (button_pio_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (button_pio_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (button_pio_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (button_pio_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (button_pio_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (button_pio_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_pio_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (button_pio_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (button_pio_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (button_pio_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (button_pio_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (button_pio_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio_pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio_pio_0_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (gpio_pio_0_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (gpio_pio_0_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (gpio_pio_0_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (gpio_pio_0_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (gpio_pio_0_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (gpio_pio_0_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (gpio_pio_0_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (gpio_pio_0_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (gpio_pio_0_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (gpio_pio_0_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (gpio_pio_0_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (gpio_pio_0_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (gpio_pio_0_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (gpio_pio_0_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (gpio_pio_0_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (gpio_pio_0_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (gpio_pio_0_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (gpio_pio_0_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (gpio_pio_0_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (gpio_pio_0_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (gpio_pio_0_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (gpio_pio_0_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (gpio_pio_0_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (gpio_pio_0_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (gpio_pio_0_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (gpio_pio_0_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (gpio_pio_0_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (gpio_pio_0_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (gpio_pio_0_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (gpio_pio_0_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (gpio_pio_0_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (gpio_pio_0_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_pio_0_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (gpio_pio_0_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_0_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (gpio_pio_0_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (gpio_pio_0_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (gpio_pio_0_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (gpio_pio_0_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (gpio_pio_0_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (gpio_pio_0_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (gpio_pio_0_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (gpio_pio_0_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (gpio_pio_0_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_0_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (gpio_pio_0_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (gpio_pio_0_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (gpio_pio_0_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (gpio_pio_0_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (gpio_pio_0_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (led_pio_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (led_pio_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (led_pio_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (led_pio_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (led_pio_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_0_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_0_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_0_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_0_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_0_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_0_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_0_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_0_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_0_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_0_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_0_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_0_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_0_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_0_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_0_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_0_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_0_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_0_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_0_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_0_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_0_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_0_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_0_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_0_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_0_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_0_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_0_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_0_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_0_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_0_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_0_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_0_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_0_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_0_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_0_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_0_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_0_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_0_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_0_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_0_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_0_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_0_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_0_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_0_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_0_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_0_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_0_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_0_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_0_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_0_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_0_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_reset_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (quad_reset_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (quad_reset_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (quad_reset_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (quad_reset_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (quad_reset_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (quad_reset_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (quad_reset_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (quad_reset_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (quad_reset_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (quad_reset_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (quad_reset_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (quad_reset_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (quad_reset_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (quad_reset_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (quad_reset_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (quad_reset_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (quad_reset_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (quad_reset_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (quad_reset_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (quad_reset_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (quad_reset_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (quad_reset_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (quad_reset_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (quad_reset_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (quad_reset_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (quad_reset_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (quad_reset_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (quad_reset_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (quad_reset_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (quad_reset_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (quad_reset_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (quad_reset_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (quad_reset_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_reset_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (quad_reset_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_reset_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_reset_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (quad_reset_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (quad_reset_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (quad_reset_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (quad_reset_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (quad_reset_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (quad_reset_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (quad_reset_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (quad_reset_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (quad_reset_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_reset_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_reset_pio_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (quad_reset_pio_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (quad_reset_pio_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (quad_reset_pio_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (quad_reset_pio_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (quad_reset_pio_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_0_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_0_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_0_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_0_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_0_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_0_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_0_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_0_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_0_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_0_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_0_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_0_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_1_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_1_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_1_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_1_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_1_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_1_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_1_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_1_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_1_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_1_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_1_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_1_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_1_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_1_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_1_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_1_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_1_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_1_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_1_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_1_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_1_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_1_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_1_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_1_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_1_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_1_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_1_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_1_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_1_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_1_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_1_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_1_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_1_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_1_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_1_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_1_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_1_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_1_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_1_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_1_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_1_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_1_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_1_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_1_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_1_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_1_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_1_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_1_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_1_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_1_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_1_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_2_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_2_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_2_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_2_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_2_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_2_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_2_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_2_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_2_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_2_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_2_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_2_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_2_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_2_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_2_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_2_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_2_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_2_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_2_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_2_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_2_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_2_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_2_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_2_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_2_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_2_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_2_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_2_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_2_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_2_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_2_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_2_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_2_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_2_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_2_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_2_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_2_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_2_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_2_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_2_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_2_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_2_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_2_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_2_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_2_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_2_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_2_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_2_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_2_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_2_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_2_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_3_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_3_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_3_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_3_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_3_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_3_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_3_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_3_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_3_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_3_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_3_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_3_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_3_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_3_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_3_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_3_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_3_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_3_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_3_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_3_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_3_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_3_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_3_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_3_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_3_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_3_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_3_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_3_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_3_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_3_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_3_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_3_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_3_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_3_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_3_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_3_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_3_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_3_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_3_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_3_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_3_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_3_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_3_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_3_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_3_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_3_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_3_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_3_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_3_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_3_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_3_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_4_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_4_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_4_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_4_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_4_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_4_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_4_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_4_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_4_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_4_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_4_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_4_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_4_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_4_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_4_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_4_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_4_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_4_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_4_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_4_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_4_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_4_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_4_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_4_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_4_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_4_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_4_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_4_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_4_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_4_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_4_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_4_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_4_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_4_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_4_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_4_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_4_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_4_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_4_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_4_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_4_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_4_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_4_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_4_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_4_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_4_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_4_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_4_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_4_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_4_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_4_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_4_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_5_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_5_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_5_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_5_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_5_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_5_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_5_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_5_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_5_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_5_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_5_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_5_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_5_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_5_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_5_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_5_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_5_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_5_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_5_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_5_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_5_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_5_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_5_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_5_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_5_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_5_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_5_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_5_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_5_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_5_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_5_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_5_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_5_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_5_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_5_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_5_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_5_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_5_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_5_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_5_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_5_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_5_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_5_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_5_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_5_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_5_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_5_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_5_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_5_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_5_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_5_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_5_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_6_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_6_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_6_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_6_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_6_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_6_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_6_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_6_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_6_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_6_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_6_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_6_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_6_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_6_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_6_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_6_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_6_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_6_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_6_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_6_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_6_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_6_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_6_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_6_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_6_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_6_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_6_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_6_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_6_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_6_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_6_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_6_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_6_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_6_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_6_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_6_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_6_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_6_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_6_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_6_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_6_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_6_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_6_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_6_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_6_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_6_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_6_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_6_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_6_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_6_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_6_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_6_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_6_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_7_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_7_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_7_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_7_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_7_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_7_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_7_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_7_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_7_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_7_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_7_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_7_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_7_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_7_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_7_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_7_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_7_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_7_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_7_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_7_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_7_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_7_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_7_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_7_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_7_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_7_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_7_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_7_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_7_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_7_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_7_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_7_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_7_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_7_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_7_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_7_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_7_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_7_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_7_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_7_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_7_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_7_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_7_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_7_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_7_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_7_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_7_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_7_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_7_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_7_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_7_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_7_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_7_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_7_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_1_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_1_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_1_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_1_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_1_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_1_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_2_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_2_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_2_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_2_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_2_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_2_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_3_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_3_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_3_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_3_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_3_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_3_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_3_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_3_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_3_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_3_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_3_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_3_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_4_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_4_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_4_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_4_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_4_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_4_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_4_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_4_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_4_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_4_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_4_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_4_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_4_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_4_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_4_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_4_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_4_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_4_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_4_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_4_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_4_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_4_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_4_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_4_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_4_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_4_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_4_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_4_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_4_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_4_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_4_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_4_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_4_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_4_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_4_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_4_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_4_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_4_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_4_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_4_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_4_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_5_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_5_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_5_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_5_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_5_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_5_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_5_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_5_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_5_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_5_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_5_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_5_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_5_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_5_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_5_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_5_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_5_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_5_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_5_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_5_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_5_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_5_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_5_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_5_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_5_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_5_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_5_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_5_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_5_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_5_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_5_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_5_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_5_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_5_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_5_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_5_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_5_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_5_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_5_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_5_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_5_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_5_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_6_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_6_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_6_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_6_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_6_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_6_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_6_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_6_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_6_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_6_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_6_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_6_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_6_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_6_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_6_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_6_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_6_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_6_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_6_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_6_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_6_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_6_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_6_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_6_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_6_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_6_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_6_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_6_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_6_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_6_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_6_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_6_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_6_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_6_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_6_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_6_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_6_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_6_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_6_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_6_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_6_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_6_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_6_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_6_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_6_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_6_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_6_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_6_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_6_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_6_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_6_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_6_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_6_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_error_pio_7_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pid_error_pio_7_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_error_pio_7_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_error_pio_7_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_error_pio_7_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_error_pio_7_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_error_pio_7_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_error_pio_7_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_error_pio_7_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_error_pio_7_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_error_pio_7_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_error_pio_7_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_error_pio_7_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_error_pio_7_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_error_pio_7_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_error_pio_7_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_error_pio_7_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_error_pio_7_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_error_pio_7_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_error_pio_7_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_error_pio_7_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_error_pio_7_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_error_pio_7_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_error_pio_7_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_error_pio_7_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_error_pio_7_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_error_pio_7_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_error_pio_7_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_error_pio_7_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_error_pio_7_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_error_pio_7_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_error_pio_7_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_error_pio_7_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pid_error_pio_7_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_error_pio_7_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_error_pio_7_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_7_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_7_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_error_pio_7_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_error_pio_7_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_error_pio_7_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_error_pio_7_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_error_pio_7_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_error_pio_7_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_error_pio_7_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_error_pio_7_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_error_pio_7_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_error_pio_7_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_error_pio_7_s1_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (pid_error_pio_7_s1_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (pid_error_pio_7_s1_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (pid_error_pio_7_s1_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (pid_error_pio_7_s1_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (pid_error_pio_7_s1_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_1_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_1_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_1_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_1_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_1_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_1_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_1_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_1_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_1_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_1_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_1_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_1_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_2_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_2_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_2_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_2_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_2_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_2_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_3_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_3_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_3_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_3_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_3_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_3_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_3_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_3_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_3_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_3_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_3_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_3_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_5_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_5_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_5_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_5_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_5_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_5_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_5_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_5_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_5_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_5_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_5_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_5_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_5_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_5_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_5_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_5_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_5_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_5_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_5_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_5_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_5_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_5_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_5_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_5_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_5_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_5_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_5_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_5_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_5_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_5_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_5_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_5_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_5_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_5_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_5_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_5_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_5_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_5_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_5_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_5_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_5_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_5_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_6_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_6_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_6_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_6_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_6_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_6_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_6_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_6_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_6_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_6_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_6_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_6_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_6_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_6_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_6_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_6_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_6_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_6_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_6_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_6_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_6_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_6_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_6_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_6_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_6_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_6_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_6_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_6_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_6_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_6_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_6_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_6_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_6_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_6_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_6_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_6_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_6_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_6_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_6_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_6_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_6_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_6_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_6_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_6_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_6_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_6_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_6_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_6_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_6_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_6_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_6_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_6_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_6_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_7_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_7_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_7_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_7_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_7_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_7_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_7_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_7_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_7_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_7_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_7_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_7_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_7_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_7_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_7_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_7_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_7_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_7_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_7_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_7_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_7_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_7_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_7_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_7_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_7_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_7_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_7_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_7_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_7_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_7_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_7_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_7_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_7_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_7_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_7_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_7_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_7_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_7_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_7_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_7_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_7_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_7_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_7_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_7_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_7_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_7_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_7_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_7_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_7_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_7_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_7_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_7_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_7_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_7_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_correction_pio_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pid_correction_pio_4_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_correction_pio_4_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_correction_pio_4_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_correction_pio_4_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_correction_pio_4_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_correction_pio_4_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_correction_pio_4_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_correction_pio_4_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_correction_pio_4_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_correction_pio_4_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_correction_pio_4_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_correction_pio_4_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_correction_pio_4_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_correction_pio_4_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_correction_pio_4_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_correction_pio_4_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_correction_pio_4_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_correction_pio_4_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_correction_pio_4_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_correction_pio_4_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_correction_pio_4_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_correction_pio_4_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_correction_pio_4_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_correction_pio_4_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_correction_pio_4_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_correction_pio_4_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_correction_pio_4_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_correction_pio_4_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_correction_pio_4_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_correction_pio_4_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_correction_pio_4_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_correction_pio_4_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (pid_correction_pio_4_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_correction_pio_4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_correction_pio_4_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (pid_correction_pio_4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pid_correction_pio_4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pid_correction_pio_4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pid_correction_pio_4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pid_correction_pio_4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pid_correction_pio_4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pid_correction_pio_4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pid_correction_pio_4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pid_correction_pio_4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pid_correction_pio_4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_correction_pio_4_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_correction_pio_4_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (pid_correction_pio_4_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (pid_correction_pio_4_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (pid_correction_pio_4_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (pid_correction_pio_4_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (pid_correction_pio_4_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pid_values_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pid_values_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pid_values_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pid_values_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pid_values_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pid_values_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pid_values_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pid_values_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pid_values_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pid_values_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pid_values_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pid_values_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pid_values_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pid_values_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pid_values_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pid_values_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pid_values_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pid_values_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pid_values_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pid_values_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pid_values_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pid_values_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pid_values_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pid_values_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pid_values_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pid_values_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pid_values_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pid_values_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pid_values_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pid_values_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pid_values_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pid_values_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pid_values_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (pid_values_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pid_values_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pid_values_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_values_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_values_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (pid_values_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (pid_values_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (pid_values_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (pid_values_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (pid_values_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (pid_values_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (pid_values_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (pid_values_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (pid_values_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pid_values_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pid_values_pio_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (pid_values_pio_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (pid_values_pio_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (pid_values_pio_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (pid_values_pio_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (pid_values_pio_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_0_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_0_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_0_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_0_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_0_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_0_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_0_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_0_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_0_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_0_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_0_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_0_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_0_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_0_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_0_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_0_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_0_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_0_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_0_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_0_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_0_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_0_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_0_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_0_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_0_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_0_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_0_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_0_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_0_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_0_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_0_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_0_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_0_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_0_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_0_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_0_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_0_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_0_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_0_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_0_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_0_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_0_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_0_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_0_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_0_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_0_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_0_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_0_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_0_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_0_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_0_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio_pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio_pio_1_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (gpio_pio_1_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (gpio_pio_1_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (gpio_pio_1_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (gpio_pio_1_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (gpio_pio_1_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (gpio_pio_1_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (gpio_pio_1_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (gpio_pio_1_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (gpio_pio_1_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (gpio_pio_1_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (gpio_pio_1_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (gpio_pio_1_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (gpio_pio_1_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (gpio_pio_1_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (gpio_pio_1_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (gpio_pio_1_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (gpio_pio_1_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (gpio_pio_1_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (gpio_pio_1_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (gpio_pio_1_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (gpio_pio_1_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (gpio_pio_1_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (gpio_pio_1_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (gpio_pio_1_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (gpio_pio_1_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (gpio_pio_1_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (gpio_pio_1_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (gpio_pio_1_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (gpio_pio_1_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (gpio_pio_1_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (gpio_pio_1_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (gpio_pio_1_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_pio_1_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (gpio_pio_1_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_1_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (gpio_pio_1_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (gpio_pio_1_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (gpio_pio_1_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (gpio_pio_1_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (gpio_pio_1_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (gpio_pio_1_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (gpio_pio_1_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (gpio_pio_1_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (gpio_pio_1_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_1_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (gpio_pio_1_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (gpio_pio_1_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (gpio_pio_1_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (gpio_pio_1_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (gpio_pio_1_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_1_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_1_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_1_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_1_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_1_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_1_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_1_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_1_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_1_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_1_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_1_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_1_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_1_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_1_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_1_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_1_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_1_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_1_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_1_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_1_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_1_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_1_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_1_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_1_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_1_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_1_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_1_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_1_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_1_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_1_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_1_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_1_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_037_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_037_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_037_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_037_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_1_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_1_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_1_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_1_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_1_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_1_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_1_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_1_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_1_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_1_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_1_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_1_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_1_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_1_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_1_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_1_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_1_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_1_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_1_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_1_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_2_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_2_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_2_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_2_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_2_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_2_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_2_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_2_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_2_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_2_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_2_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_2_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_2_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_2_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_2_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_2_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_2_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_2_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_2_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_2_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_2_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_2_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_2_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_2_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_2_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_2_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_2_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_2_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_2_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_2_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_2_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_2_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_038_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_038_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_038_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_038_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_2_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_2_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_2_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_2_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_2_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_2_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_2_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_2_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_2_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_2_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_2_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_2_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_2_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_2_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_2_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_2_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_2_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_2_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_2_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_2_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_3_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_3_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_3_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_3_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_3_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_3_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_3_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_3_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_3_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_3_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_3_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_3_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_3_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_3_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_3_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_3_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_3_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_3_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_3_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_3_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_3_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_3_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_3_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_3_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_3_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_3_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_3_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_3_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_3_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_3_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_3_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_3_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_039_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_039_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_039_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_039_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_3_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_3_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_3_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_3_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_3_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_3_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_3_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_3_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_3_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_3_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_3_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_3_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_3_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_3_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_3_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_3_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_3_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_3_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_3_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_3_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_4_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_4_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_4_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_4_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_4_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_4_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_4_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_4_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_4_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_4_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_4_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_4_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_4_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_4_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_4_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_4_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_4_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_4_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_4_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_4_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_4_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_4_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_4_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_4_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_4_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_4_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_4_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_4_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_4_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_4_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_4_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_4_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_040_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_040_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_040_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_040_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_4_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_4_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_4_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_4_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_4_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_4_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_4_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_4_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_4_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_4_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_4_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_4_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_4_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_4_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_4_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_4_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_4_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_4_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_4_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_4_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_5_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_5_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_5_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_5_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_5_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_5_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_5_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_5_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_5_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_5_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_5_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_5_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_5_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_5_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_5_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_5_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_5_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_5_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_5_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_5_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_5_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_5_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_5_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_5_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_5_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_5_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_5_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_5_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_5_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_5_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_5_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_5_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_041_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_041_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_041_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_041_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_5_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_5_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_5_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_5_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_5_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_5_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_5_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_5_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_5_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_5_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_5_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_5_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_5_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_5_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_5_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_5_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_5_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_5_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_5_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_5_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_6_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_6_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_6_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_6_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_6_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_6_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_6_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_6_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_6_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_6_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_6_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_6_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_6_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_6_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_6_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_6_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_6_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_6_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_6_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_6_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_6_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_6_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_6_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_6_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_6_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_6_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_6_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_6_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_6_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_6_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_6_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_6_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_6_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_042_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_042_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_042_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_042_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_6_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_6_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_6_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_6_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_6_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_6_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_6_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_6_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_6_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_6_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_6_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_6_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_6_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_6_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_6_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_6_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_6_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_6_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_6_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_6_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_6_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_pio_7_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_pio_7_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_pio_7_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_pio_7_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_pio_7_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_pio_7_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_pio_7_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_pio_7_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_pio_7_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_pio_7_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_pio_7_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_pio_7_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_pio_7_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_pio_7_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_pio_7_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_pio_7_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_pio_7_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (pwm_pio_7_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (pwm_pio_7_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (pwm_pio_7_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (pwm_pio_7_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (pwm_pio_7_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (pwm_pio_7_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (pwm_pio_7_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_pio_7_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_pio_7_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_pio_7_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_pio_7_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_pio_7_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_pio_7_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_pio_7_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_pio_7_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_pio_7_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_043_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_043_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_043_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_043_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pwm_pio_7_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_pio_7_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_pio_7_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_7_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_7_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_pio_7_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_pio_7_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_pio_7_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_pio_7_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_pio_7_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_pio_7_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_pio_7_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_pio_7_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_pio_7_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_pio_7_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_pio_7_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (pwm_pio_7_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (pwm_pio_7_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (pwm_pio_7_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (pwm_pio_7_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (pwm_pio_7_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) limit_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (limit_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (limit_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (limit_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (limit_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (limit_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (limit_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (limit_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (limit_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (limit_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (limit_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (limit_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (limit_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (limit_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (limit_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (limit_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (limit_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (limit_pio_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (limit_pio_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (limit_pio_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (limit_pio_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (limit_pio_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (limit_pio_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (limit_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (limit_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (limit_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (limit_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (limit_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (limit_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (limit_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (limit_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (limit_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (limit_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_044_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_044_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_044_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_044_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (limit_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (limit_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (limit_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) limit_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (limit_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (limit_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (limit_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (limit_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (limit_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (limit_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (limit_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (limit_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (limit_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (limit_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) limit_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (limit_pio_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (limit_pio_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (limit_pio_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (limit_pio_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (limit_pio_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (limit_pio_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_8_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_8_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_8_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_8_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_8_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_8_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_8_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_8_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_8_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_8_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_8_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_8_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_8_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_8_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_8_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_8_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_8_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_8_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_8_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_8_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_8_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_8_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_8_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_8_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_8_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_8_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_8_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_8_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_8_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_8_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_8_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_8_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_8_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_045_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_045_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_045_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_045_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_8_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_8_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_8_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_8_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_8_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_8_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_8_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_8_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_8_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_8_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_8_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_8_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_8_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_8_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_8_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_8_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_8_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_8_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_8_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_8_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_8_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_9_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_9_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (quad_pio_9_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (quad_pio_9_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (quad_pio_9_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (quad_pio_9_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (quad_pio_9_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (quad_pio_9_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (quad_pio_9_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (quad_pio_9_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (quad_pio_9_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (quad_pio_9_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (quad_pio_9_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (quad_pio_9_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (quad_pio_9_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (quad_pio_9_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (quad_pio_9_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (quad_pio_9_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (quad_pio_9_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (quad_pio_9_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (quad_pio_9_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (quad_pio_9_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (quad_pio_9_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (quad_pio_9_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (quad_pio_9_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (quad_pio_9_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_9_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (quad_pio_9_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (quad_pio_9_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (quad_pio_9_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (quad_pio_9_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (quad_pio_9_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (quad_pio_9_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_046_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_046_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_046_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_046_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_9_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_9_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (quad_pio_9_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_9_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_9_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (quad_pio_9_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (quad_pio_9_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (quad_pio_9_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (quad_pio_9_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (quad_pio_9_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (quad_pio_9_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (quad_pio_9_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (quad_pio_9_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (quad_pio_9_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_9_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_9_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (quad_pio_9_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (quad_pio_9_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (quad_pio_9_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (quad_pio_9_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (quad_pio_9_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_10_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_10_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (quad_pio_10_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (quad_pio_10_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (quad_pio_10_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (quad_pio_10_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (quad_pio_10_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (quad_pio_10_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (quad_pio_10_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (quad_pio_10_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (quad_pio_10_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (quad_pio_10_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (quad_pio_10_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (quad_pio_10_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (quad_pio_10_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (quad_pio_10_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (quad_pio_10_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (quad_pio_10_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (quad_pio_10_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (quad_pio_10_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (quad_pio_10_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (quad_pio_10_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (quad_pio_10_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (quad_pio_10_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (quad_pio_10_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (quad_pio_10_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_10_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (quad_pio_10_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (quad_pio_10_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (quad_pio_10_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (quad_pio_10_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (quad_pio_10_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (quad_pio_10_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_047_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_047_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_047_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_047_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_10_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_10_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (quad_pio_10_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_10_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_10_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (quad_pio_10_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (quad_pio_10_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (quad_pio_10_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (quad_pio_10_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (quad_pio_10_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (quad_pio_10_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (quad_pio_10_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (quad_pio_10_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (quad_pio_10_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_10_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_10_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (quad_pio_10_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (quad_pio_10_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (quad_pio_10_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (quad_pio_10_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (quad_pio_10_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) quad_pio_11_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (quad_pio_11_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (quad_pio_11_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (quad_pio_11_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (quad_pio_11_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (quad_pio_11_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (quad_pio_11_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (quad_pio_11_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (quad_pio_11_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (quad_pio_11_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (quad_pio_11_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (quad_pio_11_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (quad_pio_11_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (quad_pio_11_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (quad_pio_11_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (quad_pio_11_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (quad_pio_11_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (quad_pio_11_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (quad_pio_11_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (quad_pio_11_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (quad_pio_11_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (quad_pio_11_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (quad_pio_11_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (quad_pio_11_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (quad_pio_11_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (quad_pio_11_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (quad_pio_11_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (quad_pio_11_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (quad_pio_11_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (quad_pio_11_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (quad_pio_11_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (quad_pio_11_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (quad_pio_11_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_048_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_048_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_048_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_048_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (quad_pio_11_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (quad_pio_11_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (quad_pio_11_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_11_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_11_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (quad_pio_11_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (quad_pio_11_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (quad_pio_11_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (quad_pio_11_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (quad_pio_11_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (quad_pio_11_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (quad_pio_11_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (quad_pio_11_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (quad_pio_11_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) quad_pio_11_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (quad_pio_11_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (quad_pio_11_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (quad_pio_11_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (quad_pio_11_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (quad_pio_11_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (quad_pio_11_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) heartbeat_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (heartbeat_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (heartbeat_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (heartbeat_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (heartbeat_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (heartbeat_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (heartbeat_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (heartbeat_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (heartbeat_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (heartbeat_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (heartbeat_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (heartbeat_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (heartbeat_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (heartbeat_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (heartbeat_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (heartbeat_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (heartbeat_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (heartbeat_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (heartbeat_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (heartbeat_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (heartbeat_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (heartbeat_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (heartbeat_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (heartbeat_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (heartbeat_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (heartbeat_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (heartbeat_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (heartbeat_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (heartbeat_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (heartbeat_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (heartbeat_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (heartbeat_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (heartbeat_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_049_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_049_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_049_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_049_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (heartbeat_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (heartbeat_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (heartbeat_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) heartbeat_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (heartbeat_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (heartbeat_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (heartbeat_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (heartbeat_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (heartbeat_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (heartbeat_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (heartbeat_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (heartbeat_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (heartbeat_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (heartbeat_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) heartbeat_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (heartbeat_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (heartbeat_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (heartbeat_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (heartbeat_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (heartbeat_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (heartbeat_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (134),
		.PKT_ORI_BURST_SIZE_L      (132),
		.PKT_RESPONSE_STATUS_H     (131),
		.PKT_RESPONSE_STATUS_L     (130),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (125),
		.PKT_PROTECTION_L          (123),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (51),
		.ST_DATA_W                 (135),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) e_stop_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (e_stop_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (e_stop_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (e_stop_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (e_stop_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (e_stop_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (e_stop_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (e_stop_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (e_stop_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (e_stop_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (e_stop_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (e_stop_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (e_stop_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (e_stop_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (e_stop_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (e_stop_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (e_stop_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (e_stop_s1_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (e_stop_s1_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (e_stop_s1_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (e_stop_s1_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (e_stop_s1_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (e_stop_s1_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (e_stop_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (e_stop_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (e_stop_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (e_stop_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (e_stop_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (e_stop_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (e_stop_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (e_stop_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (e_stop_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (e_stop_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_050_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_050_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_050_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_050_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (e_stop_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (e_stop_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (e_stop_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (136),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) e_stop_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (e_stop_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (e_stop_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (e_stop_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (e_stop_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (e_stop_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (e_stop_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (e_stop_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (e_stop_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (e_stop_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (e_stop_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) e_stop_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (e_stop_s1_agent_rdata_fifo_src_data),                 //        in.data
		.in_valid          (e_stop_s1_agent_rdata_fifo_src_valid),                //          .valid
		.in_ready          (e_stop_s1_agent_rdata_fifo_src_ready),                //          .ready
		.out_data          (e_stop_s1_agent_rdata_fifo_out_data),                 //       out.data
		.out_valid         (e_stop_s1_agent_rdata_fifo_out_valid),                //          .valid
		.out_ready         (e_stop_s1_agent_rdata_fifo_out_ready),                //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (fpga_only_master_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (fpga_only_master_master_agent_cp_valid),              //          .valid
		.sink_data          (fpga_only_master_master_agent_cp_data),               //          .data
		.sink_startofpacket (fpga_only_master_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (fpga_only_master_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                     //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                     //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                      //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),               //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                      //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                      //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                       //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (adc_0_adc_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (adc_0_adc_slave_agent_rp_valid),                      //          .valid
		.sink_data          (adc_0_adc_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (adc_0_adc_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (adc_0_adc_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),          //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),           //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (intr_capturer_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (intr_capturer_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (intr_capturer_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (intr_capturer_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intr_capturer_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_008_src_ready),                                  //       src.ready
		.src_valid          (router_008_src_valid),                                  //          .valid
		.src_data           (router_008_src_data),                                   //          .data
		.src_channel        (router_008_src_channel),                                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),             //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),              //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                //       src.ready
		.src_valid          (router_009_src_valid),                                //          .valid
		.src_data           (router_009_src_data),                                 //          .data
		.src_channel        (router_009_src_channel),                              //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_010 (
		.sink_ready         (dipsw_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (dipsw_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (dipsw_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (dipsw_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (dipsw_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                //       src.ready
		.src_valid          (router_010_src_valid),                                //          .valid
		.src_data           (router_010_src_data),                                 //          .data
		.src_channel        (router_010_src_channel),                              //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_011 (
		.sink_ready         (button_pio_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (button_pio_s1_agent_rp_valid),                        //          .valid
		.sink_data          (button_pio_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (button_pio_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (button_pio_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                //       src.ready
		.src_valid          (router_011_src_valid),                                //          .valid
		.src_data           (router_011_src_data),                                 //          .data
		.src_channel        (router_011_src_channel),                              //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (gpio_pio_0_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (gpio_pio_0_s1_agent_rp_valid),                        //          .valid
		.sink_data          (gpio_pio_0_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (gpio_pio_0_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (gpio_pio_0_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_013 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                           //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_014 (
		.sink_ready         (quad_pio_0_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_0_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_0_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_0_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_0_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                //       src.ready
		.src_valid          (router_014_src_valid),                                //          .valid
		.src_data           (router_014_src_data),                                 //          .data
		.src_channel        (router_014_src_channel),                              //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_015 (
		.sink_ready         (quad_reset_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (quad_reset_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (quad_reset_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (quad_reset_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (quad_reset_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                //       src.ready
		.src_valid          (router_015_src_valid),                                //          .valid
		.src_data           (router_015_src_data),                                 //          .data
		.src_channel        (router_015_src_channel),                              //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_016 (
		.sink_ready         (pid_correction_pio_0_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_0_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_0_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_0_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_0_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                //       src.ready
		.src_valid          (router_016_src_valid),                                //          .valid
		.src_data           (router_016_src_data),                                 //          .data
		.src_channel        (router_016_src_channel),                              //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_017 (
		.sink_ready         (pid_error_pio_0_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_0_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_0_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_0_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_0_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                //       src.ready
		.src_valid          (router_017_src_valid),                                //          .valid
		.src_data           (router_017_src_data),                                 //          .data
		.src_channel        (router_017_src_channel),                              //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (quad_pio_1_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_1_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_1_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_1_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_1_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                //       src.ready
		.src_valid          (router_018_src_valid),                                //          .valid
		.src_data           (router_018_src_data),                                 //          .data
		.src_channel        (router_018_src_channel),                              //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_019 (
		.sink_ready         (quad_pio_2_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_2_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_2_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_2_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_2_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                //       src.ready
		.src_valid          (router_019_src_valid),                                //          .valid
		.src_data           (router_019_src_data),                                 //          .data
		.src_channel        (router_019_src_channel),                              //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_020 (
		.sink_ready         (quad_pio_3_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_3_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_3_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_3_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_3_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                //       src.ready
		.src_valid          (router_020_src_valid),                                //          .valid
		.src_data           (router_020_src_data),                                 //          .data
		.src_channel        (router_020_src_channel),                              //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_021 (
		.sink_ready         (quad_pio_4_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_4_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_4_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_4_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_4_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                                //       src.ready
		.src_valid          (router_021_src_valid),                                //          .valid
		.src_data           (router_021_src_data),                                 //          .data
		.src_channel        (router_021_src_channel),                              //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_022 (
		.sink_ready         (quad_pio_5_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_5_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_5_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_5_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_5_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                //       src.ready
		.src_valid          (router_022_src_valid),                                //          .valid
		.src_data           (router_022_src_data),                                 //          .data
		.src_channel        (router_022_src_channel),                              //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_023 (
		.sink_ready         (quad_pio_6_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_6_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_6_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_6_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_6_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                //       src.ready
		.src_valid          (router_023_src_valid),                                //          .valid
		.src_data           (router_023_src_data),                                 //          .data
		.src_channel        (router_023_src_channel),                              //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_024 (
		.sink_ready         (quad_pio_7_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_7_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_7_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_7_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_7_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                //       src.ready
		.src_valid          (router_024_src_valid),                                //          .valid
		.src_data           (router_024_src_data),                                 //          .data
		.src_channel        (router_024_src_channel),                              //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_025 (
		.sink_ready         (pid_error_pio_1_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_1_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_1_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_1_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_1_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                //       src.ready
		.src_valid          (router_025_src_valid),                                //          .valid
		.src_data           (router_025_src_data),                                 //          .data
		.src_channel        (router_025_src_channel),                              //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_026 (
		.sink_ready         (pid_error_pio_2_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_2_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_2_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_2_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_2_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                //       src.ready
		.src_valid          (router_026_src_valid),                                //          .valid
		.src_data           (router_026_src_data),                                 //          .data
		.src_channel        (router_026_src_channel),                              //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_027 (
		.sink_ready         (pid_error_pio_3_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_3_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_3_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_3_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_3_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                //       src.ready
		.src_valid          (router_027_src_valid),                                //          .valid
		.src_data           (router_027_src_data),                                 //          .data
		.src_channel        (router_027_src_channel),                              //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_028 (
		.sink_ready         (pid_error_pio_4_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_4_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_4_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_4_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_4_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                                //       src.ready
		.src_valid          (router_028_src_valid),                                //          .valid
		.src_data           (router_028_src_data),                                 //          .data
		.src_channel        (router_028_src_channel),                              //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_029 (
		.sink_ready         (pid_error_pio_5_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_5_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_5_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_5_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_5_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                                //       src.ready
		.src_valid          (router_029_src_valid),                                //          .valid
		.src_data           (router_029_src_data),                                 //          .data
		.src_channel        (router_029_src_channel),                              //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_030 (
		.sink_ready         (pid_error_pio_6_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_6_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_6_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_6_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_6_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                                //       src.ready
		.src_valid          (router_030_src_valid),                                //          .valid
		.src_data           (router_030_src_data),                                 //          .data
		.src_channel        (router_030_src_channel),                              //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_031 (
		.sink_ready         (pid_error_pio_7_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pid_error_pio_7_s1_agent_rp_valid),                   //          .valid
		.sink_data          (pid_error_pio_7_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (pid_error_pio_7_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pid_error_pio_7_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                                //       src.ready
		.src_valid          (router_031_src_valid),                                //          .valid
		.src_data           (router_031_src_data),                                 //          .data
		.src_channel        (router_031_src_channel),                              //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_032 (
		.sink_ready         (pid_correction_pio_1_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_1_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_1_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_1_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_1_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                                //       src.ready
		.src_valid          (router_032_src_valid),                                //          .valid
		.src_data           (router_032_src_data),                                 //          .data
		.src_channel        (router_032_src_channel),                              //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_033 (
		.sink_ready         (pid_correction_pio_2_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_2_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_2_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_2_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_2_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                                //       src.ready
		.src_valid          (router_033_src_valid),                                //          .valid
		.src_data           (router_033_src_data),                                 //          .data
		.src_channel        (router_033_src_channel),                              //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_034 (
		.sink_ready         (pid_correction_pio_3_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_3_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_3_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_3_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_3_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                                //       src.ready
		.src_valid          (router_034_src_valid),                                //          .valid
		.src_data           (router_034_src_data),                                 //          .data
		.src_channel        (router_034_src_channel),                              //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_035 (
		.sink_ready         (pid_correction_pio_5_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_5_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_5_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_5_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_5_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                                //       src.ready
		.src_valid          (router_035_src_valid),                                //          .valid
		.src_data           (router_035_src_data),                                 //          .data
		.src_channel        (router_035_src_channel),                              //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_036 (
		.sink_ready         (pid_correction_pio_6_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_6_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_6_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_6_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_6_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                                //       src.ready
		.src_valid          (router_036_src_valid),                                //          .valid
		.src_data           (router_036_src_data),                                 //          .data
		.src_channel        (router_036_src_channel),                              //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_037 (
		.sink_ready         (pid_correction_pio_7_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_7_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_7_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_7_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_7_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                                //       src.ready
		.src_valid          (router_037_src_valid),                                //          .valid
		.src_data           (router_037_src_data),                                 //          .data
		.src_channel        (router_037_src_channel),                              //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_038 (
		.sink_ready         (pid_correction_pio_4_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (pid_correction_pio_4_s1_agent_rp_valid),              //          .valid
		.sink_data          (pid_correction_pio_4_s1_agent_rp_data),               //          .data
		.sink_startofpacket (pid_correction_pio_4_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (pid_correction_pio_4_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                                //       src.ready
		.src_valid          (router_038_src_valid),                                //          .valid
		.src_data           (router_038_src_data),                                 //          .data
		.src_channel        (router_038_src_channel),                              //          .channel
		.src_startofpacket  (router_038_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_039 (
		.sink_ready         (pid_values_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (pid_values_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (pid_values_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (pid_values_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pid_values_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                                //       src.ready
		.src_valid          (router_039_src_valid),                                //          .valid
		.src_data           (router_039_src_data),                                 //          .data
		.src_channel        (router_039_src_channel),                              //          .channel
		.src_startofpacket  (router_039_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_040 (
		.sink_ready         (pwm_pio_0_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_0_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_0_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_0_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_0_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_040_src_ready),                                //       src.ready
		.src_valid          (router_040_src_valid),                                //          .valid
		.src_data           (router_040_src_data),                                 //          .data
		.src_channel        (router_040_src_channel),                              //          .channel
		.src_startofpacket  (router_040_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_041 (
		.sink_ready         (gpio_pio_1_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (gpio_pio_1_s1_agent_rp_valid),                        //          .valid
		.sink_data          (gpio_pio_1_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (gpio_pio_1_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (gpio_pio_1_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_041_src_ready),                                //       src.ready
		.src_valid          (router_041_src_valid),                                //          .valid
		.src_data           (router_041_src_data),                                 //          .data
		.src_channel        (router_041_src_channel),                              //          .channel
		.src_startofpacket  (router_041_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_042 (
		.sink_ready         (pwm_pio_1_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_1_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_1_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_1_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_1_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_042_src_ready),                                //       src.ready
		.src_valid          (router_042_src_valid),                                //          .valid
		.src_data           (router_042_src_data),                                 //          .data
		.src_channel        (router_042_src_channel),                              //          .channel
		.src_startofpacket  (router_042_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_043 (
		.sink_ready         (pwm_pio_2_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_2_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_2_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_2_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_2_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_043_src_ready),                                //       src.ready
		.src_valid          (router_043_src_valid),                                //          .valid
		.src_data           (router_043_src_data),                                 //          .data
		.src_channel        (router_043_src_channel),                              //          .channel
		.src_startofpacket  (router_043_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_044 (
		.sink_ready         (pwm_pio_3_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_3_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_3_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_3_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_3_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_044_src_ready),                                //       src.ready
		.src_valid          (router_044_src_valid),                                //          .valid
		.src_data           (router_044_src_data),                                 //          .data
		.src_channel        (router_044_src_channel),                              //          .channel
		.src_startofpacket  (router_044_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_045 (
		.sink_ready         (pwm_pio_4_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_4_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_4_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_4_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_4_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_045_src_ready),                                //       src.ready
		.src_valid          (router_045_src_valid),                                //          .valid
		.src_data           (router_045_src_data),                                 //          .data
		.src_channel        (router_045_src_channel),                              //          .channel
		.src_startofpacket  (router_045_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_046 (
		.sink_ready         (pwm_pio_5_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_5_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_5_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_5_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_5_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_046_src_ready),                                //       src.ready
		.src_valid          (router_046_src_valid),                                //          .valid
		.src_data           (router_046_src_data),                                 //          .data
		.src_channel        (router_046_src_channel),                              //          .channel
		.src_startofpacket  (router_046_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_047 (
		.sink_ready         (pwm_pio_6_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_6_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_6_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_6_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_6_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_047_src_ready),                                //       src.ready
		.src_valid          (router_047_src_valid),                                //          .valid
		.src_data           (router_047_src_data),                                 //          .data
		.src_channel        (router_047_src_channel),                              //          .channel
		.src_startofpacket  (router_047_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_048 (
		.sink_ready         (pwm_pio_7_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_pio_7_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_pio_7_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_pio_7_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_pio_7_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_048_src_ready),                                //       src.ready
		.src_valid          (router_048_src_valid),                                //          .valid
		.src_data           (router_048_src_data),                                 //          .data
		.src_channel        (router_048_src_channel),                              //          .channel
		.src_startofpacket  (router_048_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_049 (
		.sink_ready         (limit_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (limit_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (limit_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (limit_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (limit_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_049_src_ready),                                //       src.ready
		.src_valid          (router_049_src_valid),                                //          .valid
		.src_data           (router_049_src_data),                                 //          .data
		.src_channel        (router_049_src_channel),                              //          .channel
		.src_startofpacket  (router_049_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_050 (
		.sink_ready         (quad_pio_8_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_8_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_8_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_8_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_8_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_050_src_ready),                                //       src.ready
		.src_valid          (router_050_src_valid),                                //          .valid
		.src_data           (router_050_src_data),                                 //          .data
		.src_channel        (router_050_src_channel),                              //          .channel
		.src_startofpacket  (router_050_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_050_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_051 (
		.sink_ready         (quad_pio_9_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (quad_pio_9_s1_agent_rp_valid),                        //          .valid
		.sink_data          (quad_pio_9_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (quad_pio_9_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (quad_pio_9_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_051_src_ready),                                //       src.ready
		.src_valid          (router_051_src_valid),                                //          .valid
		.src_data           (router_051_src_data),                                 //          .data
		.src_channel        (router_051_src_channel),                              //          .channel
		.src_startofpacket  (router_051_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_051_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_052 (
		.sink_ready         (quad_pio_10_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (quad_pio_10_s1_agent_rp_valid),                       //          .valid
		.sink_data          (quad_pio_10_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (quad_pio_10_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (quad_pio_10_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_052_src_ready),                                //       src.ready
		.src_valid          (router_052_src_valid),                                //          .valid
		.src_data           (router_052_src_data),                                 //          .data
		.src_channel        (router_052_src_channel),                              //          .channel
		.src_startofpacket  (router_052_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_052_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_053 (
		.sink_ready         (quad_pio_11_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (quad_pio_11_s1_agent_rp_valid),                       //          .valid
		.sink_data          (quad_pio_11_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (quad_pio_11_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (quad_pio_11_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_053_src_ready),                                //       src.ready
		.src_valid          (router_053_src_valid),                                //          .valid
		.src_data           (router_053_src_data),                                 //          .data
		.src_channel        (router_053_src_channel),                              //          .channel
		.src_startofpacket  (router_053_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_053_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_054 (
		.sink_ready         (heartbeat_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (heartbeat_s1_agent_rp_valid),                         //          .valid
		.sink_data          (heartbeat_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (heartbeat_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (heartbeat_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_054_src_ready),                                //       src.ready
		.src_valid          (router_054_src_valid),                                //          .valid
		.src_data           (router_054_src_data),                                 //          .data
		.src_channel        (router_054_src_channel),                              //          .channel
		.src_startofpacket  (router_054_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_054_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_055 (
		.sink_ready         (e_stop_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (e_stop_s1_agent_rp_valid),                            //          .valid
		.sink_data          (e_stop_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (e_stop_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (e_stop_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_055_src_ready),                                //       src.ready
		.src_valid          (router_055_src_valid),                                //          .valid
		.src_data           (router_055_src_data),                                 //          .data
		.src_channel        (router_055_src_channel),                              //          .channel
		.src_startofpacket  (router_055_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_055_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.VALID_WIDTH               (51),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) fpga_only_master_master_limiter (
		.clk                    (clk_0_clk_clk),                                         //       clk.clk
		.reset                  (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                  //          .valid
		.cmd_sink_data          (router_002_src_data),                                   //          .data
		.cmd_sink_channel       (router_002_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (fpga_only_master_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (fpga_only_master_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (fpga_only_master_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (fpga_only_master_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (fpga_only_master_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (fpga_only_master_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (fpga_only_master_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (fpga_only_master_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (fpga_only_master_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (fpga_only_master_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.VALID_WIDTH               (51),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                             //          .valid
		.cmd_sink_data          (router_003_src_data),                                              //          .data
		.cmd_sink_channel       (router_003_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (110),
		.PKT_DEST_ID_L             (105),
		.PKT_SRC_ID_H              (104),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.VALID_WIDTH               (51),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                    //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                             //          .valid
		.cmd_sink_data          (router_004_src_data),                                              //          .data
		.cmd_sink_channel       (router_004_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                 //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                 //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                  //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),               //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),         //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),           //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                 // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (171),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (113),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                           //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                       //          .ready
		.source0_valid         (onchip_memory2_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_0_adc_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                               //          .ready
		.source0_valid         (adc_0_adc_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (adc_0_adc_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (adc_0_adc_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (adc_0_adc_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (adc_0_adc_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (adc_0_adc_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                   //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                           //          .ready
		.source0_valid         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_qsys_control_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                        //          .ready
		.source0_valid         (sysid_qsys_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_qsys_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_qsys_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_qsys_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_qsys_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_qsys_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dipsw_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                               //          .ready
		.source0_valid         (dipsw_pio_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (dipsw_pio_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (dipsw_pio_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (dipsw_pio_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (dipsw_pio_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (dipsw_pio_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) button_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                               //          .ready
		.source0_valid         (button_pio_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (button_pio_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (button_pio_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (button_pio_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (button_pio_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (button_pio_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) gpio_pio_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                               //          .ready
		.source0_valid         (gpio_pio_0_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (gpio_pio_0_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (gpio_pio_0_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (gpio_pio_0_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (gpio_pio_0_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (gpio_pio_0_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                               //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                               //          .ready
		.source0_valid         (quad_pio_0_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_0_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_0_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_0_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_0_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_0_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_reset_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                 //          .ready
		.source0_valid         (quad_reset_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (quad_reset_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (quad_reset_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (quad_reset_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (quad_reset_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (quad_reset_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                               //          .ready
		.source0_valid         (quad_pio_1_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_1_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_1_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_1_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_1_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_1_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                               //          .ready
		.source0_valid         (quad_pio_2_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_2_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_2_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_2_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_2_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_2_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                               //          .ready
		.source0_valid         (quad_pio_3_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_3_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_3_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_3_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_3_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_3_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_4_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                               //          .ready
		.source0_valid         (quad_pio_4_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_4_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_4_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_4_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_4_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_4_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_5_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                               //          .ready
		.source0_valid         (quad_pio_5_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_5_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_5_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_5_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_5_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_5_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_6_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                               //          .ready
		.source0_valid         (quad_pio_6_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_6_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_6_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_6_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_6_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_6_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_7_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                               //          .ready
		.source0_valid         (quad_pio_7_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_7_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_7_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_7_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_7_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_7_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_3_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_3_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_3_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_3_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_3_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_3_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_4_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_4_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_4_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_4_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_4_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_4_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_4_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_5_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_024_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_024_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_024_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_024_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_024_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_024_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_5_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_5_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_5_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_5_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_5_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_5_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_6_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_6_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_6_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_6_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_6_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_6_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_6_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_error_pio_7_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                          //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                  //          .ready
		.source0_valid         (pid_error_pio_7_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_error_pio_7_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_error_pio_7_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_error_pio_7_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_error_pio_7_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_error_pio_7_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_027_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_027_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_027_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_027_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_027_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_027_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_1_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_1_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_1_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_1_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_1_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_1_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_028_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_028_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_028_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_028_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_028_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_028_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_2_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_029_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_029_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_029_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_029_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_029_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_029_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_3_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_3_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_3_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_3_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_3_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_3_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_5_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_030_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_030_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_030_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_030_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_030_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_030_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_5_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_5_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_5_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_5_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_5_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_5_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_6_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_031_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_031_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_031_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_031_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_031_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_031_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_6_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_6_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_6_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_6_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_6_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_6_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_7_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_032_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_032_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_032_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_032_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_032_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_032_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_7_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_7_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_7_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_7_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_7_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_7_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_correction_pio_4_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_033_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_033_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_033_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_033_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_033_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_033_src_ready),                                       //          .ready
		.source0_valid         (pid_correction_pio_4_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_correction_pio_4_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_correction_pio_4_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_correction_pio_4_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_correction_pio_4_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_correction_pio_4_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pid_values_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_034_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_034_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_034_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_034_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_034_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_034_src_ready),                                 //          .ready
		.source0_valid         (pid_values_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pid_values_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pid_values_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pid_values_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pid_values_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pid_values_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_0_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_035_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_035_src_data),                                //          .data
		.sink0_channel         (cmd_mux_035_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_035_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_035_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_035_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_0_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_0_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_0_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_0_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_0_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_0_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) gpio_pio_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_036_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_036_src_data),                                //          .data
		.sink0_channel         (cmd_mux_036_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_036_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_036_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_036_src_ready),                               //          .ready
		.source0_valid         (gpio_pio_1_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (gpio_pio_1_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (gpio_pio_1_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (gpio_pio_1_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (gpio_pio_1_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (gpio_pio_1_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_1_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_037_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_037_src_data),                                //          .data
		.sink0_channel         (cmd_mux_037_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_037_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_037_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_037_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_1_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_1_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_1_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_1_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_1_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_1_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_2_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_038_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_038_src_data),                                //          .data
		.sink0_channel         (cmd_mux_038_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_038_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_038_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_038_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_2_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_2_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_2_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_2_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_2_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_2_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_3_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_039_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_039_src_data),                                //          .data
		.sink0_channel         (cmd_mux_039_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_039_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_039_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_039_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_3_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_3_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_3_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_3_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_3_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_3_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_4_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_040_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_040_src_data),                                //          .data
		.sink0_channel         (cmd_mux_040_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_040_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_040_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_040_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_4_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_4_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_4_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_4_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_4_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_4_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_5_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_041_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_041_src_data),                                //          .data
		.sink0_channel         (cmd_mux_041_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_041_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_041_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_041_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_5_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_5_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_5_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_5_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_5_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_5_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_6_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_042_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_042_src_data),                                //          .data
		.sink0_channel         (cmd_mux_042_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_042_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_042_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_042_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_6_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_6_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_6_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_6_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_6_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_6_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pwm_pio_7_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_043_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_043_src_data),                                //          .data
		.sink0_channel         (cmd_mux_043_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_043_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_043_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_043_src_ready),                               //          .ready
		.source0_valid         (pwm_pio_7_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (pwm_pio_7_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (pwm_pio_7_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (pwm_pio_7_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (pwm_pio_7_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (pwm_pio_7_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) limit_pio_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_044_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_044_src_data),                                //          .data
		.sink0_channel         (cmd_mux_044_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_044_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_044_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_044_src_ready),                               //          .ready
		.source0_valid         (limit_pio_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (limit_pio_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (limit_pio_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (limit_pio_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (limit_pio_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (limit_pio_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_8_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_045_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_045_src_data),                                //          .data
		.sink0_channel         (cmd_mux_045_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_045_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_045_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_045_src_ready),                               //          .ready
		.source0_valid         (quad_pio_8_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_8_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_8_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_8_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_8_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_8_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_9_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_046_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_046_src_data),                                //          .data
		.sink0_channel         (cmd_mux_046_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_046_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_046_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_046_src_ready),                               //          .ready
		.source0_valid         (quad_pio_9_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (quad_pio_9_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (quad_pio_9_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (quad_pio_9_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (quad_pio_9_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (quad_pio_9_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_10_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_047_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_047_src_data),                                //          .data
		.sink0_channel         (cmd_mux_047_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_047_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_047_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_047_src_ready),                               //          .ready
		.source0_valid         (quad_pio_10_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (quad_pio_10_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (quad_pio_10_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (quad_pio_10_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (quad_pio_10_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (quad_pio_10_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) quad_pio_11_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_048_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_048_src_data),                                //          .data
		.sink0_channel         (cmd_mux_048_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_048_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_048_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_048_src_ready),                               //          .ready
		.source0_valid         (quad_pio_11_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (quad_pio_11_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (quad_pio_11_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (quad_pio_11_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (quad_pio_11_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (quad_pio_11_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) heartbeat_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_049_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_049_src_data),                                //          .data
		.sink0_channel         (cmd_mux_049_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_049_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_049_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_049_src_ready),                               //          .ready
		.source0_valid         (heartbeat_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (heartbeat_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (heartbeat_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (heartbeat_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (heartbeat_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (heartbeat_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (97),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (82),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (135),
		.ST_CHANNEL_W              (51),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (89),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) e_stop_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_050_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_050_src_data),                                //          .data
		.sink0_channel         (cmd_mux_050_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_050_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_050_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_050_src_ready),                               //          .ready
		.source0_valid         (e_stop_s1_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (e_stop_s1_burst_adapter_source0_data),                //          .data
		.source0_channel       (e_stop_s1_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (e_stop_s1_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (e_stop_s1_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (e_stop_s1_burst_adapter_source0_ready)                //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //      sink.ready
		.sink_channel       (router_src_channel),                                               //          .channel
		.sink_data          (router_src_data),                                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.sink_valid         (router_src_valid),                                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //      sink.ready
		.sink_channel       (router_001_src_channel),                                           //          .channel
		.sink_data          (router_001_src_data),                                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                 (clk_0_clk_clk),                                         //        clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),   //  clk_reset.reset
		.sink_ready          (fpga_only_master_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (fpga_only_master_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (fpga_only_master_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (fpga_only_master_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (fpga_only_master_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (fpga_only_master_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_002_src0_ready),                              //       src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                              //           .valid
		.src0_data           (cmd_demux_002_src0_data),                               //           .data
		.src0_channel        (cmd_demux_002_src0_channel),                            //           .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                        //           .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                              //       src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                              //           .valid
		.src1_data           (cmd_demux_002_src1_data),                               //           .data
		.src1_channel        (cmd_demux_002_src1_channel),                            //           .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                        //           .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                              //       src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                              //           .valid
		.src2_data           (cmd_demux_002_src2_data),                               //           .data
		.src2_channel        (cmd_demux_002_src2_channel),                            //           .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                        //           .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                              //       src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                              //           .valid
		.src3_data           (cmd_demux_002_src3_data),                               //           .data
		.src3_channel        (cmd_demux_002_src3_channel),                            //           .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                        //           .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                              //       src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                              //           .valid
		.src4_data           (cmd_demux_002_src4_data),                               //           .data
		.src4_channel        (cmd_demux_002_src4_channel),                            //           .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                        //           .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                              //       src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                              //           .valid
		.src5_data           (cmd_demux_002_src5_data),                               //           .data
		.src5_channel        (cmd_demux_002_src5_channel),                            //           .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                      //           .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                        //           .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                              //       src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                              //           .valid
		.src6_data           (cmd_demux_002_src6_data),                               //           .data
		.src6_channel        (cmd_demux_002_src6_channel),                            //           .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                      //           .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                        //           .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                              //       src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                              //           .valid
		.src7_data           (cmd_demux_002_src7_data),                               //           .data
		.src7_channel        (cmd_demux_002_src7_channel),                            //           .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                      //           .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                        //           .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                              //       src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                              //           .valid
		.src8_data           (cmd_demux_002_src8_data),                               //           .data
		.src8_channel        (cmd_demux_002_src8_channel),                            //           .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                      //           .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                        //           .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                              //       src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                              //           .valid
		.src9_data           (cmd_demux_002_src9_data),                               //           .data
		.src9_channel        (cmd_demux_002_src9_channel),                            //           .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                      //           .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                        //           .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                             //      src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                             //           .valid
		.src10_data          (cmd_demux_002_src10_data),                              //           .data
		.src10_channel       (cmd_demux_002_src10_channel),                           //           .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                     //           .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                       //           .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                             //      src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                             //           .valid
		.src11_data          (cmd_demux_002_src11_data),                              //           .data
		.src11_channel       (cmd_demux_002_src11_channel),                           //           .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                     //           .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),                       //           .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),                             //      src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),                             //           .valid
		.src12_data          (cmd_demux_002_src12_data),                              //           .data
		.src12_channel       (cmd_demux_002_src12_channel),                           //           .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),                     //           .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),                       //           .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),                             //      src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),                             //           .valid
		.src13_data          (cmd_demux_002_src13_data),                              //           .data
		.src13_channel       (cmd_demux_002_src13_channel),                           //           .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),                     //           .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket),                       //           .endofpacket
		.src14_ready         (cmd_demux_002_src14_ready),                             //      src14.ready
		.src14_valid         (cmd_demux_002_src14_valid),                             //           .valid
		.src14_data          (cmd_demux_002_src14_data),                              //           .data
		.src14_channel       (cmd_demux_002_src14_channel),                           //           .channel
		.src14_startofpacket (cmd_demux_002_src14_startofpacket),                     //           .startofpacket
		.src14_endofpacket   (cmd_demux_002_src14_endofpacket),                       //           .endofpacket
		.src15_ready         (cmd_demux_002_src15_ready),                             //      src15.ready
		.src15_valid         (cmd_demux_002_src15_valid),                             //           .valid
		.src15_data          (cmd_demux_002_src15_data),                              //           .data
		.src15_channel       (cmd_demux_002_src15_channel),                           //           .channel
		.src15_startofpacket (cmd_demux_002_src15_startofpacket),                     //           .startofpacket
		.src15_endofpacket   (cmd_demux_002_src15_endofpacket),                       //           .endofpacket
		.src16_ready         (cmd_demux_002_src16_ready),                             //      src16.ready
		.src16_valid         (cmd_demux_002_src16_valid),                             //           .valid
		.src16_data          (cmd_demux_002_src16_data),                              //           .data
		.src16_channel       (cmd_demux_002_src16_channel),                           //           .channel
		.src16_startofpacket (cmd_demux_002_src16_startofpacket),                     //           .startofpacket
		.src16_endofpacket   (cmd_demux_002_src16_endofpacket),                       //           .endofpacket
		.src17_ready         (cmd_demux_002_src17_ready),                             //      src17.ready
		.src17_valid         (cmd_demux_002_src17_valid),                             //           .valid
		.src17_data          (cmd_demux_002_src17_data),                              //           .data
		.src17_channel       (cmd_demux_002_src17_channel),                           //           .channel
		.src17_startofpacket (cmd_demux_002_src17_startofpacket),                     //           .startofpacket
		.src17_endofpacket   (cmd_demux_002_src17_endofpacket),                       //           .endofpacket
		.src18_ready         (cmd_demux_002_src18_ready),                             //      src18.ready
		.src18_valid         (cmd_demux_002_src18_valid),                             //           .valid
		.src18_data          (cmd_demux_002_src18_data),                              //           .data
		.src18_channel       (cmd_demux_002_src18_channel),                           //           .channel
		.src18_startofpacket (cmd_demux_002_src18_startofpacket),                     //           .startofpacket
		.src18_endofpacket   (cmd_demux_002_src18_endofpacket),                       //           .endofpacket
		.src19_ready         (cmd_demux_002_src19_ready),                             //      src19.ready
		.src19_valid         (cmd_demux_002_src19_valid),                             //           .valid
		.src19_data          (cmd_demux_002_src19_data),                              //           .data
		.src19_channel       (cmd_demux_002_src19_channel),                           //           .channel
		.src19_startofpacket (cmd_demux_002_src19_startofpacket),                     //           .startofpacket
		.src19_endofpacket   (cmd_demux_002_src19_endofpacket),                       //           .endofpacket
		.src20_ready         (cmd_demux_002_src20_ready),                             //      src20.ready
		.src20_valid         (cmd_demux_002_src20_valid),                             //           .valid
		.src20_data          (cmd_demux_002_src20_data),                              //           .data
		.src20_channel       (cmd_demux_002_src20_channel),                           //           .channel
		.src20_startofpacket (cmd_demux_002_src20_startofpacket),                     //           .startofpacket
		.src20_endofpacket   (cmd_demux_002_src20_endofpacket),                       //           .endofpacket
		.src21_ready         (cmd_demux_002_src21_ready),                             //      src21.ready
		.src21_valid         (cmd_demux_002_src21_valid),                             //           .valid
		.src21_data          (cmd_demux_002_src21_data),                              //           .data
		.src21_channel       (cmd_demux_002_src21_channel),                           //           .channel
		.src21_startofpacket (cmd_demux_002_src21_startofpacket),                     //           .startofpacket
		.src21_endofpacket   (cmd_demux_002_src21_endofpacket),                       //           .endofpacket
		.src22_ready         (cmd_demux_002_src22_ready),                             //      src22.ready
		.src22_valid         (cmd_demux_002_src22_valid),                             //           .valid
		.src22_data          (cmd_demux_002_src22_data),                              //           .data
		.src22_channel       (cmd_demux_002_src22_channel),                           //           .channel
		.src22_startofpacket (cmd_demux_002_src22_startofpacket),                     //           .startofpacket
		.src22_endofpacket   (cmd_demux_002_src22_endofpacket),                       //           .endofpacket
		.src23_ready         (cmd_demux_002_src23_ready),                             //      src23.ready
		.src23_valid         (cmd_demux_002_src23_valid),                             //           .valid
		.src23_data          (cmd_demux_002_src23_data),                              //           .data
		.src23_channel       (cmd_demux_002_src23_channel),                           //           .channel
		.src23_startofpacket (cmd_demux_002_src23_startofpacket),                     //           .startofpacket
		.src23_endofpacket   (cmd_demux_002_src23_endofpacket),                       //           .endofpacket
		.src24_ready         (cmd_demux_002_src24_ready),                             //      src24.ready
		.src24_valid         (cmd_demux_002_src24_valid),                             //           .valid
		.src24_data          (cmd_demux_002_src24_data),                              //           .data
		.src24_channel       (cmd_demux_002_src24_channel),                           //           .channel
		.src24_startofpacket (cmd_demux_002_src24_startofpacket),                     //           .startofpacket
		.src24_endofpacket   (cmd_demux_002_src24_endofpacket),                       //           .endofpacket
		.src25_ready         (cmd_demux_002_src25_ready),                             //      src25.ready
		.src25_valid         (cmd_demux_002_src25_valid),                             //           .valid
		.src25_data          (cmd_demux_002_src25_data),                              //           .data
		.src25_channel       (cmd_demux_002_src25_channel),                           //           .channel
		.src25_startofpacket (cmd_demux_002_src25_startofpacket),                     //           .startofpacket
		.src25_endofpacket   (cmd_demux_002_src25_endofpacket),                       //           .endofpacket
		.src26_ready         (cmd_demux_002_src26_ready),                             //      src26.ready
		.src26_valid         (cmd_demux_002_src26_valid),                             //           .valid
		.src26_data          (cmd_demux_002_src26_data),                              //           .data
		.src26_channel       (cmd_demux_002_src26_channel),                           //           .channel
		.src26_startofpacket (cmd_demux_002_src26_startofpacket),                     //           .startofpacket
		.src26_endofpacket   (cmd_demux_002_src26_endofpacket),                       //           .endofpacket
		.src27_ready         (cmd_demux_002_src27_ready),                             //      src27.ready
		.src27_valid         (cmd_demux_002_src27_valid),                             //           .valid
		.src27_data          (cmd_demux_002_src27_data),                              //           .data
		.src27_channel       (cmd_demux_002_src27_channel),                           //           .channel
		.src27_startofpacket (cmd_demux_002_src27_startofpacket),                     //           .startofpacket
		.src27_endofpacket   (cmd_demux_002_src27_endofpacket),                       //           .endofpacket
		.src28_ready         (cmd_demux_002_src28_ready),                             //      src28.ready
		.src28_valid         (cmd_demux_002_src28_valid),                             //           .valid
		.src28_data          (cmd_demux_002_src28_data),                              //           .data
		.src28_channel       (cmd_demux_002_src28_channel),                           //           .channel
		.src28_startofpacket (cmd_demux_002_src28_startofpacket),                     //           .startofpacket
		.src28_endofpacket   (cmd_demux_002_src28_endofpacket),                       //           .endofpacket
		.src29_ready         (cmd_demux_002_src29_ready),                             //      src29.ready
		.src29_valid         (cmd_demux_002_src29_valid),                             //           .valid
		.src29_data          (cmd_demux_002_src29_data),                              //           .data
		.src29_channel       (cmd_demux_002_src29_channel),                           //           .channel
		.src29_startofpacket (cmd_demux_002_src29_startofpacket),                     //           .startofpacket
		.src29_endofpacket   (cmd_demux_002_src29_endofpacket),                       //           .endofpacket
		.src30_ready         (cmd_demux_002_src30_ready),                             //      src30.ready
		.src30_valid         (cmd_demux_002_src30_valid),                             //           .valid
		.src30_data          (cmd_demux_002_src30_data),                              //           .data
		.src30_channel       (cmd_demux_002_src30_channel),                           //           .channel
		.src30_startofpacket (cmd_demux_002_src30_startofpacket),                     //           .startofpacket
		.src30_endofpacket   (cmd_demux_002_src30_endofpacket),                       //           .endofpacket
		.src31_ready         (cmd_demux_002_src31_ready),                             //      src31.ready
		.src31_valid         (cmd_demux_002_src31_valid),                             //           .valid
		.src31_data          (cmd_demux_002_src31_data),                              //           .data
		.src31_channel       (cmd_demux_002_src31_channel),                           //           .channel
		.src31_startofpacket (cmd_demux_002_src31_startofpacket),                     //           .startofpacket
		.src31_endofpacket   (cmd_demux_002_src31_endofpacket),                       //           .endofpacket
		.src32_ready         (cmd_demux_002_src32_ready),                             //      src32.ready
		.src32_valid         (cmd_demux_002_src32_valid),                             //           .valid
		.src32_data          (cmd_demux_002_src32_data),                              //           .data
		.src32_channel       (cmd_demux_002_src32_channel),                           //           .channel
		.src32_startofpacket (cmd_demux_002_src32_startofpacket),                     //           .startofpacket
		.src32_endofpacket   (cmd_demux_002_src32_endofpacket),                       //           .endofpacket
		.src33_ready         (cmd_demux_002_src33_ready),                             //      src33.ready
		.src33_valid         (cmd_demux_002_src33_valid),                             //           .valid
		.src33_data          (cmd_demux_002_src33_data),                              //           .data
		.src33_channel       (cmd_demux_002_src33_channel),                           //           .channel
		.src33_startofpacket (cmd_demux_002_src33_startofpacket),                     //           .startofpacket
		.src33_endofpacket   (cmd_demux_002_src33_endofpacket),                       //           .endofpacket
		.src34_ready         (cmd_demux_002_src34_ready),                             //      src34.ready
		.src34_valid         (cmd_demux_002_src34_valid),                             //           .valid
		.src34_data          (cmd_demux_002_src34_data),                              //           .data
		.src34_channel       (cmd_demux_002_src34_channel),                           //           .channel
		.src34_startofpacket (cmd_demux_002_src34_startofpacket),                     //           .startofpacket
		.src34_endofpacket   (cmd_demux_002_src34_endofpacket),                       //           .endofpacket
		.src35_ready         (cmd_demux_002_src35_ready),                             //      src35.ready
		.src35_valid         (cmd_demux_002_src35_valid),                             //           .valid
		.src35_data          (cmd_demux_002_src35_data),                              //           .data
		.src35_channel       (cmd_demux_002_src35_channel),                           //           .channel
		.src35_startofpacket (cmd_demux_002_src35_startofpacket),                     //           .startofpacket
		.src35_endofpacket   (cmd_demux_002_src35_endofpacket),                       //           .endofpacket
		.src36_ready         (cmd_demux_002_src36_ready),                             //      src36.ready
		.src36_valid         (cmd_demux_002_src36_valid),                             //           .valid
		.src36_data          (cmd_demux_002_src36_data),                              //           .data
		.src36_channel       (cmd_demux_002_src36_channel),                           //           .channel
		.src36_startofpacket (cmd_demux_002_src36_startofpacket),                     //           .startofpacket
		.src36_endofpacket   (cmd_demux_002_src36_endofpacket),                       //           .endofpacket
		.src37_ready         (cmd_demux_002_src37_ready),                             //      src37.ready
		.src37_valid         (cmd_demux_002_src37_valid),                             //           .valid
		.src37_data          (cmd_demux_002_src37_data),                              //           .data
		.src37_channel       (cmd_demux_002_src37_channel),                           //           .channel
		.src37_startofpacket (cmd_demux_002_src37_startofpacket),                     //           .startofpacket
		.src37_endofpacket   (cmd_demux_002_src37_endofpacket),                       //           .endofpacket
		.src38_ready         (cmd_demux_002_src38_ready),                             //      src38.ready
		.src38_valid         (cmd_demux_002_src38_valid),                             //           .valid
		.src38_data          (cmd_demux_002_src38_data),                              //           .data
		.src38_channel       (cmd_demux_002_src38_channel),                           //           .channel
		.src38_startofpacket (cmd_demux_002_src38_startofpacket),                     //           .startofpacket
		.src38_endofpacket   (cmd_demux_002_src38_endofpacket),                       //           .endofpacket
		.src39_ready         (cmd_demux_002_src39_ready),                             //      src39.ready
		.src39_valid         (cmd_demux_002_src39_valid),                             //           .valid
		.src39_data          (cmd_demux_002_src39_data),                              //           .data
		.src39_channel       (cmd_demux_002_src39_channel),                           //           .channel
		.src39_startofpacket (cmd_demux_002_src39_startofpacket),                     //           .startofpacket
		.src39_endofpacket   (cmd_demux_002_src39_endofpacket),                       //           .endofpacket
		.src40_ready         (cmd_demux_002_src40_ready),                             //      src40.ready
		.src40_valid         (cmd_demux_002_src40_valid),                             //           .valid
		.src40_data          (cmd_demux_002_src40_data),                              //           .data
		.src40_channel       (cmd_demux_002_src40_channel),                           //           .channel
		.src40_startofpacket (cmd_demux_002_src40_startofpacket),                     //           .startofpacket
		.src40_endofpacket   (cmd_demux_002_src40_endofpacket),                       //           .endofpacket
		.src41_ready         (cmd_demux_002_src41_ready),                             //      src41.ready
		.src41_valid         (cmd_demux_002_src41_valid),                             //           .valid
		.src41_data          (cmd_demux_002_src41_data),                              //           .data
		.src41_channel       (cmd_demux_002_src41_channel),                           //           .channel
		.src41_startofpacket (cmd_demux_002_src41_startofpacket),                     //           .startofpacket
		.src41_endofpacket   (cmd_demux_002_src41_endofpacket),                       //           .endofpacket
		.src42_ready         (cmd_demux_002_src42_ready),                             //      src42.ready
		.src42_valid         (cmd_demux_002_src42_valid),                             //           .valid
		.src42_data          (cmd_demux_002_src42_data),                              //           .data
		.src42_channel       (cmd_demux_002_src42_channel),                           //           .channel
		.src42_startofpacket (cmd_demux_002_src42_startofpacket),                     //           .startofpacket
		.src42_endofpacket   (cmd_demux_002_src42_endofpacket),                       //           .endofpacket
		.src43_ready         (cmd_demux_002_src43_ready),                             //      src43.ready
		.src43_valid         (cmd_demux_002_src43_valid),                             //           .valid
		.src43_data          (cmd_demux_002_src43_data),                              //           .data
		.src43_channel       (cmd_demux_002_src43_channel),                           //           .channel
		.src43_startofpacket (cmd_demux_002_src43_startofpacket),                     //           .startofpacket
		.src43_endofpacket   (cmd_demux_002_src43_endofpacket),                       //           .endofpacket
		.src44_ready         (cmd_demux_002_src44_ready),                             //      src44.ready
		.src44_valid         (cmd_demux_002_src44_valid),                             //           .valid
		.src44_data          (cmd_demux_002_src44_data),                              //           .data
		.src44_channel       (cmd_demux_002_src44_channel),                           //           .channel
		.src44_startofpacket (cmd_demux_002_src44_startofpacket),                     //           .startofpacket
		.src44_endofpacket   (cmd_demux_002_src44_endofpacket),                       //           .endofpacket
		.src45_ready         (cmd_demux_002_src45_ready),                             //      src45.ready
		.src45_valid         (cmd_demux_002_src45_valid),                             //           .valid
		.src45_data          (cmd_demux_002_src45_data),                              //           .data
		.src45_channel       (cmd_demux_002_src45_channel),                           //           .channel
		.src45_startofpacket (cmd_demux_002_src45_startofpacket),                     //           .startofpacket
		.src45_endofpacket   (cmd_demux_002_src45_endofpacket),                       //           .endofpacket
		.src46_ready         (cmd_demux_002_src46_ready),                             //      src46.ready
		.src46_valid         (cmd_demux_002_src46_valid),                             //           .valid
		.src46_data          (cmd_demux_002_src46_data),                              //           .data
		.src46_channel       (cmd_demux_002_src46_channel),                           //           .channel
		.src46_startofpacket (cmd_demux_002_src46_startofpacket),                     //           .startofpacket
		.src46_endofpacket   (cmd_demux_002_src46_endofpacket),                       //           .endofpacket
		.src47_ready         (cmd_demux_002_src47_ready),                             //      src47.ready
		.src47_valid         (cmd_demux_002_src47_valid),                             //           .valid
		.src47_data          (cmd_demux_002_src47_data),                              //           .data
		.src47_channel       (cmd_demux_002_src47_channel),                           //           .channel
		.src47_startofpacket (cmd_demux_002_src47_startofpacket),                     //           .startofpacket
		.src47_endofpacket   (cmd_demux_002_src47_endofpacket),                       //           .endofpacket
		.src48_ready         (cmd_demux_002_src48_ready),                             //      src48.ready
		.src48_valid         (cmd_demux_002_src48_valid),                             //           .valid
		.src48_data          (cmd_demux_002_src48_data),                              //           .data
		.src48_channel       (cmd_demux_002_src48_channel),                           //           .channel
		.src48_startofpacket (cmd_demux_002_src48_startofpacket),                     //           .startofpacket
		.src48_endofpacket   (cmd_demux_002_src48_endofpacket),                       //           .endofpacket
		.src49_ready         (cmd_demux_002_src49_ready),                             //      src49.ready
		.src49_valid         (cmd_demux_002_src49_valid),                             //           .valid
		.src49_data          (cmd_demux_002_src49_data),                              //           .data
		.src49_channel       (cmd_demux_002_src49_channel),                           //           .channel
		.src49_startofpacket (cmd_demux_002_src49_startofpacket),                     //           .startofpacket
		.src49_endofpacket   (cmd_demux_002_src49_endofpacket),                       //           .endofpacket
		.src50_ready         (cmd_demux_002_src50_ready),                             //      src50.ready
		.src50_valid         (cmd_demux_002_src50_valid),                             //           .valid
		.src50_data          (cmd_demux_002_src50_data),                              //           .data
		.src50_channel       (cmd_demux_002_src50_channel),                           //           .channel
		.src50_startofpacket (cmd_demux_002_src50_startofpacket),                     //           .startofpacket
		.src50_endofpacket   (cmd_demux_002_src50_endofpacket)                        //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_003_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_003_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_003_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_003_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_003_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_003_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_003_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_003_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_003_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_003_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_003_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_003_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_003_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_003_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_003_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_003_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_003_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_003_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_003_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_003_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_003_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_003_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_003_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_003_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_003_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_003_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_003_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_003_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_003_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_003_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_003_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_003_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_003_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_003_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_003_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_003_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_003_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_003_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_003_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_003_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_003_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_003_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_003_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_003_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_003_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_003_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_003_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_003_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_003_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_003_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_003_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_003_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_003_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_003_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_003_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_003_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_003_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_003_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_003_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_003_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_003_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_003_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_003_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_003_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_003_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_003_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_003_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_003_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_003_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_003_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_003_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_003_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_003_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_003_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_003_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_003_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_003_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_003_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_003_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_003_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_003_src21_endofpacket),                                  //           .endofpacket
		.src22_ready         (cmd_demux_003_src22_ready),                                        //      src22.ready
		.src22_valid         (cmd_demux_003_src22_valid),                                        //           .valid
		.src22_data          (cmd_demux_003_src22_data),                                         //           .data
		.src22_channel       (cmd_demux_003_src22_channel),                                      //           .channel
		.src22_startofpacket (cmd_demux_003_src22_startofpacket),                                //           .startofpacket
		.src22_endofpacket   (cmd_demux_003_src22_endofpacket),                                  //           .endofpacket
		.src23_ready         (cmd_demux_003_src23_ready),                                        //      src23.ready
		.src23_valid         (cmd_demux_003_src23_valid),                                        //           .valid
		.src23_data          (cmd_demux_003_src23_data),                                         //           .data
		.src23_channel       (cmd_demux_003_src23_channel),                                      //           .channel
		.src23_startofpacket (cmd_demux_003_src23_startofpacket),                                //           .startofpacket
		.src23_endofpacket   (cmd_demux_003_src23_endofpacket),                                  //           .endofpacket
		.src24_ready         (cmd_demux_003_src24_ready),                                        //      src24.ready
		.src24_valid         (cmd_demux_003_src24_valid),                                        //           .valid
		.src24_data          (cmd_demux_003_src24_data),                                         //           .data
		.src24_channel       (cmd_demux_003_src24_channel),                                      //           .channel
		.src24_startofpacket (cmd_demux_003_src24_startofpacket),                                //           .startofpacket
		.src24_endofpacket   (cmd_demux_003_src24_endofpacket),                                  //           .endofpacket
		.src25_ready         (cmd_demux_003_src25_ready),                                        //      src25.ready
		.src25_valid         (cmd_demux_003_src25_valid),                                        //           .valid
		.src25_data          (cmd_demux_003_src25_data),                                         //           .data
		.src25_channel       (cmd_demux_003_src25_channel),                                      //           .channel
		.src25_startofpacket (cmd_demux_003_src25_startofpacket),                                //           .startofpacket
		.src25_endofpacket   (cmd_demux_003_src25_endofpacket),                                  //           .endofpacket
		.src26_ready         (cmd_demux_003_src26_ready),                                        //      src26.ready
		.src26_valid         (cmd_demux_003_src26_valid),                                        //           .valid
		.src26_data          (cmd_demux_003_src26_data),                                         //           .data
		.src26_channel       (cmd_demux_003_src26_channel),                                      //           .channel
		.src26_startofpacket (cmd_demux_003_src26_startofpacket),                                //           .startofpacket
		.src26_endofpacket   (cmd_demux_003_src26_endofpacket),                                  //           .endofpacket
		.src27_ready         (cmd_demux_003_src27_ready),                                        //      src27.ready
		.src27_valid         (cmd_demux_003_src27_valid),                                        //           .valid
		.src27_data          (cmd_demux_003_src27_data),                                         //           .data
		.src27_channel       (cmd_demux_003_src27_channel),                                      //           .channel
		.src27_startofpacket (cmd_demux_003_src27_startofpacket),                                //           .startofpacket
		.src27_endofpacket   (cmd_demux_003_src27_endofpacket),                                  //           .endofpacket
		.src28_ready         (cmd_demux_003_src28_ready),                                        //      src28.ready
		.src28_valid         (cmd_demux_003_src28_valid),                                        //           .valid
		.src28_data          (cmd_demux_003_src28_data),                                         //           .data
		.src28_channel       (cmd_demux_003_src28_channel),                                      //           .channel
		.src28_startofpacket (cmd_demux_003_src28_startofpacket),                                //           .startofpacket
		.src28_endofpacket   (cmd_demux_003_src28_endofpacket),                                  //           .endofpacket
		.src29_ready         (cmd_demux_003_src29_ready),                                        //      src29.ready
		.src29_valid         (cmd_demux_003_src29_valid),                                        //           .valid
		.src29_data          (cmd_demux_003_src29_data),                                         //           .data
		.src29_channel       (cmd_demux_003_src29_channel),                                      //           .channel
		.src29_startofpacket (cmd_demux_003_src29_startofpacket),                                //           .startofpacket
		.src29_endofpacket   (cmd_demux_003_src29_endofpacket),                                  //           .endofpacket
		.src30_ready         (cmd_demux_003_src30_ready),                                        //      src30.ready
		.src30_valid         (cmd_demux_003_src30_valid),                                        //           .valid
		.src30_data          (cmd_demux_003_src30_data),                                         //           .data
		.src30_channel       (cmd_demux_003_src30_channel),                                      //           .channel
		.src30_startofpacket (cmd_demux_003_src30_startofpacket),                                //           .startofpacket
		.src30_endofpacket   (cmd_demux_003_src30_endofpacket),                                  //           .endofpacket
		.src31_ready         (cmd_demux_003_src31_ready),                                        //      src31.ready
		.src31_valid         (cmd_demux_003_src31_valid),                                        //           .valid
		.src31_data          (cmd_demux_003_src31_data),                                         //           .data
		.src31_channel       (cmd_demux_003_src31_channel),                                      //           .channel
		.src31_startofpacket (cmd_demux_003_src31_startofpacket),                                //           .startofpacket
		.src31_endofpacket   (cmd_demux_003_src31_endofpacket),                                  //           .endofpacket
		.src32_ready         (cmd_demux_003_src32_ready),                                        //      src32.ready
		.src32_valid         (cmd_demux_003_src32_valid),                                        //           .valid
		.src32_data          (cmd_demux_003_src32_data),                                         //           .data
		.src32_channel       (cmd_demux_003_src32_channel),                                      //           .channel
		.src32_startofpacket (cmd_demux_003_src32_startofpacket),                                //           .startofpacket
		.src32_endofpacket   (cmd_demux_003_src32_endofpacket),                                  //           .endofpacket
		.src33_ready         (cmd_demux_003_src33_ready),                                        //      src33.ready
		.src33_valid         (cmd_demux_003_src33_valid),                                        //           .valid
		.src33_data          (cmd_demux_003_src33_data),                                         //           .data
		.src33_channel       (cmd_demux_003_src33_channel),                                      //           .channel
		.src33_startofpacket (cmd_demux_003_src33_startofpacket),                                //           .startofpacket
		.src33_endofpacket   (cmd_demux_003_src33_endofpacket),                                  //           .endofpacket
		.src34_ready         (cmd_demux_003_src34_ready),                                        //      src34.ready
		.src34_valid         (cmd_demux_003_src34_valid),                                        //           .valid
		.src34_data          (cmd_demux_003_src34_data),                                         //           .data
		.src34_channel       (cmd_demux_003_src34_channel),                                      //           .channel
		.src34_startofpacket (cmd_demux_003_src34_startofpacket),                                //           .startofpacket
		.src34_endofpacket   (cmd_demux_003_src34_endofpacket),                                  //           .endofpacket
		.src35_ready         (cmd_demux_003_src35_ready),                                        //      src35.ready
		.src35_valid         (cmd_demux_003_src35_valid),                                        //           .valid
		.src35_data          (cmd_demux_003_src35_data),                                         //           .data
		.src35_channel       (cmd_demux_003_src35_channel),                                      //           .channel
		.src35_startofpacket (cmd_demux_003_src35_startofpacket),                                //           .startofpacket
		.src35_endofpacket   (cmd_demux_003_src35_endofpacket),                                  //           .endofpacket
		.src36_ready         (cmd_demux_003_src36_ready),                                        //      src36.ready
		.src36_valid         (cmd_demux_003_src36_valid),                                        //           .valid
		.src36_data          (cmd_demux_003_src36_data),                                         //           .data
		.src36_channel       (cmd_demux_003_src36_channel),                                      //           .channel
		.src36_startofpacket (cmd_demux_003_src36_startofpacket),                                //           .startofpacket
		.src36_endofpacket   (cmd_demux_003_src36_endofpacket),                                  //           .endofpacket
		.src37_ready         (cmd_demux_003_src37_ready),                                        //      src37.ready
		.src37_valid         (cmd_demux_003_src37_valid),                                        //           .valid
		.src37_data          (cmd_demux_003_src37_data),                                         //           .data
		.src37_channel       (cmd_demux_003_src37_channel),                                      //           .channel
		.src37_startofpacket (cmd_demux_003_src37_startofpacket),                                //           .startofpacket
		.src37_endofpacket   (cmd_demux_003_src37_endofpacket),                                  //           .endofpacket
		.src38_ready         (cmd_demux_003_src38_ready),                                        //      src38.ready
		.src38_valid         (cmd_demux_003_src38_valid),                                        //           .valid
		.src38_data          (cmd_demux_003_src38_data),                                         //           .data
		.src38_channel       (cmd_demux_003_src38_channel),                                      //           .channel
		.src38_startofpacket (cmd_demux_003_src38_startofpacket),                                //           .startofpacket
		.src38_endofpacket   (cmd_demux_003_src38_endofpacket),                                  //           .endofpacket
		.src39_ready         (cmd_demux_003_src39_ready),                                        //      src39.ready
		.src39_valid         (cmd_demux_003_src39_valid),                                        //           .valid
		.src39_data          (cmd_demux_003_src39_data),                                         //           .data
		.src39_channel       (cmd_demux_003_src39_channel),                                      //           .channel
		.src39_startofpacket (cmd_demux_003_src39_startofpacket),                                //           .startofpacket
		.src39_endofpacket   (cmd_demux_003_src39_endofpacket),                                  //           .endofpacket
		.src40_ready         (cmd_demux_003_src40_ready),                                        //      src40.ready
		.src40_valid         (cmd_demux_003_src40_valid),                                        //           .valid
		.src40_data          (cmd_demux_003_src40_data),                                         //           .data
		.src40_channel       (cmd_demux_003_src40_channel),                                      //           .channel
		.src40_startofpacket (cmd_demux_003_src40_startofpacket),                                //           .startofpacket
		.src40_endofpacket   (cmd_demux_003_src40_endofpacket),                                  //           .endofpacket
		.src41_ready         (cmd_demux_003_src41_ready),                                        //      src41.ready
		.src41_valid         (cmd_demux_003_src41_valid),                                        //           .valid
		.src41_data          (cmd_demux_003_src41_data),                                         //           .data
		.src41_channel       (cmd_demux_003_src41_channel),                                      //           .channel
		.src41_startofpacket (cmd_demux_003_src41_startofpacket),                                //           .startofpacket
		.src41_endofpacket   (cmd_demux_003_src41_endofpacket),                                  //           .endofpacket
		.src42_ready         (cmd_demux_003_src42_ready),                                        //      src42.ready
		.src42_valid         (cmd_demux_003_src42_valid),                                        //           .valid
		.src42_data          (cmd_demux_003_src42_data),                                         //           .data
		.src42_channel       (cmd_demux_003_src42_channel),                                      //           .channel
		.src42_startofpacket (cmd_demux_003_src42_startofpacket),                                //           .startofpacket
		.src42_endofpacket   (cmd_demux_003_src42_endofpacket),                                  //           .endofpacket
		.src43_ready         (cmd_demux_003_src43_ready),                                        //      src43.ready
		.src43_valid         (cmd_demux_003_src43_valid),                                        //           .valid
		.src43_data          (cmd_demux_003_src43_data),                                         //           .data
		.src43_channel       (cmd_demux_003_src43_channel),                                      //           .channel
		.src43_startofpacket (cmd_demux_003_src43_startofpacket),                                //           .startofpacket
		.src43_endofpacket   (cmd_demux_003_src43_endofpacket),                                  //           .endofpacket
		.src44_ready         (cmd_demux_003_src44_ready),                                        //      src44.ready
		.src44_valid         (cmd_demux_003_src44_valid),                                        //           .valid
		.src44_data          (cmd_demux_003_src44_data),                                         //           .data
		.src44_channel       (cmd_demux_003_src44_channel),                                      //           .channel
		.src44_startofpacket (cmd_demux_003_src44_startofpacket),                                //           .startofpacket
		.src44_endofpacket   (cmd_demux_003_src44_endofpacket),                                  //           .endofpacket
		.src45_ready         (cmd_demux_003_src45_ready),                                        //      src45.ready
		.src45_valid         (cmd_demux_003_src45_valid),                                        //           .valid
		.src45_data          (cmd_demux_003_src45_data),                                         //           .data
		.src45_channel       (cmd_demux_003_src45_channel),                                      //           .channel
		.src45_startofpacket (cmd_demux_003_src45_startofpacket),                                //           .startofpacket
		.src45_endofpacket   (cmd_demux_003_src45_endofpacket),                                  //           .endofpacket
		.src46_ready         (cmd_demux_003_src46_ready),                                        //      src46.ready
		.src46_valid         (cmd_demux_003_src46_valid),                                        //           .valid
		.src46_data          (cmd_demux_003_src46_data),                                         //           .data
		.src46_channel       (cmd_demux_003_src46_channel),                                      //           .channel
		.src46_startofpacket (cmd_demux_003_src46_startofpacket),                                //           .startofpacket
		.src46_endofpacket   (cmd_demux_003_src46_endofpacket),                                  //           .endofpacket
		.src47_ready         (cmd_demux_003_src47_ready),                                        //      src47.ready
		.src47_valid         (cmd_demux_003_src47_valid),                                        //           .valid
		.src47_data          (cmd_demux_003_src47_data),                                         //           .data
		.src47_channel       (cmd_demux_003_src47_channel),                                      //           .channel
		.src47_startofpacket (cmd_demux_003_src47_startofpacket),                                //           .startofpacket
		.src47_endofpacket   (cmd_demux_003_src47_endofpacket),                                  //           .endofpacket
		.src48_ready         (cmd_demux_003_src48_ready),                                        //      src48.ready
		.src48_valid         (cmd_demux_003_src48_valid),                                        //           .valid
		.src48_data          (cmd_demux_003_src48_data),                                         //           .data
		.src48_channel       (cmd_demux_003_src48_channel),                                      //           .channel
		.src48_startofpacket (cmd_demux_003_src48_startofpacket),                                //           .startofpacket
		.src48_endofpacket   (cmd_demux_003_src48_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                 (clk_0_clk_clk),                                                    //        clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                 //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),               //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                  //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),         //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),           //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                // sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_004_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_004_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_004_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_004_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_004_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_004_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_004_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_004_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_004_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_004_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_004_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_004_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_004_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_004_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_004_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_004_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_004_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_004_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_004_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_004_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_004_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_004_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_004_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_004_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_004_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_004_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_004_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_004_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_004_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_004_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_004_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_004_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_004_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_004_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_004_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_004_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_004_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_004_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_004_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_004_src13_endofpacket),                                  //           .endofpacket
		.src14_ready         (cmd_demux_004_src14_ready),                                        //      src14.ready
		.src14_valid         (cmd_demux_004_src14_valid),                                        //           .valid
		.src14_data          (cmd_demux_004_src14_data),                                         //           .data
		.src14_channel       (cmd_demux_004_src14_channel),                                      //           .channel
		.src14_startofpacket (cmd_demux_004_src14_startofpacket),                                //           .startofpacket
		.src14_endofpacket   (cmd_demux_004_src14_endofpacket),                                  //           .endofpacket
		.src15_ready         (cmd_demux_004_src15_ready),                                        //      src15.ready
		.src15_valid         (cmd_demux_004_src15_valid),                                        //           .valid
		.src15_data          (cmd_demux_004_src15_data),                                         //           .data
		.src15_channel       (cmd_demux_004_src15_channel),                                      //           .channel
		.src15_startofpacket (cmd_demux_004_src15_startofpacket),                                //           .startofpacket
		.src15_endofpacket   (cmd_demux_004_src15_endofpacket),                                  //           .endofpacket
		.src16_ready         (cmd_demux_004_src16_ready),                                        //      src16.ready
		.src16_valid         (cmd_demux_004_src16_valid),                                        //           .valid
		.src16_data          (cmd_demux_004_src16_data),                                         //           .data
		.src16_channel       (cmd_demux_004_src16_channel),                                      //           .channel
		.src16_startofpacket (cmd_demux_004_src16_startofpacket),                                //           .startofpacket
		.src16_endofpacket   (cmd_demux_004_src16_endofpacket),                                  //           .endofpacket
		.src17_ready         (cmd_demux_004_src17_ready),                                        //      src17.ready
		.src17_valid         (cmd_demux_004_src17_valid),                                        //           .valid
		.src17_data          (cmd_demux_004_src17_data),                                         //           .data
		.src17_channel       (cmd_demux_004_src17_channel),                                      //           .channel
		.src17_startofpacket (cmd_demux_004_src17_startofpacket),                                //           .startofpacket
		.src17_endofpacket   (cmd_demux_004_src17_endofpacket),                                  //           .endofpacket
		.src18_ready         (cmd_demux_004_src18_ready),                                        //      src18.ready
		.src18_valid         (cmd_demux_004_src18_valid),                                        //           .valid
		.src18_data          (cmd_demux_004_src18_data),                                         //           .data
		.src18_channel       (cmd_demux_004_src18_channel),                                      //           .channel
		.src18_startofpacket (cmd_demux_004_src18_startofpacket),                                //           .startofpacket
		.src18_endofpacket   (cmd_demux_004_src18_endofpacket),                                  //           .endofpacket
		.src19_ready         (cmd_demux_004_src19_ready),                                        //      src19.ready
		.src19_valid         (cmd_demux_004_src19_valid),                                        //           .valid
		.src19_data          (cmd_demux_004_src19_data),                                         //           .data
		.src19_channel       (cmd_demux_004_src19_channel),                                      //           .channel
		.src19_startofpacket (cmd_demux_004_src19_startofpacket),                                //           .startofpacket
		.src19_endofpacket   (cmd_demux_004_src19_endofpacket),                                  //           .endofpacket
		.src20_ready         (cmd_demux_004_src20_ready),                                        //      src20.ready
		.src20_valid         (cmd_demux_004_src20_valid),                                        //           .valid
		.src20_data          (cmd_demux_004_src20_data),                                         //           .data
		.src20_channel       (cmd_demux_004_src20_channel),                                      //           .channel
		.src20_startofpacket (cmd_demux_004_src20_startofpacket),                                //           .startofpacket
		.src20_endofpacket   (cmd_demux_004_src20_endofpacket),                                  //           .endofpacket
		.src21_ready         (cmd_demux_004_src21_ready),                                        //      src21.ready
		.src21_valid         (cmd_demux_004_src21_valid),                                        //           .valid
		.src21_data          (cmd_demux_004_src21_data),                                         //           .data
		.src21_channel       (cmd_demux_004_src21_channel),                                      //           .channel
		.src21_startofpacket (cmd_demux_004_src21_startofpacket),                                //           .startofpacket
		.src21_endofpacket   (cmd_demux_004_src21_endofpacket),                                  //           .endofpacket
		.src22_ready         (cmd_demux_004_src22_ready),                                        //      src22.ready
		.src22_valid         (cmd_demux_004_src22_valid),                                        //           .valid
		.src22_data          (cmd_demux_004_src22_data),                                         //           .data
		.src22_channel       (cmd_demux_004_src22_channel),                                      //           .channel
		.src22_startofpacket (cmd_demux_004_src22_startofpacket),                                //           .startofpacket
		.src22_endofpacket   (cmd_demux_004_src22_endofpacket),                                  //           .endofpacket
		.src23_ready         (cmd_demux_004_src23_ready),                                        //      src23.ready
		.src23_valid         (cmd_demux_004_src23_valid),                                        //           .valid
		.src23_data          (cmd_demux_004_src23_data),                                         //           .data
		.src23_channel       (cmd_demux_004_src23_channel),                                      //           .channel
		.src23_startofpacket (cmd_demux_004_src23_startofpacket),                                //           .startofpacket
		.src23_endofpacket   (cmd_demux_004_src23_endofpacket),                                  //           .endofpacket
		.src24_ready         (cmd_demux_004_src24_ready),                                        //      src24.ready
		.src24_valid         (cmd_demux_004_src24_valid),                                        //           .valid
		.src24_data          (cmd_demux_004_src24_data),                                         //           .data
		.src24_channel       (cmd_demux_004_src24_channel),                                      //           .channel
		.src24_startofpacket (cmd_demux_004_src24_startofpacket),                                //           .startofpacket
		.src24_endofpacket   (cmd_demux_004_src24_endofpacket),                                  //           .endofpacket
		.src25_ready         (cmd_demux_004_src25_ready),                                        //      src25.ready
		.src25_valid         (cmd_demux_004_src25_valid),                                        //           .valid
		.src25_data          (cmd_demux_004_src25_data),                                         //           .data
		.src25_channel       (cmd_demux_004_src25_channel),                                      //           .channel
		.src25_startofpacket (cmd_demux_004_src25_startofpacket),                                //           .startofpacket
		.src25_endofpacket   (cmd_demux_004_src25_endofpacket),                                  //           .endofpacket
		.src26_ready         (cmd_demux_004_src26_ready),                                        //      src26.ready
		.src26_valid         (cmd_demux_004_src26_valid),                                        //           .valid
		.src26_data          (cmd_demux_004_src26_data),                                         //           .data
		.src26_channel       (cmd_demux_004_src26_channel),                                      //           .channel
		.src26_startofpacket (cmd_demux_004_src26_startofpacket),                                //           .startofpacket
		.src26_endofpacket   (cmd_demux_004_src26_endofpacket),                                  //           .endofpacket
		.src27_ready         (cmd_demux_004_src27_ready),                                        //      src27.ready
		.src27_valid         (cmd_demux_004_src27_valid),                                        //           .valid
		.src27_data          (cmd_demux_004_src27_data),                                         //           .data
		.src27_channel       (cmd_demux_004_src27_channel),                                      //           .channel
		.src27_startofpacket (cmd_demux_004_src27_startofpacket),                                //           .startofpacket
		.src27_endofpacket   (cmd_demux_004_src27_endofpacket),                                  //           .endofpacket
		.src28_ready         (cmd_demux_004_src28_ready),                                        //      src28.ready
		.src28_valid         (cmd_demux_004_src28_valid),                                        //           .valid
		.src28_data          (cmd_demux_004_src28_data),                                         //           .data
		.src28_channel       (cmd_demux_004_src28_channel),                                      //           .channel
		.src28_startofpacket (cmd_demux_004_src28_startofpacket),                                //           .startofpacket
		.src28_endofpacket   (cmd_demux_004_src28_endofpacket),                                  //           .endofpacket
		.src29_ready         (cmd_demux_004_src29_ready),                                        //      src29.ready
		.src29_valid         (cmd_demux_004_src29_valid),                                        //           .valid
		.src29_data          (cmd_demux_004_src29_data),                                         //           .data
		.src29_channel       (cmd_demux_004_src29_channel),                                      //           .channel
		.src29_startofpacket (cmd_demux_004_src29_startofpacket),                                //           .startofpacket
		.src29_endofpacket   (cmd_demux_004_src29_endofpacket),                                  //           .endofpacket
		.src30_ready         (cmd_demux_004_src30_ready),                                        //      src30.ready
		.src30_valid         (cmd_demux_004_src30_valid),                                        //           .valid
		.src30_data          (cmd_demux_004_src30_data),                                         //           .data
		.src30_channel       (cmd_demux_004_src30_channel),                                      //           .channel
		.src30_startofpacket (cmd_demux_004_src30_startofpacket),                                //           .startofpacket
		.src30_endofpacket   (cmd_demux_004_src30_endofpacket),                                  //           .endofpacket
		.src31_ready         (cmd_demux_004_src31_ready),                                        //      src31.ready
		.src31_valid         (cmd_demux_004_src31_valid),                                        //           .valid
		.src31_data          (cmd_demux_004_src31_data),                                         //           .data
		.src31_channel       (cmd_demux_004_src31_channel),                                      //           .channel
		.src31_startofpacket (cmd_demux_004_src31_startofpacket),                                //           .startofpacket
		.src31_endofpacket   (cmd_demux_004_src31_endofpacket),                                  //           .endofpacket
		.src32_ready         (cmd_demux_004_src32_ready),                                        //      src32.ready
		.src32_valid         (cmd_demux_004_src32_valid),                                        //           .valid
		.src32_data          (cmd_demux_004_src32_data),                                         //           .data
		.src32_channel       (cmd_demux_004_src32_channel),                                      //           .channel
		.src32_startofpacket (cmd_demux_004_src32_startofpacket),                                //           .startofpacket
		.src32_endofpacket   (cmd_demux_004_src32_endofpacket),                                  //           .endofpacket
		.src33_ready         (cmd_demux_004_src33_ready),                                        //      src33.ready
		.src33_valid         (cmd_demux_004_src33_valid),                                        //           .valid
		.src33_data          (cmd_demux_004_src33_data),                                         //           .data
		.src33_channel       (cmd_demux_004_src33_channel),                                      //           .channel
		.src33_startofpacket (cmd_demux_004_src33_startofpacket),                                //           .startofpacket
		.src33_endofpacket   (cmd_demux_004_src33_endofpacket),                                  //           .endofpacket
		.src34_ready         (cmd_demux_004_src34_ready),                                        //      src34.ready
		.src34_valid         (cmd_demux_004_src34_valid),                                        //           .valid
		.src34_data          (cmd_demux_004_src34_data),                                         //           .data
		.src34_channel       (cmd_demux_004_src34_channel),                                      //           .channel
		.src34_startofpacket (cmd_demux_004_src34_startofpacket),                                //           .startofpacket
		.src34_endofpacket   (cmd_demux_004_src34_endofpacket),                                  //           .endofpacket
		.src35_ready         (cmd_demux_004_src35_ready),                                        //      src35.ready
		.src35_valid         (cmd_demux_004_src35_valid),                                        //           .valid
		.src35_data          (cmd_demux_004_src35_data),                                         //           .data
		.src35_channel       (cmd_demux_004_src35_channel),                                      //           .channel
		.src35_startofpacket (cmd_demux_004_src35_startofpacket),                                //           .startofpacket
		.src35_endofpacket   (cmd_demux_004_src35_endofpacket),                                  //           .endofpacket
		.src36_ready         (cmd_demux_004_src36_ready),                                        //      src36.ready
		.src36_valid         (cmd_demux_004_src36_valid),                                        //           .valid
		.src36_data          (cmd_demux_004_src36_data),                                         //           .data
		.src36_channel       (cmd_demux_004_src36_channel),                                      //           .channel
		.src36_startofpacket (cmd_demux_004_src36_startofpacket),                                //           .startofpacket
		.src36_endofpacket   (cmd_demux_004_src36_endofpacket),                                  //           .endofpacket
		.src37_ready         (cmd_demux_004_src37_ready),                                        //      src37.ready
		.src37_valid         (cmd_demux_004_src37_valid),                                        //           .valid
		.src37_data          (cmd_demux_004_src37_data),                                         //           .data
		.src37_channel       (cmd_demux_004_src37_channel),                                      //           .channel
		.src37_startofpacket (cmd_demux_004_src37_startofpacket),                                //           .startofpacket
		.src37_endofpacket   (cmd_demux_004_src37_endofpacket),                                  //           .endofpacket
		.src38_ready         (cmd_demux_004_src38_ready),                                        //      src38.ready
		.src38_valid         (cmd_demux_004_src38_valid),                                        //           .valid
		.src38_data          (cmd_demux_004_src38_data),                                         //           .data
		.src38_channel       (cmd_demux_004_src38_channel),                                      //           .channel
		.src38_startofpacket (cmd_demux_004_src38_startofpacket),                                //           .startofpacket
		.src38_endofpacket   (cmd_demux_004_src38_endofpacket),                                  //           .endofpacket
		.src39_ready         (cmd_demux_004_src39_ready),                                        //      src39.ready
		.src39_valid         (cmd_demux_004_src39_valid),                                        //           .valid
		.src39_data          (cmd_demux_004_src39_data),                                         //           .data
		.src39_channel       (cmd_demux_004_src39_channel),                                      //           .channel
		.src39_startofpacket (cmd_demux_004_src39_startofpacket),                                //           .startofpacket
		.src39_endofpacket   (cmd_demux_004_src39_endofpacket),                                  //           .endofpacket
		.src40_ready         (cmd_demux_004_src40_ready),                                        //      src40.ready
		.src40_valid         (cmd_demux_004_src40_valid),                                        //           .valid
		.src40_data          (cmd_demux_004_src40_data),                                         //           .data
		.src40_channel       (cmd_demux_004_src40_channel),                                      //           .channel
		.src40_startofpacket (cmd_demux_004_src40_startofpacket),                                //           .startofpacket
		.src40_endofpacket   (cmd_demux_004_src40_endofpacket),                                  //           .endofpacket
		.src41_ready         (cmd_demux_004_src41_ready),                                        //      src41.ready
		.src41_valid         (cmd_demux_004_src41_valid),                                        //           .valid
		.src41_data          (cmd_demux_004_src41_data),                                         //           .data
		.src41_channel       (cmd_demux_004_src41_channel),                                      //           .channel
		.src41_startofpacket (cmd_demux_004_src41_startofpacket),                                //           .startofpacket
		.src41_endofpacket   (cmd_demux_004_src41_endofpacket),                                  //           .endofpacket
		.src42_ready         (cmd_demux_004_src42_ready),                                        //      src42.ready
		.src42_valid         (cmd_demux_004_src42_valid),                                        //           .valid
		.src42_data          (cmd_demux_004_src42_data),                                         //           .data
		.src42_channel       (cmd_demux_004_src42_channel),                                      //           .channel
		.src42_startofpacket (cmd_demux_004_src42_startofpacket),                                //           .startofpacket
		.src42_endofpacket   (cmd_demux_004_src42_endofpacket),                                  //           .endofpacket
		.src43_ready         (cmd_demux_004_src43_ready),                                        //      src43.ready
		.src43_valid         (cmd_demux_004_src43_valid),                                        //           .valid
		.src43_data          (cmd_demux_004_src43_data),                                         //           .data
		.src43_channel       (cmd_demux_004_src43_channel),                                      //           .channel
		.src43_startofpacket (cmd_demux_004_src43_startofpacket),                                //           .startofpacket
		.src43_endofpacket   (cmd_demux_004_src43_endofpacket),                                  //           .endofpacket
		.src44_ready         (cmd_demux_004_src44_ready),                                        //      src44.ready
		.src44_valid         (cmd_demux_004_src44_valid),                                        //           .valid
		.src44_data          (cmd_demux_004_src44_data),                                         //           .data
		.src44_channel       (cmd_demux_004_src44_channel),                                      //           .channel
		.src44_startofpacket (cmd_demux_004_src44_startofpacket),                                //           .startofpacket
		.src44_endofpacket   (cmd_demux_004_src44_endofpacket),                                  //           .endofpacket
		.src45_ready         (cmd_demux_004_src45_ready),                                        //      src45.ready
		.src45_valid         (cmd_demux_004_src45_valid),                                        //           .valid
		.src45_data          (cmd_demux_004_src45_data),                                         //           .data
		.src45_channel       (cmd_demux_004_src45_channel),                                      //           .channel
		.src45_startofpacket (cmd_demux_004_src45_startofpacket),                                //           .startofpacket
		.src45_endofpacket   (cmd_demux_004_src45_endofpacket),                                  //           .endofpacket
		.src46_ready         (cmd_demux_004_src46_ready),                                        //      src46.ready
		.src46_valid         (cmd_demux_004_src46_valid),                                        //           .valid
		.src46_data          (cmd_demux_004_src46_data),                                         //           .data
		.src46_channel       (cmd_demux_004_src46_channel),                                      //           .channel
		.src46_startofpacket (cmd_demux_004_src46_startofpacket),                                //           .startofpacket
		.src46_endofpacket   (cmd_demux_004_src46_endofpacket),                                  //           .endofpacket
		.src47_ready         (cmd_demux_004_src47_ready),                                        //      src47.ready
		.src47_valid         (cmd_demux_004_src47_valid),                                        //           .valid
		.src47_data          (cmd_demux_004_src47_data),                                         //           .data
		.src47_channel       (cmd_demux_004_src47_channel),                                      //           .channel
		.src47_startofpacket (cmd_demux_004_src47_startofpacket),                                //           .startofpacket
		.src47_endofpacket   (cmd_demux_004_src47_endofpacket),                                  //           .endofpacket
		.src48_ready         (cmd_demux_004_src48_ready),                                        //      src48.ready
		.src48_valid         (cmd_demux_004_src48_valid),                                        //           .valid
		.src48_data          (cmd_demux_004_src48_data),                                         //           .data
		.src48_channel       (cmd_demux_004_src48_channel),                                      //           .channel
		.src48_startofpacket (cmd_demux_004_src48_startofpacket),                                //           .startofpacket
		.src48_endofpacket   (cmd_demux_004_src48_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                      //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                  //          .valid
		.src_data            (cmd_mux_src_data),                                                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src1_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src1_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src1_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src1_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src1_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src1_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src2_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src2_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src2_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src2_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src2_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src5_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src3_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src3_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src3_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src3_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src3_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src3_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src6_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src6_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src6_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src6_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src6_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src6_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src4_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src4_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src4_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src4_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src4_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src4_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                               //          .valid
		.src_data            (cmd_mux_007_src_data),                                //          .data
		.src_channel         (cmd_mux_007_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src5_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src5_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src5_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src5_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src5_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src5_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src5_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src5_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src5_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src5_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src5_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src5_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                               //          .valid
		.src_data            (cmd_mux_008_src_data),                                //          .data
		.src_channel         (cmd_mux_008_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src8_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src8_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src8_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src8_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src8_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src8_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src6_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src6_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src6_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src6_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src6_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src6_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src6_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src6_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src6_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src6_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src6_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src6_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                               //          .valid
		.src_data            (cmd_mux_009_src_data),                                //          .data
		.src_channel         (cmd_mux_009_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src9_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_002_src9_valid),                            //          .valid
		.sink0_channel       (cmd_demux_002_src9_channel),                          //          .channel
		.sink0_data          (cmd_demux_002_src9_data),                             //          .data
		.sink0_startofpacket (cmd_demux_002_src9_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src9_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_003_src7_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src7_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src7_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src7_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src7_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src7_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src7_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src7_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src7_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src7_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src7_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src7_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                               //          .valid
		.src_data            (cmd_mux_010_src_data),                                //          .data
		.src_channel         (cmd_mux_010_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src10_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src10_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src10_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src10_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src10_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src10_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src8_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src8_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src8_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src8_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src8_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src8_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src8_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src8_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src8_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src8_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src8_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src8_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                               //          .valid
		.src_data            (cmd_mux_011_src_data),                                //          .data
		.src_channel         (cmd_mux_011_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src11_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src11_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src11_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src11_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src11_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src11_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src9_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_003_src9_valid),                            //          .valid
		.sink1_channel       (cmd_demux_003_src9_channel),                          //          .channel
		.sink1_data          (cmd_demux_003_src9_data),                             //          .data
		.sink1_startofpacket (cmd_demux_003_src9_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src9_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_004_src9_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_004_src9_valid),                            //          .valid
		.sink2_channel       (cmd_demux_004_src9_channel),                          //          .channel
		.sink2_data          (cmd_demux_004_src9_data),                             //          .data
		.sink2_startofpacket (cmd_demux_004_src9_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src9_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                               //          .valid
		.src_data            (cmd_mux_012_src_data),                                //          .data
		.src_channel         (cmd_mux_012_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src12_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src12_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src12_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src12_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src12_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src12_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src10_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src10_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src10_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src10_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src10_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src10_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src10_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src10_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src10_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src10_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src10_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src10_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                               //          .valid
		.src_data            (cmd_mux_013_src_data),                                //          .data
		.src_channel         (cmd_mux_013_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src13_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src13_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src13_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src13_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src13_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src13_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src11_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src11_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src11_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src11_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src11_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src11_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src11_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src11_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src11_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src11_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src11_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src11_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                               //          .valid
		.src_data            (cmd_mux_014_src_data),                                //          .data
		.src_channel         (cmd_mux_014_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src14_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src14_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src14_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src14_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src14_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src14_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src12_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src12_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src12_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src12_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src12_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src12_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src12_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src12_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src12_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src12_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src12_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src12_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                               //          .valid
		.src_data            (cmd_mux_015_src_data),                                //          .data
		.src_channel         (cmd_mux_015_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src15_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src15_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src15_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src15_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src15_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src15_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src13_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src13_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src13_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src13_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src13_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src13_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src13_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src13_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src13_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src13_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src13_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src13_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                               //          .valid
		.src_data            (cmd_mux_016_src_data),                                //          .data
		.src_channel         (cmd_mux_016_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src16_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src16_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src16_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src16_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src16_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src16_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src14_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src14_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src14_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src14_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src14_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src14_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src14_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src14_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src14_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src14_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src14_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src14_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                               //          .valid
		.src_data            (cmd_mux_017_src_data),                                //          .data
		.src_channel         (cmd_mux_017_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src17_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src17_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src17_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src17_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src17_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src17_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src15_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src15_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src15_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src15_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src15_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src15_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src15_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src15_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src15_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src15_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src15_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src15_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                               //          .valid
		.src_data            (cmd_mux_018_src_data),                                //          .data
		.src_channel         (cmd_mux_018_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src18_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src18_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src18_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src18_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src18_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src18_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src16_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src16_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src16_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src16_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src16_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src16_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src16_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src16_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src16_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src16_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src16_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src16_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                               //          .valid
		.src_data            (cmd_mux_019_src_data),                                //          .data
		.src_channel         (cmd_mux_019_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src19_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src19_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src19_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src19_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src19_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src19_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src17_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src17_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src17_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src17_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src17_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src17_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src17_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src17_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src17_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src17_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src17_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src17_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                               //          .valid
		.src_data            (cmd_mux_020_src_data),                                //          .data
		.src_channel         (cmd_mux_020_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src20_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src20_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src20_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src20_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src20_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src20_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src18_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src18_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src18_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src18_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src18_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src18_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src18_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src18_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src18_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src18_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src18_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src18_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                               //          .valid
		.src_data            (cmd_mux_021_src_data),                                //          .data
		.src_channel         (cmd_mux_021_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src21_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src21_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src21_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src21_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src21_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src21_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src19_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src19_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src19_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src19_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src19_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src19_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src19_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src19_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src19_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src19_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src19_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src19_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                               //          .valid
		.src_data            (cmd_mux_022_src_data),                                //          .data
		.src_channel         (cmd_mux_022_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src22_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src22_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src22_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src22_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src22_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src22_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src20_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src20_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src20_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src20_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src20_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src20_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src20_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src20_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src20_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src20_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src20_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src20_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                               //          .valid
		.src_data            (cmd_mux_023_src_data),                                //          .data
		.src_channel         (cmd_mux_023_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src23_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src23_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src23_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src23_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src23_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src23_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src21_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src21_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src21_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src21_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src21_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src21_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src21_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src21_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src21_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src21_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src21_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src21_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_024 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                               //          .valid
		.src_data            (cmd_mux_024_src_data),                                //          .data
		.src_channel         (cmd_mux_024_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src24_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src24_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src24_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src24_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src24_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src24_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src22_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src22_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src22_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src22_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src22_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src22_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src22_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src22_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src22_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src22_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src22_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src22_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_025 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                               //          .valid
		.src_data            (cmd_mux_025_src_data),                                //          .data
		.src_channel         (cmd_mux_025_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src25_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src25_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src25_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src25_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src25_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src25_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src23_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src23_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src23_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src23_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src23_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src23_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src23_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src23_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src23_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src23_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src23_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src23_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_026 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                               //          .valid
		.src_data            (cmd_mux_026_src_data),                                //          .data
		.src_channel         (cmd_mux_026_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src26_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src26_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src26_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src26_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src26_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src26_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src24_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src24_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src24_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src24_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src24_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src24_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src24_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src24_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src24_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src24_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src24_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src24_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_027 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                               //          .valid
		.src_data            (cmd_mux_027_src_data),                                //          .data
		.src_channel         (cmd_mux_027_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src27_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src27_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src27_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src27_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src27_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src27_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src25_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src25_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src25_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src25_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src25_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src25_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src25_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src25_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src25_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src25_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src25_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src25_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_028 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                               //          .valid
		.src_data            (cmd_mux_028_src_data),                                //          .data
		.src_channel         (cmd_mux_028_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src28_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src28_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src28_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src28_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src28_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src28_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src26_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src26_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src26_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src26_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src26_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src26_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src26_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src26_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src26_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src26_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src26_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src26_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_029 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                               //          .valid
		.src_data            (cmd_mux_029_src_data),                                //          .data
		.src_channel         (cmd_mux_029_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src29_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src29_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src29_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src29_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src29_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src29_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src27_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src27_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src27_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src27_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src27_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src27_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src27_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src27_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src27_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src27_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src27_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src27_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_030 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                               //          .valid
		.src_data            (cmd_mux_030_src_data),                                //          .data
		.src_channel         (cmd_mux_030_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src30_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src30_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src30_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src30_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src30_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src30_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src28_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src28_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src28_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src28_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src28_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src28_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src28_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src28_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src28_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src28_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src28_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src28_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_031 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                               //          .valid
		.src_data            (cmd_mux_031_src_data),                                //          .data
		.src_channel         (cmd_mux_031_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src31_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src31_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src31_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src31_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src31_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src31_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src29_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src29_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src29_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src29_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src29_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src29_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src29_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src29_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src29_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src29_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src29_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src29_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_032 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                               //          .valid
		.src_data            (cmd_mux_032_src_data),                                //          .data
		.src_channel         (cmd_mux_032_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src32_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src32_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src32_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src32_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src32_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src32_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src30_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src30_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src30_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src30_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src30_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src30_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src30_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src30_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src30_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src30_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src30_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src30_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_033 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                               //          .valid
		.src_data            (cmd_mux_033_src_data),                                //          .data
		.src_channel         (cmd_mux_033_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src33_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src33_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src33_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src33_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src33_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src33_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src31_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src31_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src31_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src31_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src31_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src31_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src31_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src31_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src31_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src31_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src31_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src31_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_034 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                               //          .valid
		.src_data            (cmd_mux_034_src_data),                                //          .data
		.src_channel         (cmd_mux_034_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src34_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src34_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src34_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src34_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src34_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src34_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src32_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src32_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src32_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src32_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src32_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src32_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src32_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src32_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src32_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src32_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src32_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src32_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_035 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                               //          .valid
		.src_data            (cmd_mux_035_src_data),                                //          .data
		.src_channel         (cmd_mux_035_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src35_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src35_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src35_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src35_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src35_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src35_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src33_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src33_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src33_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src33_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src33_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src33_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src33_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src33_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src33_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src33_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src33_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src33_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_036 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                               //          .valid
		.src_data            (cmd_mux_036_src_data),                                //          .data
		.src_channel         (cmd_mux_036_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src36_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src36_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src36_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src36_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src36_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src36_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src34_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src34_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src34_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src34_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src34_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src34_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src34_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src34_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src34_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src34_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src34_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src34_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_037 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_037_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_037_src_valid),                               //          .valid
		.src_data            (cmd_mux_037_src_data),                                //          .data
		.src_channel         (cmd_mux_037_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_037_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_037_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src37_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src37_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src37_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src37_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src37_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src37_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src35_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src35_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src35_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src35_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src35_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src35_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src35_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src35_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src35_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src35_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src35_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src35_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_038 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_038_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_038_src_valid),                               //          .valid
		.src_data            (cmd_mux_038_src_data),                                //          .data
		.src_channel         (cmd_mux_038_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_038_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_038_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src38_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src38_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src38_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src38_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src38_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src38_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src36_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src36_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src36_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src36_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src36_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src36_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src36_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src36_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src36_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src36_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src36_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src36_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_039 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_039_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_039_src_valid),                               //          .valid
		.src_data            (cmd_mux_039_src_data),                                //          .data
		.src_channel         (cmd_mux_039_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_039_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_039_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src39_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src39_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src39_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src39_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src39_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src39_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src37_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src37_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src37_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src37_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src37_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src37_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src37_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src37_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src37_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src37_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src37_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src37_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_040 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_040_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_040_src_valid),                               //          .valid
		.src_data            (cmd_mux_040_src_data),                                //          .data
		.src_channel         (cmd_mux_040_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_040_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_040_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src40_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src40_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src40_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src40_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src40_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src40_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src38_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src38_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src38_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src38_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src38_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src38_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src38_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src38_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src38_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src38_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src38_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src38_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_041 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_041_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_041_src_valid),                               //          .valid
		.src_data            (cmd_mux_041_src_data),                                //          .data
		.src_channel         (cmd_mux_041_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_041_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_041_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src41_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src41_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src41_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src41_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src41_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src41_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src39_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src39_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src39_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src39_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src39_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src39_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src39_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src39_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src39_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src39_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src39_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src39_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_042 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_042_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_042_src_valid),                               //          .valid
		.src_data            (cmd_mux_042_src_data),                                //          .data
		.src_channel         (cmd_mux_042_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_042_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_042_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src42_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src42_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src42_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src42_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src42_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src42_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src40_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src40_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src40_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src40_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src40_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src40_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src40_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src40_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src40_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src40_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src40_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src40_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_043 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_043_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_043_src_valid),                               //          .valid
		.src_data            (cmd_mux_043_src_data),                                //          .data
		.src_channel         (cmd_mux_043_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_043_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_043_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src43_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src43_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src43_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src43_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src43_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src43_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src41_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src41_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src41_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src41_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src41_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src41_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src41_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src41_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src41_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src41_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src41_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src41_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_044 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_044_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_044_src_valid),                               //          .valid
		.src_data            (cmd_mux_044_src_data),                                //          .data
		.src_channel         (cmd_mux_044_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_044_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_044_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src44_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src44_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src44_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src44_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src44_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src44_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src42_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src42_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src42_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src42_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src42_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src42_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src42_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src42_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src42_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src42_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src42_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src42_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_045 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_045_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_045_src_valid),                               //          .valid
		.src_data            (cmd_mux_045_src_data),                                //          .data
		.src_channel         (cmd_mux_045_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_045_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_045_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src45_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src45_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src45_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src45_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src45_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src45_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src43_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src43_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src43_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src43_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src43_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src43_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src43_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src43_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src43_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src43_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src43_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src43_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_046 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_046_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_046_src_valid),                               //          .valid
		.src_data            (cmd_mux_046_src_data),                                //          .data
		.src_channel         (cmd_mux_046_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_046_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_046_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src46_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src46_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src46_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src46_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src46_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src46_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src44_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src44_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src44_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src44_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src44_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src44_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src44_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src44_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src44_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src44_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src44_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src44_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_047 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_047_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_047_src_valid),                               //          .valid
		.src_data            (cmd_mux_047_src_data),                                //          .data
		.src_channel         (cmd_mux_047_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_047_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_047_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src47_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src47_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src47_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src47_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src47_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src47_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src45_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src45_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src45_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src45_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src45_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src45_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src45_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src45_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src45_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src45_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src45_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src45_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_048 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_048_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_048_src_valid),                               //          .valid
		.src_data            (cmd_mux_048_src_data),                                //          .data
		.src_channel         (cmd_mux_048_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_048_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_048_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src48_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src48_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src48_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src48_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src48_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src48_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src46_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src46_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src46_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src46_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src46_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src46_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src46_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src46_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src46_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src46_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src46_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src46_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_049 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_049_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_049_src_valid),                               //          .valid
		.src_data            (cmd_mux_049_src_data),                                //          .data
		.src_channel         (cmd_mux_049_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_049_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_049_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src49_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src49_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src49_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src49_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src49_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src49_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src47_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src47_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src47_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src47_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src47_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src47_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src47_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src47_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src47_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src47_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src47_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src47_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_050 (
		.clk                 (clk_0_clk_clk),                                       //       clk.clk
		.reset               (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_050_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_050_src_valid),                               //          .valid
		.src_data            (cmd_mux_050_src_data),                                //          .data
		.src_channel         (cmd_mux_050_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_050_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_050_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_002_src50_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src50_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src50_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src50_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src50_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src50_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src48_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src48_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src48_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src48_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src48_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src48_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src48_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src48_valid),                           //          .valid
		.sink2_channel       (cmd_demux_004_src48_channel),                         //          .channel
		.sink2_data          (cmd_demux_004_src48_data),                            //          .data
		.sink2_startofpacket (cmd_demux_004_src48_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src48_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                          //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                //          .valid
		.src2_data          (rsp_demux_src2_data),                                 //          .data
		.src2_channel       (rsp_demux_src2_channel),                              //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                        //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_001_src2_data),                             //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //      sink.ready
		.sink_channel       (router_007_src_channel),                              //          .channel
		.sink_data          (router_007_src_data),                                 //          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_007_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_002_src1_data),                             //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_002_src2_data),                             //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                //      sink.ready
		.sink_channel       (router_008_src_channel),                              //          .channel
		.sink_data          (router_008_src_data),                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                //      sink.ready
		.sink_channel       (router_009_src_channel),                              //          .channel
		.sink_data          (router_009_src_data),                                 //          .data
		.sink_startofpacket (router_009_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_009_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_004_src1_data),                             //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_004_src2_data),                             //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                //      sink.ready
		.sink_channel       (router_010_src_channel),                              //          .channel
		.sink_data          (router_010_src_data),                                 //          .data
		.sink_startofpacket (router_010_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_010_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_005_src1_data),                             //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_005_src2_data),                             //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                //      sink.ready
		.sink_channel       (router_011_src_channel),                              //          .channel
		.sink_data          (router_011_src_data),                                 //          .data
		.sink_startofpacket (router_011_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_011_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_006_src1_data),                             //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_006_src2_data),                             //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                //      sink.ready
		.sink_channel       (router_012_src_channel),                              //          .channel
		.sink_data          (router_012_src_data),                                 //          .data
		.sink_startofpacket (router_012_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_012_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_007_src0_data),                             //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_007_src1_data),                             //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_007_src2_data),                             //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                //      sink.ready
		.sink_channel       (router_013_src_channel),                              //          .channel
		.sink_data          (router_013_src_data),                                 //          .data
		.sink_startofpacket (router_013_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_013_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_008_src0_data),                             //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_008_src1_data),                             //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_008_src2_data),                             //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                //      sink.ready
		.sink_channel       (router_014_src_channel),                              //          .channel
		.sink_data          (router_014_src_data),                                 //          .data
		.sink_startofpacket (router_014_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_014_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_009_src0_data),                             //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_009_src1_data),                             //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_009_src2_data),                             //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                //      sink.ready
		.sink_channel       (router_015_src_channel),                              //          .channel
		.sink_data          (router_015_src_data),                                 //          .data
		.sink_startofpacket (router_015_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_015_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_010_src0_data),                             //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_010_src1_data),                             //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_010_src2_data),                             //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                //      sink.ready
		.sink_channel       (router_016_src_channel),                              //          .channel
		.sink_data          (router_016_src_data),                                 //          .data
		.sink_startofpacket (router_016_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_016_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_011_src0_data),                             //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_011_src1_data),                             //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_011_src2_data),                             //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                //      sink.ready
		.sink_channel       (router_017_src_channel),                              //          .channel
		.sink_data          (router_017_src_data),                                 //          .data
		.sink_startofpacket (router_017_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_017_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_012_src0_data),                             //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_012_src1_data),                             //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_012_src2_data),                             //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                //      sink.ready
		.sink_channel       (router_018_src_channel),                              //          .channel
		.sink_data          (router_018_src_data),                                 //          .data
		.sink_startofpacket (router_018_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_018_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_013_src0_data),                             //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_013_src1_data),                             //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_013_src2_data),                             //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                //      sink.ready
		.sink_channel       (router_019_src_channel),                              //          .channel
		.sink_data          (router_019_src_data),                                 //          .data
		.sink_startofpacket (router_019_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_019_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_014_src0_data),                             //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_014_src1_data),                             //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_014_src2_data),                             //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                //      sink.ready
		.sink_channel       (router_020_src_channel),                              //          .channel
		.sink_data          (router_020_src_data),                                 //          .data
		.sink_startofpacket (router_020_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_020_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_015_src0_data),                             //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_015_src1_data),                             //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_015_src2_data),                             //          .data
		.src2_channel       (rsp_demux_015_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                //      sink.ready
		.sink_channel       (router_021_src_channel),                              //          .channel
		.sink_data          (router_021_src_data),                                 //          .data
		.sink_startofpacket (router_021_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_021_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_016_src0_data),                             //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_016_src1_data),                             //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_016_src2_data),                             //          .data
		.src2_channel       (rsp_demux_016_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                //      sink.ready
		.sink_channel       (router_022_src_channel),                              //          .channel
		.sink_data          (router_022_src_data),                                 //          .data
		.sink_startofpacket (router_022_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_022_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_017_src0_data),                             //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_017_src1_data),                             //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_017_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_017_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_017_src2_data),                             //          .data
		.src2_channel       (rsp_demux_017_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_017_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_017_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                //      sink.ready
		.sink_channel       (router_023_src_channel),                              //          .channel
		.sink_data          (router_023_src_data),                                 //          .data
		.sink_startofpacket (router_023_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_023_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_018_src0_data),                             //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_018_src1_data),                             //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_018_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_018_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_018_src2_data),                             //          .data
		.src2_channel       (rsp_demux_018_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_018_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_018_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                //      sink.ready
		.sink_channel       (router_024_src_channel),                              //          .channel
		.sink_data          (router_024_src_data),                                 //          .data
		.sink_startofpacket (router_024_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_024_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_019_src0_data),                             //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_019_src1_data),                             //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_019_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_019_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_019_src2_data),                             //          .data
		.src2_channel       (rsp_demux_019_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_019_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_019_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                                //      sink.ready
		.sink_channel       (router_025_src_channel),                              //          .channel
		.sink_data          (router_025_src_data),                                 //          .data
		.sink_startofpacket (router_025_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_025_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_020_src0_data),                             //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_020_src1_data),                             //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_020_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_020_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_020_src2_data),                             //          .data
		.src2_channel       (rsp_demux_020_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_020_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_020_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                                //      sink.ready
		.sink_channel       (router_026_src_channel),                              //          .channel
		.sink_data          (router_026_src_data),                                 //          .data
		.sink_startofpacket (router_026_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_026_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_021_src0_data),                             //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_021_src1_data),                             //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_021_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_021_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_021_src2_data),                             //          .data
		.src2_channel       (rsp_demux_021_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_021_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_021_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                //      sink.ready
		.sink_channel       (router_027_src_channel),                              //          .channel
		.sink_data          (router_027_src_data),                                 //          .data
		.sink_startofpacket (router_027_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_027_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_022_src0_data),                             //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_022_src1_data),                             //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_022_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_022_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_022_src2_data),                             //          .data
		.src2_channel       (rsp_demux_022_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_022_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_022_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                                //      sink.ready
		.sink_channel       (router_028_src_channel),                              //          .channel
		.sink_data          (router_028_src_data),                                 //          .data
		.sink_startofpacket (router_028_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_028_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_023_src0_data),                             //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_023_src1_data),                             //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_023_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_023_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_023_src2_data),                             //          .data
		.src2_channel       (rsp_demux_023_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_023_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_023_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_024 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                                //      sink.ready
		.sink_channel       (router_029_src_channel),                              //          .channel
		.sink_data          (router_029_src_data),                                 //          .data
		.sink_startofpacket (router_029_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_029_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_024_src0_data),                             //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_024_src1_data),                             //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_024_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_024_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_024_src2_data),                             //          .data
		.src2_channel       (rsp_demux_024_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_024_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_024_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_025 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                                //      sink.ready
		.sink_channel       (router_030_src_channel),                              //          .channel
		.sink_data          (router_030_src_data),                                 //          .data
		.sink_startofpacket (router_030_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_030_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_025_src0_data),                             //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_025_src1_data),                             //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_025_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_025_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_025_src2_data),                             //          .data
		.src2_channel       (rsp_demux_025_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_025_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_025_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_026 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                                //      sink.ready
		.sink_channel       (router_031_src_channel),                              //          .channel
		.sink_data          (router_031_src_data),                                 //          .data
		.sink_startofpacket (router_031_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_031_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_026_src0_data),                             //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_026_src1_data),                             //          .data
		.src1_channel       (rsp_demux_026_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_026_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_026_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_026_src2_data),                             //          .data
		.src2_channel       (rsp_demux_026_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_026_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_026_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_027 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                                //      sink.ready
		.sink_channel       (router_032_src_channel),                              //          .channel
		.sink_data          (router_032_src_data),                                 //          .data
		.sink_startofpacket (router_032_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_032_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_027_src0_data),                             //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_027_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_027_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_027_src1_data),                             //          .data
		.src1_channel       (rsp_demux_027_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_027_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_027_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_027_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_027_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_027_src2_data),                             //          .data
		.src2_channel       (rsp_demux_027_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_027_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_027_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_028 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                                //      sink.ready
		.sink_channel       (router_033_src_channel),                              //          .channel
		.sink_data          (router_033_src_data),                                 //          .data
		.sink_startofpacket (router_033_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_033_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_028_src0_data),                             //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_028_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_028_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_028_src1_data),                             //          .data
		.src1_channel       (rsp_demux_028_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_028_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_028_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_028_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_028_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_028_src2_data),                             //          .data
		.src2_channel       (rsp_demux_028_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_028_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_028_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_029 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                                //      sink.ready
		.sink_channel       (router_034_src_channel),                              //          .channel
		.sink_data          (router_034_src_data),                                 //          .data
		.sink_startofpacket (router_034_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_034_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_029_src0_data),                             //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_029_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_029_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_029_src1_data),                             //          .data
		.src1_channel       (rsp_demux_029_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_029_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_029_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_029_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_029_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_029_src2_data),                             //          .data
		.src2_channel       (rsp_demux_029_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_029_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_029_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_030 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                                //      sink.ready
		.sink_channel       (router_035_src_channel),                              //          .channel
		.sink_data          (router_035_src_data),                                 //          .data
		.sink_startofpacket (router_035_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_035_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_030_src0_data),                             //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_030_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_030_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_030_src1_data),                             //          .data
		.src1_channel       (rsp_demux_030_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_030_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_030_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_030_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_030_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_030_src2_data),                             //          .data
		.src2_channel       (rsp_demux_030_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_030_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_030_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_031 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                                //      sink.ready
		.sink_channel       (router_036_src_channel),                              //          .channel
		.sink_data          (router_036_src_data),                                 //          .data
		.sink_startofpacket (router_036_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_036_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_031_src0_data),                             //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_031_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_031_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_031_src1_data),                             //          .data
		.src1_channel       (rsp_demux_031_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_031_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_031_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_031_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_031_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_031_src2_data),                             //          .data
		.src2_channel       (rsp_demux_031_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_031_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_031_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_032 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                                //      sink.ready
		.sink_channel       (router_037_src_channel),                              //          .channel
		.sink_data          (router_037_src_data),                                 //          .data
		.sink_startofpacket (router_037_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_037_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_032_src0_data),                             //          .data
		.src0_channel       (rsp_demux_032_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_032_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_032_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_032_src1_data),                             //          .data
		.src1_channel       (rsp_demux_032_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_032_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_032_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_032_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_032_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_032_src2_data),                             //          .data
		.src2_channel       (rsp_demux_032_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_032_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_032_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_033 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                                //      sink.ready
		.sink_channel       (router_038_src_channel),                              //          .channel
		.sink_data          (router_038_src_data),                                 //          .data
		.sink_startofpacket (router_038_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_038_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_033_src0_data),                             //          .data
		.src0_channel       (rsp_demux_033_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_033_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_033_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_033_src1_data),                             //          .data
		.src1_channel       (rsp_demux_033_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_033_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_033_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_033_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_033_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_033_src2_data),                             //          .data
		.src2_channel       (rsp_demux_033_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_033_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_033_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_034 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                                //      sink.ready
		.sink_channel       (router_039_src_channel),                              //          .channel
		.sink_data          (router_039_src_data),                                 //          .data
		.sink_startofpacket (router_039_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_039_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_034_src0_data),                             //          .data
		.src0_channel       (rsp_demux_034_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_034_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_034_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_034_src1_data),                             //          .data
		.src1_channel       (rsp_demux_034_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_034_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_034_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_034_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_034_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_034_src2_data),                             //          .data
		.src2_channel       (rsp_demux_034_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_034_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_034_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_035 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_040_src_ready),                                //      sink.ready
		.sink_channel       (router_040_src_channel),                              //          .channel
		.sink_data          (router_040_src_data),                                 //          .data
		.sink_startofpacket (router_040_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_040_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_035_src0_data),                             //          .data
		.src0_channel       (rsp_demux_035_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_035_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_035_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_035_src1_data),                             //          .data
		.src1_channel       (rsp_demux_035_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_035_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_035_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_035_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_035_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_035_src2_data),                             //          .data
		.src2_channel       (rsp_demux_035_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_035_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_035_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_036 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_041_src_ready),                                //      sink.ready
		.sink_channel       (router_041_src_channel),                              //          .channel
		.sink_data          (router_041_src_data),                                 //          .data
		.sink_startofpacket (router_041_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_041_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_036_src0_data),                             //          .data
		.src0_channel       (rsp_demux_036_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_036_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_036_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_036_src1_data),                             //          .data
		.src1_channel       (rsp_demux_036_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_036_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_036_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_036_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_036_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_036_src2_data),                             //          .data
		.src2_channel       (rsp_demux_036_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_036_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_036_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_037 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_042_src_ready),                                //      sink.ready
		.sink_channel       (router_042_src_channel),                              //          .channel
		.sink_data          (router_042_src_data),                                 //          .data
		.sink_startofpacket (router_042_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_042_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_037_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_037_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_037_src0_data),                             //          .data
		.src0_channel       (rsp_demux_037_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_037_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_037_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_037_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_037_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_037_src1_data),                             //          .data
		.src1_channel       (rsp_demux_037_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_037_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_037_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_037_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_037_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_037_src2_data),                             //          .data
		.src2_channel       (rsp_demux_037_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_037_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_037_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_038 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_043_src_ready),                                //      sink.ready
		.sink_channel       (router_043_src_channel),                              //          .channel
		.sink_data          (router_043_src_data),                                 //          .data
		.sink_startofpacket (router_043_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_043_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_038_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_038_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_038_src0_data),                             //          .data
		.src0_channel       (rsp_demux_038_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_038_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_038_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_038_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_038_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_038_src1_data),                             //          .data
		.src1_channel       (rsp_demux_038_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_038_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_038_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_038_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_038_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_038_src2_data),                             //          .data
		.src2_channel       (rsp_demux_038_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_038_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_038_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_039 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_044_src_ready),                                //      sink.ready
		.sink_channel       (router_044_src_channel),                              //          .channel
		.sink_data          (router_044_src_data),                                 //          .data
		.sink_startofpacket (router_044_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_044_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_039_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_039_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_039_src0_data),                             //          .data
		.src0_channel       (rsp_demux_039_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_039_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_039_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_039_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_039_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_039_src1_data),                             //          .data
		.src1_channel       (rsp_demux_039_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_039_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_039_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_039_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_039_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_039_src2_data),                             //          .data
		.src2_channel       (rsp_demux_039_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_039_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_039_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_040 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_045_src_ready),                                //      sink.ready
		.sink_channel       (router_045_src_channel),                              //          .channel
		.sink_data          (router_045_src_data),                                 //          .data
		.sink_startofpacket (router_045_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_045_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_040_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_040_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_040_src0_data),                             //          .data
		.src0_channel       (rsp_demux_040_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_040_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_040_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_040_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_040_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_040_src1_data),                             //          .data
		.src1_channel       (rsp_demux_040_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_040_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_040_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_040_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_040_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_040_src2_data),                             //          .data
		.src2_channel       (rsp_demux_040_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_040_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_040_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_041 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_046_src_ready),                                //      sink.ready
		.sink_channel       (router_046_src_channel),                              //          .channel
		.sink_data          (router_046_src_data),                                 //          .data
		.sink_startofpacket (router_046_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_046_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_041_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_041_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_041_src0_data),                             //          .data
		.src0_channel       (rsp_demux_041_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_041_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_041_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_041_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_041_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_041_src1_data),                             //          .data
		.src1_channel       (rsp_demux_041_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_041_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_041_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_041_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_041_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_041_src2_data),                             //          .data
		.src2_channel       (rsp_demux_041_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_041_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_041_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_042 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                                //      sink.ready
		.sink_channel       (router_047_src_channel),                              //          .channel
		.sink_data          (router_047_src_data),                                 //          .data
		.sink_startofpacket (router_047_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_047_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_042_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_042_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_042_src0_data),                             //          .data
		.src0_channel       (rsp_demux_042_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_042_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_042_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_042_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_042_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_042_src1_data),                             //          .data
		.src1_channel       (rsp_demux_042_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_042_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_042_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_042_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_042_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_042_src2_data),                             //          .data
		.src2_channel       (rsp_demux_042_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_042_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_042_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_043 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                                //      sink.ready
		.sink_channel       (router_048_src_channel),                              //          .channel
		.sink_data          (router_048_src_data),                                 //          .data
		.sink_startofpacket (router_048_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_048_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_043_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_043_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_043_src0_data),                             //          .data
		.src0_channel       (rsp_demux_043_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_043_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_043_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_043_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_043_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_043_src1_data),                             //          .data
		.src1_channel       (rsp_demux_043_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_043_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_043_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_043_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_043_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_043_src2_data),                             //          .data
		.src2_channel       (rsp_demux_043_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_043_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_043_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_044 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_049_src_ready),                                //      sink.ready
		.sink_channel       (router_049_src_channel),                              //          .channel
		.sink_data          (router_049_src_data),                                 //          .data
		.sink_startofpacket (router_049_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_049_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_044_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_044_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_044_src0_data),                             //          .data
		.src0_channel       (rsp_demux_044_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_044_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_044_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_044_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_044_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_044_src1_data),                             //          .data
		.src1_channel       (rsp_demux_044_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_044_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_044_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_044_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_044_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_044_src2_data),                             //          .data
		.src2_channel       (rsp_demux_044_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_044_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_044_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_045 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_050_src_ready),                                //      sink.ready
		.sink_channel       (router_050_src_channel),                              //          .channel
		.sink_data          (router_050_src_data),                                 //          .data
		.sink_startofpacket (router_050_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_050_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_050_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_045_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_045_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_045_src0_data),                             //          .data
		.src0_channel       (rsp_demux_045_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_045_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_045_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_045_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_045_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_045_src1_data),                             //          .data
		.src1_channel       (rsp_demux_045_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_045_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_045_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_045_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_045_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_045_src2_data),                             //          .data
		.src2_channel       (rsp_demux_045_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_045_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_045_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_046 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_051_src_ready),                                //      sink.ready
		.sink_channel       (router_051_src_channel),                              //          .channel
		.sink_data          (router_051_src_data),                                 //          .data
		.sink_startofpacket (router_051_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_051_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_051_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_046_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_046_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_046_src0_data),                             //          .data
		.src0_channel       (rsp_demux_046_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_046_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_046_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_046_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_046_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_046_src1_data),                             //          .data
		.src1_channel       (rsp_demux_046_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_046_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_046_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_046_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_046_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_046_src2_data),                             //          .data
		.src2_channel       (rsp_demux_046_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_046_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_046_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_047 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_052_src_ready),                                //      sink.ready
		.sink_channel       (router_052_src_channel),                              //          .channel
		.sink_data          (router_052_src_data),                                 //          .data
		.sink_startofpacket (router_052_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_052_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_052_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_047_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_047_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_047_src0_data),                             //          .data
		.src0_channel       (rsp_demux_047_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_047_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_047_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_047_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_047_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_047_src1_data),                             //          .data
		.src1_channel       (rsp_demux_047_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_047_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_047_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_047_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_047_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_047_src2_data),                             //          .data
		.src2_channel       (rsp_demux_047_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_047_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_047_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_048 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_053_src_ready),                                //      sink.ready
		.sink_channel       (router_053_src_channel),                              //          .channel
		.sink_data          (router_053_src_data),                                 //          .data
		.sink_startofpacket (router_053_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_053_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_053_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_048_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_048_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_048_src0_data),                             //          .data
		.src0_channel       (rsp_demux_048_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_048_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_048_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_048_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_048_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_048_src1_data),                             //          .data
		.src1_channel       (rsp_demux_048_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_048_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_048_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_048_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_048_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_048_src2_data),                             //          .data
		.src2_channel       (rsp_demux_048_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_048_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_048_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_049 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_054_src_ready),                                //      sink.ready
		.sink_channel       (router_054_src_channel),                              //          .channel
		.sink_data          (router_054_src_data),                                 //          .data
		.sink_startofpacket (router_054_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_054_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_054_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_049_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_049_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_049_src0_data),                             //          .data
		.src0_channel       (rsp_demux_049_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_049_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_049_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_049_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_049_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_049_src1_data),                             //          .data
		.src1_channel       (rsp_demux_049_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_049_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_049_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_049_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_049_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_049_src2_data),                             //          .data
		.src2_channel       (rsp_demux_049_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_049_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_049_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_050 (
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_055_src_ready),                                //      sink.ready
		.sink_channel       (router_055_src_channel),                              //          .channel
		.sink_data          (router_055_src_data),                                 //          .data
		.sink_startofpacket (router_055_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_055_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_055_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_050_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_050_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_050_src0_data),                             //          .data
		.src0_channel       (rsp_demux_050_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_050_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_050_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_050_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_050_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_050_src1_data),                             //          .data
		.src1_channel       (rsp_demux_050_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_050_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_050_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_050_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_050_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_050_src2_data),                             //          .data
		.src2_channel       (rsp_demux_050_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_050_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_050_src2_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                                              //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                                              //          .valid
		.src_data             (rsp_mux_002_src_data),                                                               //          .data
		.src_channel          (rsp_mux_002_src_channel),                                                            //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                                        //          .endofpacket
		.sink0_ready          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel        (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data           (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket  (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket    (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                           //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                           //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                                         //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                            //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                                   //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                                     //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                           //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                           //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                         //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                            //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                           //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                           //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                         //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                            //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                   //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                     //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                           //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                           //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                         //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                            //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                   //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                     //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                           //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                           //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                         //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                            //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                   //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                     //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                           //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                           //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                         //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                            //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                   //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                     //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                           //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                           //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                         //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                            //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                   //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                     //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                           //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                           //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                         //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                            //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                   //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                     //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                           //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                           //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                         //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                            //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                   //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                     //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                           //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                           //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                         //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                            //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                   //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                     //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                           //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                           //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                                         //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                            //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                                   //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                                     //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                           //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                           //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                                         //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                            //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                                   //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                                     //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                           //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                           //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                                         //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                            //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                                   //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                                     //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                           //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                           //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                                         //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                            //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                                   //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                                     //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                           //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                           //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                                         //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                            //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                                   //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                                     //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                                           //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                                           //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                                         //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                                            //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                                   //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                                     //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                                           //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                                           //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                                         //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                                            //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                                   //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                                     //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                                           //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                                           //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                                         //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                                            //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                                   //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                                     //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                                           //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                                           //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                                         //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                                            //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                                   //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                                     //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                                           //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                                           //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                                         //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                                            //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                                   //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                                     //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                                           //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                                           //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                                         //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                                            //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                                   //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                                                     //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                                                           //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                                                           //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                                                         //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                                                            //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),                                                   //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                                                     //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                                                           //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                                                           //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                                                         //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                                                            //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),                                                   //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),                                                     //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                                                           //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                                                           //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                                                         //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                                                            //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),                                                   //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),                                                     //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                                                           //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                                                           //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                                                         //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                                                            //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),                                                   //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),                                                     //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                                                           //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                                                           //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                                                         //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                                                            //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),                                                   //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket),                                                     //          .endofpacket
		.sink27_ready         (rsp_demux_027_src0_ready),                                                           //    sink27.ready
		.sink27_valid         (rsp_demux_027_src0_valid),                                                           //          .valid
		.sink27_channel       (rsp_demux_027_src0_channel),                                                         //          .channel
		.sink27_data          (rsp_demux_027_src0_data),                                                            //          .data
		.sink27_startofpacket (rsp_demux_027_src0_startofpacket),                                                   //          .startofpacket
		.sink27_endofpacket   (rsp_demux_027_src0_endofpacket),                                                     //          .endofpacket
		.sink28_ready         (rsp_demux_028_src0_ready),                                                           //    sink28.ready
		.sink28_valid         (rsp_demux_028_src0_valid),                                                           //          .valid
		.sink28_channel       (rsp_demux_028_src0_channel),                                                         //          .channel
		.sink28_data          (rsp_demux_028_src0_data),                                                            //          .data
		.sink28_startofpacket (rsp_demux_028_src0_startofpacket),                                                   //          .startofpacket
		.sink28_endofpacket   (rsp_demux_028_src0_endofpacket),                                                     //          .endofpacket
		.sink29_ready         (rsp_demux_029_src0_ready),                                                           //    sink29.ready
		.sink29_valid         (rsp_demux_029_src0_valid),                                                           //          .valid
		.sink29_channel       (rsp_demux_029_src0_channel),                                                         //          .channel
		.sink29_data          (rsp_demux_029_src0_data),                                                            //          .data
		.sink29_startofpacket (rsp_demux_029_src0_startofpacket),                                                   //          .startofpacket
		.sink29_endofpacket   (rsp_demux_029_src0_endofpacket),                                                     //          .endofpacket
		.sink30_ready         (rsp_demux_030_src0_ready),                                                           //    sink30.ready
		.sink30_valid         (rsp_demux_030_src0_valid),                                                           //          .valid
		.sink30_channel       (rsp_demux_030_src0_channel),                                                         //          .channel
		.sink30_data          (rsp_demux_030_src0_data),                                                            //          .data
		.sink30_startofpacket (rsp_demux_030_src0_startofpacket),                                                   //          .startofpacket
		.sink30_endofpacket   (rsp_demux_030_src0_endofpacket),                                                     //          .endofpacket
		.sink31_ready         (rsp_demux_031_src0_ready),                                                           //    sink31.ready
		.sink31_valid         (rsp_demux_031_src0_valid),                                                           //          .valid
		.sink31_channel       (rsp_demux_031_src0_channel),                                                         //          .channel
		.sink31_data          (rsp_demux_031_src0_data),                                                            //          .data
		.sink31_startofpacket (rsp_demux_031_src0_startofpacket),                                                   //          .startofpacket
		.sink31_endofpacket   (rsp_demux_031_src0_endofpacket),                                                     //          .endofpacket
		.sink32_ready         (rsp_demux_032_src0_ready),                                                           //    sink32.ready
		.sink32_valid         (rsp_demux_032_src0_valid),                                                           //          .valid
		.sink32_channel       (rsp_demux_032_src0_channel),                                                         //          .channel
		.sink32_data          (rsp_demux_032_src0_data),                                                            //          .data
		.sink32_startofpacket (rsp_demux_032_src0_startofpacket),                                                   //          .startofpacket
		.sink32_endofpacket   (rsp_demux_032_src0_endofpacket),                                                     //          .endofpacket
		.sink33_ready         (rsp_demux_033_src0_ready),                                                           //    sink33.ready
		.sink33_valid         (rsp_demux_033_src0_valid),                                                           //          .valid
		.sink33_channel       (rsp_demux_033_src0_channel),                                                         //          .channel
		.sink33_data          (rsp_demux_033_src0_data),                                                            //          .data
		.sink33_startofpacket (rsp_demux_033_src0_startofpacket),                                                   //          .startofpacket
		.sink33_endofpacket   (rsp_demux_033_src0_endofpacket),                                                     //          .endofpacket
		.sink34_ready         (rsp_demux_034_src0_ready),                                                           //    sink34.ready
		.sink34_valid         (rsp_demux_034_src0_valid),                                                           //          .valid
		.sink34_channel       (rsp_demux_034_src0_channel),                                                         //          .channel
		.sink34_data          (rsp_demux_034_src0_data),                                                            //          .data
		.sink34_startofpacket (rsp_demux_034_src0_startofpacket),                                                   //          .startofpacket
		.sink34_endofpacket   (rsp_demux_034_src0_endofpacket),                                                     //          .endofpacket
		.sink35_ready         (rsp_demux_035_src0_ready),                                                           //    sink35.ready
		.sink35_valid         (rsp_demux_035_src0_valid),                                                           //          .valid
		.sink35_channel       (rsp_demux_035_src0_channel),                                                         //          .channel
		.sink35_data          (rsp_demux_035_src0_data),                                                            //          .data
		.sink35_startofpacket (rsp_demux_035_src0_startofpacket),                                                   //          .startofpacket
		.sink35_endofpacket   (rsp_demux_035_src0_endofpacket),                                                     //          .endofpacket
		.sink36_ready         (rsp_demux_036_src0_ready),                                                           //    sink36.ready
		.sink36_valid         (rsp_demux_036_src0_valid),                                                           //          .valid
		.sink36_channel       (rsp_demux_036_src0_channel),                                                         //          .channel
		.sink36_data          (rsp_demux_036_src0_data),                                                            //          .data
		.sink36_startofpacket (rsp_demux_036_src0_startofpacket),                                                   //          .startofpacket
		.sink36_endofpacket   (rsp_demux_036_src0_endofpacket),                                                     //          .endofpacket
		.sink37_ready         (rsp_demux_037_src0_ready),                                                           //    sink37.ready
		.sink37_valid         (rsp_demux_037_src0_valid),                                                           //          .valid
		.sink37_channel       (rsp_demux_037_src0_channel),                                                         //          .channel
		.sink37_data          (rsp_demux_037_src0_data),                                                            //          .data
		.sink37_startofpacket (rsp_demux_037_src0_startofpacket),                                                   //          .startofpacket
		.sink37_endofpacket   (rsp_demux_037_src0_endofpacket),                                                     //          .endofpacket
		.sink38_ready         (rsp_demux_038_src0_ready),                                                           //    sink38.ready
		.sink38_valid         (rsp_demux_038_src0_valid),                                                           //          .valid
		.sink38_channel       (rsp_demux_038_src0_channel),                                                         //          .channel
		.sink38_data          (rsp_demux_038_src0_data),                                                            //          .data
		.sink38_startofpacket (rsp_demux_038_src0_startofpacket),                                                   //          .startofpacket
		.sink38_endofpacket   (rsp_demux_038_src0_endofpacket),                                                     //          .endofpacket
		.sink39_ready         (rsp_demux_039_src0_ready),                                                           //    sink39.ready
		.sink39_valid         (rsp_demux_039_src0_valid),                                                           //          .valid
		.sink39_channel       (rsp_demux_039_src0_channel),                                                         //          .channel
		.sink39_data          (rsp_demux_039_src0_data),                                                            //          .data
		.sink39_startofpacket (rsp_demux_039_src0_startofpacket),                                                   //          .startofpacket
		.sink39_endofpacket   (rsp_demux_039_src0_endofpacket),                                                     //          .endofpacket
		.sink40_ready         (rsp_demux_040_src0_ready),                                                           //    sink40.ready
		.sink40_valid         (rsp_demux_040_src0_valid),                                                           //          .valid
		.sink40_channel       (rsp_demux_040_src0_channel),                                                         //          .channel
		.sink40_data          (rsp_demux_040_src0_data),                                                            //          .data
		.sink40_startofpacket (rsp_demux_040_src0_startofpacket),                                                   //          .startofpacket
		.sink40_endofpacket   (rsp_demux_040_src0_endofpacket),                                                     //          .endofpacket
		.sink41_ready         (rsp_demux_041_src0_ready),                                                           //    sink41.ready
		.sink41_valid         (rsp_demux_041_src0_valid),                                                           //          .valid
		.sink41_channel       (rsp_demux_041_src0_channel),                                                         //          .channel
		.sink41_data          (rsp_demux_041_src0_data),                                                            //          .data
		.sink41_startofpacket (rsp_demux_041_src0_startofpacket),                                                   //          .startofpacket
		.sink41_endofpacket   (rsp_demux_041_src0_endofpacket),                                                     //          .endofpacket
		.sink42_ready         (rsp_demux_042_src0_ready),                                                           //    sink42.ready
		.sink42_valid         (rsp_demux_042_src0_valid),                                                           //          .valid
		.sink42_channel       (rsp_demux_042_src0_channel),                                                         //          .channel
		.sink42_data          (rsp_demux_042_src0_data),                                                            //          .data
		.sink42_startofpacket (rsp_demux_042_src0_startofpacket),                                                   //          .startofpacket
		.sink42_endofpacket   (rsp_demux_042_src0_endofpacket),                                                     //          .endofpacket
		.sink43_ready         (rsp_demux_043_src0_ready),                                                           //    sink43.ready
		.sink43_valid         (rsp_demux_043_src0_valid),                                                           //          .valid
		.sink43_channel       (rsp_demux_043_src0_channel),                                                         //          .channel
		.sink43_data          (rsp_demux_043_src0_data),                                                            //          .data
		.sink43_startofpacket (rsp_demux_043_src0_startofpacket),                                                   //          .startofpacket
		.sink43_endofpacket   (rsp_demux_043_src0_endofpacket),                                                     //          .endofpacket
		.sink44_ready         (rsp_demux_044_src0_ready),                                                           //    sink44.ready
		.sink44_valid         (rsp_demux_044_src0_valid),                                                           //          .valid
		.sink44_channel       (rsp_demux_044_src0_channel),                                                         //          .channel
		.sink44_data          (rsp_demux_044_src0_data),                                                            //          .data
		.sink44_startofpacket (rsp_demux_044_src0_startofpacket),                                                   //          .startofpacket
		.sink44_endofpacket   (rsp_demux_044_src0_endofpacket),                                                     //          .endofpacket
		.sink45_ready         (rsp_demux_045_src0_ready),                                                           //    sink45.ready
		.sink45_valid         (rsp_demux_045_src0_valid),                                                           //          .valid
		.sink45_channel       (rsp_demux_045_src0_channel),                                                         //          .channel
		.sink45_data          (rsp_demux_045_src0_data),                                                            //          .data
		.sink45_startofpacket (rsp_demux_045_src0_startofpacket),                                                   //          .startofpacket
		.sink45_endofpacket   (rsp_demux_045_src0_endofpacket),                                                     //          .endofpacket
		.sink46_ready         (rsp_demux_046_src0_ready),                                                           //    sink46.ready
		.sink46_valid         (rsp_demux_046_src0_valid),                                                           //          .valid
		.sink46_channel       (rsp_demux_046_src0_channel),                                                         //          .channel
		.sink46_data          (rsp_demux_046_src0_data),                                                            //          .data
		.sink46_startofpacket (rsp_demux_046_src0_startofpacket),                                                   //          .startofpacket
		.sink46_endofpacket   (rsp_demux_046_src0_endofpacket),                                                     //          .endofpacket
		.sink47_ready         (rsp_demux_047_src0_ready),                                                           //    sink47.ready
		.sink47_valid         (rsp_demux_047_src0_valid),                                                           //          .valid
		.sink47_channel       (rsp_demux_047_src0_channel),                                                         //          .channel
		.sink47_data          (rsp_demux_047_src0_data),                                                            //          .data
		.sink47_startofpacket (rsp_demux_047_src0_startofpacket),                                                   //          .startofpacket
		.sink47_endofpacket   (rsp_demux_047_src0_endofpacket),                                                     //          .endofpacket
		.sink48_ready         (rsp_demux_048_src0_ready),                                                           //    sink48.ready
		.sink48_valid         (rsp_demux_048_src0_valid),                                                           //          .valid
		.sink48_channel       (rsp_demux_048_src0_channel),                                                         //          .channel
		.sink48_data          (rsp_demux_048_src0_data),                                                            //          .data
		.sink48_startofpacket (rsp_demux_048_src0_startofpacket),                                                   //          .startofpacket
		.sink48_endofpacket   (rsp_demux_048_src0_endofpacket),                                                     //          .endofpacket
		.sink49_ready         (rsp_demux_049_src0_ready),                                                           //    sink49.ready
		.sink49_valid         (rsp_demux_049_src0_valid),                                                           //          .valid
		.sink49_channel       (rsp_demux_049_src0_channel),                                                         //          .channel
		.sink49_data          (rsp_demux_049_src0_data),                                                            //          .data
		.sink49_startofpacket (rsp_demux_049_src0_startofpacket),                                                   //          .startofpacket
		.sink49_endofpacket   (rsp_demux_049_src0_endofpacket),                                                     //          .endofpacket
		.sink50_ready         (rsp_demux_050_src0_ready),                                                           //    sink50.ready
		.sink50_valid         (rsp_demux_050_src0_valid),                                                           //          .valid
		.sink50_channel       (rsp_demux_050_src0_channel),                                                         //          .channel
		.sink50_data          (rsp_demux_050_src0_data),                                                            //          .data
		.sink50_startofpacket (rsp_demux_050_src0_startofpacket),                                                   //          .startofpacket
		.sink50_endofpacket   (rsp_demux_050_src0_endofpacket)                                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                            //          .valid
		.src_data             (rsp_mux_003_src_data),                                             //          .data
		.src_channel          (rsp_mux_003_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_001_src1_ready),                                         //     sink0.ready
		.sink0_valid          (rsp_demux_001_src1_valid),                                         //          .valid
		.sink0_channel        (rsp_demux_001_src1_channel),                                       //          .channel
		.sink0_data           (rsp_demux_001_src1_data),                                          //          .data
		.sink0_startofpacket  (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src1_endofpacket),                                   //          .endofpacket
		.sink1_ready          (rsp_demux_002_src1_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_002_src1_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_002_src1_channel),                                       //          .channel
		.sink1_data           (rsp_demux_002_src1_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_002_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src1_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_004_src1_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_004_src1_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_004_src1_channel),                                       //          .channel
		.sink2_data           (rsp_demux_004_src1_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_004_src1_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src1_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_005_src1_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_005_src1_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_005_src1_channel),                                       //          .channel
		.sink3_data           (rsp_demux_005_src1_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_005_src1_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src1_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_006_src1_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_006_src1_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_006_src1_channel),                                       //          .channel
		.sink4_data           (rsp_demux_006_src1_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src1_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_007_src1_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_007_src1_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_007_src1_channel),                                       //          .channel
		.sink5_data           (rsp_demux_007_src1_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src1_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_008_src1_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_008_src1_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_008_src1_channel),                                       //          .channel
		.sink6_data           (rsp_demux_008_src1_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_008_src1_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src1_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_009_src1_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_009_src1_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_009_src1_channel),                                       //          .channel
		.sink7_data           (rsp_demux_009_src1_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_009_src1_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src1_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_010_src1_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_010_src1_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_010_src1_channel),                                       //          .channel
		.sink8_data           (rsp_demux_010_src1_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_010_src1_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src1_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_011_src1_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_011_src1_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_011_src1_channel),                                       //          .channel
		.sink9_data           (rsp_demux_011_src1_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_011_src1_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src1_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_012_src1_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_012_src1_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_012_src1_channel),                                       //          .channel
		.sink10_data          (rsp_demux_012_src1_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_012_src1_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src1_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_013_src1_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_013_src1_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_013_src1_channel),                                       //          .channel
		.sink11_data          (rsp_demux_013_src1_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_013_src1_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src1_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_014_src1_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_014_src1_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_014_src1_channel),                                       //          .channel
		.sink12_data          (rsp_demux_014_src1_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_014_src1_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src1_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_015_src1_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_015_src1_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_015_src1_channel),                                       //          .channel
		.sink13_data          (rsp_demux_015_src1_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_015_src1_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src1_endofpacket),                                   //          .endofpacket
		.sink14_ready         (rsp_demux_016_src1_ready),                                         //    sink14.ready
		.sink14_valid         (rsp_demux_016_src1_valid),                                         //          .valid
		.sink14_channel       (rsp_demux_016_src1_channel),                                       //          .channel
		.sink14_data          (rsp_demux_016_src1_data),                                          //          .data
		.sink14_startofpacket (rsp_demux_016_src1_startofpacket),                                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src1_endofpacket),                                   //          .endofpacket
		.sink15_ready         (rsp_demux_017_src1_ready),                                         //    sink15.ready
		.sink15_valid         (rsp_demux_017_src1_valid),                                         //          .valid
		.sink15_channel       (rsp_demux_017_src1_channel),                                       //          .channel
		.sink15_data          (rsp_demux_017_src1_data),                                          //          .data
		.sink15_startofpacket (rsp_demux_017_src1_startofpacket),                                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src1_endofpacket),                                   //          .endofpacket
		.sink16_ready         (rsp_demux_018_src1_ready),                                         //    sink16.ready
		.sink16_valid         (rsp_demux_018_src1_valid),                                         //          .valid
		.sink16_channel       (rsp_demux_018_src1_channel),                                       //          .channel
		.sink16_data          (rsp_demux_018_src1_data),                                          //          .data
		.sink16_startofpacket (rsp_demux_018_src1_startofpacket),                                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src1_endofpacket),                                   //          .endofpacket
		.sink17_ready         (rsp_demux_019_src1_ready),                                         //    sink17.ready
		.sink17_valid         (rsp_demux_019_src1_valid),                                         //          .valid
		.sink17_channel       (rsp_demux_019_src1_channel),                                       //          .channel
		.sink17_data          (rsp_demux_019_src1_data),                                          //          .data
		.sink17_startofpacket (rsp_demux_019_src1_startofpacket),                                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src1_endofpacket),                                   //          .endofpacket
		.sink18_ready         (rsp_demux_020_src1_ready),                                         //    sink18.ready
		.sink18_valid         (rsp_demux_020_src1_valid),                                         //          .valid
		.sink18_channel       (rsp_demux_020_src1_channel),                                       //          .channel
		.sink18_data          (rsp_demux_020_src1_data),                                          //          .data
		.sink18_startofpacket (rsp_demux_020_src1_startofpacket),                                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_020_src1_endofpacket),                                   //          .endofpacket
		.sink19_ready         (rsp_demux_021_src1_ready),                                         //    sink19.ready
		.sink19_valid         (rsp_demux_021_src1_valid),                                         //          .valid
		.sink19_channel       (rsp_demux_021_src1_channel),                                       //          .channel
		.sink19_data          (rsp_demux_021_src1_data),                                          //          .data
		.sink19_startofpacket (rsp_demux_021_src1_startofpacket),                                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_021_src1_endofpacket),                                   //          .endofpacket
		.sink20_ready         (rsp_demux_022_src1_ready),                                         //    sink20.ready
		.sink20_valid         (rsp_demux_022_src1_valid),                                         //          .valid
		.sink20_channel       (rsp_demux_022_src1_channel),                                       //          .channel
		.sink20_data          (rsp_demux_022_src1_data),                                          //          .data
		.sink20_startofpacket (rsp_demux_022_src1_startofpacket),                                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_022_src1_endofpacket),                                   //          .endofpacket
		.sink21_ready         (rsp_demux_023_src1_ready),                                         //    sink21.ready
		.sink21_valid         (rsp_demux_023_src1_valid),                                         //          .valid
		.sink21_channel       (rsp_demux_023_src1_channel),                                       //          .channel
		.sink21_data          (rsp_demux_023_src1_data),                                          //          .data
		.sink21_startofpacket (rsp_demux_023_src1_startofpacket),                                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_023_src1_endofpacket),                                   //          .endofpacket
		.sink22_ready         (rsp_demux_024_src1_ready),                                         //    sink22.ready
		.sink22_valid         (rsp_demux_024_src1_valid),                                         //          .valid
		.sink22_channel       (rsp_demux_024_src1_channel),                                       //          .channel
		.sink22_data          (rsp_demux_024_src1_data),                                          //          .data
		.sink22_startofpacket (rsp_demux_024_src1_startofpacket),                                 //          .startofpacket
		.sink22_endofpacket   (rsp_demux_024_src1_endofpacket),                                   //          .endofpacket
		.sink23_ready         (rsp_demux_025_src1_ready),                                         //    sink23.ready
		.sink23_valid         (rsp_demux_025_src1_valid),                                         //          .valid
		.sink23_channel       (rsp_demux_025_src1_channel),                                       //          .channel
		.sink23_data          (rsp_demux_025_src1_data),                                          //          .data
		.sink23_startofpacket (rsp_demux_025_src1_startofpacket),                                 //          .startofpacket
		.sink23_endofpacket   (rsp_demux_025_src1_endofpacket),                                   //          .endofpacket
		.sink24_ready         (rsp_demux_026_src1_ready),                                         //    sink24.ready
		.sink24_valid         (rsp_demux_026_src1_valid),                                         //          .valid
		.sink24_channel       (rsp_demux_026_src1_channel),                                       //          .channel
		.sink24_data          (rsp_demux_026_src1_data),                                          //          .data
		.sink24_startofpacket (rsp_demux_026_src1_startofpacket),                                 //          .startofpacket
		.sink24_endofpacket   (rsp_demux_026_src1_endofpacket),                                   //          .endofpacket
		.sink25_ready         (rsp_demux_027_src1_ready),                                         //    sink25.ready
		.sink25_valid         (rsp_demux_027_src1_valid),                                         //          .valid
		.sink25_channel       (rsp_demux_027_src1_channel),                                       //          .channel
		.sink25_data          (rsp_demux_027_src1_data),                                          //          .data
		.sink25_startofpacket (rsp_demux_027_src1_startofpacket),                                 //          .startofpacket
		.sink25_endofpacket   (rsp_demux_027_src1_endofpacket),                                   //          .endofpacket
		.sink26_ready         (rsp_demux_028_src1_ready),                                         //    sink26.ready
		.sink26_valid         (rsp_demux_028_src1_valid),                                         //          .valid
		.sink26_channel       (rsp_demux_028_src1_channel),                                       //          .channel
		.sink26_data          (rsp_demux_028_src1_data),                                          //          .data
		.sink26_startofpacket (rsp_demux_028_src1_startofpacket),                                 //          .startofpacket
		.sink26_endofpacket   (rsp_demux_028_src1_endofpacket),                                   //          .endofpacket
		.sink27_ready         (rsp_demux_029_src1_ready),                                         //    sink27.ready
		.sink27_valid         (rsp_demux_029_src1_valid),                                         //          .valid
		.sink27_channel       (rsp_demux_029_src1_channel),                                       //          .channel
		.sink27_data          (rsp_demux_029_src1_data),                                          //          .data
		.sink27_startofpacket (rsp_demux_029_src1_startofpacket),                                 //          .startofpacket
		.sink27_endofpacket   (rsp_demux_029_src1_endofpacket),                                   //          .endofpacket
		.sink28_ready         (rsp_demux_030_src1_ready),                                         //    sink28.ready
		.sink28_valid         (rsp_demux_030_src1_valid),                                         //          .valid
		.sink28_channel       (rsp_demux_030_src1_channel),                                       //          .channel
		.sink28_data          (rsp_demux_030_src1_data),                                          //          .data
		.sink28_startofpacket (rsp_demux_030_src1_startofpacket),                                 //          .startofpacket
		.sink28_endofpacket   (rsp_demux_030_src1_endofpacket),                                   //          .endofpacket
		.sink29_ready         (rsp_demux_031_src1_ready),                                         //    sink29.ready
		.sink29_valid         (rsp_demux_031_src1_valid),                                         //          .valid
		.sink29_channel       (rsp_demux_031_src1_channel),                                       //          .channel
		.sink29_data          (rsp_demux_031_src1_data),                                          //          .data
		.sink29_startofpacket (rsp_demux_031_src1_startofpacket),                                 //          .startofpacket
		.sink29_endofpacket   (rsp_demux_031_src1_endofpacket),                                   //          .endofpacket
		.sink30_ready         (rsp_demux_032_src1_ready),                                         //    sink30.ready
		.sink30_valid         (rsp_demux_032_src1_valid),                                         //          .valid
		.sink30_channel       (rsp_demux_032_src1_channel),                                       //          .channel
		.sink30_data          (rsp_demux_032_src1_data),                                          //          .data
		.sink30_startofpacket (rsp_demux_032_src1_startofpacket),                                 //          .startofpacket
		.sink30_endofpacket   (rsp_demux_032_src1_endofpacket),                                   //          .endofpacket
		.sink31_ready         (rsp_demux_033_src1_ready),                                         //    sink31.ready
		.sink31_valid         (rsp_demux_033_src1_valid),                                         //          .valid
		.sink31_channel       (rsp_demux_033_src1_channel),                                       //          .channel
		.sink31_data          (rsp_demux_033_src1_data),                                          //          .data
		.sink31_startofpacket (rsp_demux_033_src1_startofpacket),                                 //          .startofpacket
		.sink31_endofpacket   (rsp_demux_033_src1_endofpacket),                                   //          .endofpacket
		.sink32_ready         (rsp_demux_034_src1_ready),                                         //    sink32.ready
		.sink32_valid         (rsp_demux_034_src1_valid),                                         //          .valid
		.sink32_channel       (rsp_demux_034_src1_channel),                                       //          .channel
		.sink32_data          (rsp_demux_034_src1_data),                                          //          .data
		.sink32_startofpacket (rsp_demux_034_src1_startofpacket),                                 //          .startofpacket
		.sink32_endofpacket   (rsp_demux_034_src1_endofpacket),                                   //          .endofpacket
		.sink33_ready         (rsp_demux_035_src1_ready),                                         //    sink33.ready
		.sink33_valid         (rsp_demux_035_src1_valid),                                         //          .valid
		.sink33_channel       (rsp_demux_035_src1_channel),                                       //          .channel
		.sink33_data          (rsp_demux_035_src1_data),                                          //          .data
		.sink33_startofpacket (rsp_demux_035_src1_startofpacket),                                 //          .startofpacket
		.sink33_endofpacket   (rsp_demux_035_src1_endofpacket),                                   //          .endofpacket
		.sink34_ready         (rsp_demux_036_src1_ready),                                         //    sink34.ready
		.sink34_valid         (rsp_demux_036_src1_valid),                                         //          .valid
		.sink34_channel       (rsp_demux_036_src1_channel),                                       //          .channel
		.sink34_data          (rsp_demux_036_src1_data),                                          //          .data
		.sink34_startofpacket (rsp_demux_036_src1_startofpacket),                                 //          .startofpacket
		.sink34_endofpacket   (rsp_demux_036_src1_endofpacket),                                   //          .endofpacket
		.sink35_ready         (rsp_demux_037_src1_ready),                                         //    sink35.ready
		.sink35_valid         (rsp_demux_037_src1_valid),                                         //          .valid
		.sink35_channel       (rsp_demux_037_src1_channel),                                       //          .channel
		.sink35_data          (rsp_demux_037_src1_data),                                          //          .data
		.sink35_startofpacket (rsp_demux_037_src1_startofpacket),                                 //          .startofpacket
		.sink35_endofpacket   (rsp_demux_037_src1_endofpacket),                                   //          .endofpacket
		.sink36_ready         (rsp_demux_038_src1_ready),                                         //    sink36.ready
		.sink36_valid         (rsp_demux_038_src1_valid),                                         //          .valid
		.sink36_channel       (rsp_demux_038_src1_channel),                                       //          .channel
		.sink36_data          (rsp_demux_038_src1_data),                                          //          .data
		.sink36_startofpacket (rsp_demux_038_src1_startofpacket),                                 //          .startofpacket
		.sink36_endofpacket   (rsp_demux_038_src1_endofpacket),                                   //          .endofpacket
		.sink37_ready         (rsp_demux_039_src1_ready),                                         //    sink37.ready
		.sink37_valid         (rsp_demux_039_src1_valid),                                         //          .valid
		.sink37_channel       (rsp_demux_039_src1_channel),                                       //          .channel
		.sink37_data          (rsp_demux_039_src1_data),                                          //          .data
		.sink37_startofpacket (rsp_demux_039_src1_startofpacket),                                 //          .startofpacket
		.sink37_endofpacket   (rsp_demux_039_src1_endofpacket),                                   //          .endofpacket
		.sink38_ready         (rsp_demux_040_src1_ready),                                         //    sink38.ready
		.sink38_valid         (rsp_demux_040_src1_valid),                                         //          .valid
		.sink38_channel       (rsp_demux_040_src1_channel),                                       //          .channel
		.sink38_data          (rsp_demux_040_src1_data),                                          //          .data
		.sink38_startofpacket (rsp_demux_040_src1_startofpacket),                                 //          .startofpacket
		.sink38_endofpacket   (rsp_demux_040_src1_endofpacket),                                   //          .endofpacket
		.sink39_ready         (rsp_demux_041_src1_ready),                                         //    sink39.ready
		.sink39_valid         (rsp_demux_041_src1_valid),                                         //          .valid
		.sink39_channel       (rsp_demux_041_src1_channel),                                       //          .channel
		.sink39_data          (rsp_demux_041_src1_data),                                          //          .data
		.sink39_startofpacket (rsp_demux_041_src1_startofpacket),                                 //          .startofpacket
		.sink39_endofpacket   (rsp_demux_041_src1_endofpacket),                                   //          .endofpacket
		.sink40_ready         (rsp_demux_042_src1_ready),                                         //    sink40.ready
		.sink40_valid         (rsp_demux_042_src1_valid),                                         //          .valid
		.sink40_channel       (rsp_demux_042_src1_channel),                                       //          .channel
		.sink40_data          (rsp_demux_042_src1_data),                                          //          .data
		.sink40_startofpacket (rsp_demux_042_src1_startofpacket),                                 //          .startofpacket
		.sink40_endofpacket   (rsp_demux_042_src1_endofpacket),                                   //          .endofpacket
		.sink41_ready         (rsp_demux_043_src1_ready),                                         //    sink41.ready
		.sink41_valid         (rsp_demux_043_src1_valid),                                         //          .valid
		.sink41_channel       (rsp_demux_043_src1_channel),                                       //          .channel
		.sink41_data          (rsp_demux_043_src1_data),                                          //          .data
		.sink41_startofpacket (rsp_demux_043_src1_startofpacket),                                 //          .startofpacket
		.sink41_endofpacket   (rsp_demux_043_src1_endofpacket),                                   //          .endofpacket
		.sink42_ready         (rsp_demux_044_src1_ready),                                         //    sink42.ready
		.sink42_valid         (rsp_demux_044_src1_valid),                                         //          .valid
		.sink42_channel       (rsp_demux_044_src1_channel),                                       //          .channel
		.sink42_data          (rsp_demux_044_src1_data),                                          //          .data
		.sink42_startofpacket (rsp_demux_044_src1_startofpacket),                                 //          .startofpacket
		.sink42_endofpacket   (rsp_demux_044_src1_endofpacket),                                   //          .endofpacket
		.sink43_ready         (rsp_demux_045_src1_ready),                                         //    sink43.ready
		.sink43_valid         (rsp_demux_045_src1_valid),                                         //          .valid
		.sink43_channel       (rsp_demux_045_src1_channel),                                       //          .channel
		.sink43_data          (rsp_demux_045_src1_data),                                          //          .data
		.sink43_startofpacket (rsp_demux_045_src1_startofpacket),                                 //          .startofpacket
		.sink43_endofpacket   (rsp_demux_045_src1_endofpacket),                                   //          .endofpacket
		.sink44_ready         (rsp_demux_046_src1_ready),                                         //    sink44.ready
		.sink44_valid         (rsp_demux_046_src1_valid),                                         //          .valid
		.sink44_channel       (rsp_demux_046_src1_channel),                                       //          .channel
		.sink44_data          (rsp_demux_046_src1_data),                                          //          .data
		.sink44_startofpacket (rsp_demux_046_src1_startofpacket),                                 //          .startofpacket
		.sink44_endofpacket   (rsp_demux_046_src1_endofpacket),                                   //          .endofpacket
		.sink45_ready         (rsp_demux_047_src1_ready),                                         //    sink45.ready
		.sink45_valid         (rsp_demux_047_src1_valid),                                         //          .valid
		.sink45_channel       (rsp_demux_047_src1_channel),                                       //          .channel
		.sink45_data          (rsp_demux_047_src1_data),                                          //          .data
		.sink45_startofpacket (rsp_demux_047_src1_startofpacket),                                 //          .startofpacket
		.sink45_endofpacket   (rsp_demux_047_src1_endofpacket),                                   //          .endofpacket
		.sink46_ready         (rsp_demux_048_src1_ready),                                         //    sink46.ready
		.sink46_valid         (rsp_demux_048_src1_valid),                                         //          .valid
		.sink46_channel       (rsp_demux_048_src1_channel),                                       //          .channel
		.sink46_data          (rsp_demux_048_src1_data),                                          //          .data
		.sink46_startofpacket (rsp_demux_048_src1_startofpacket),                                 //          .startofpacket
		.sink46_endofpacket   (rsp_demux_048_src1_endofpacket),                                   //          .endofpacket
		.sink47_ready         (rsp_demux_049_src1_ready),                                         //    sink47.ready
		.sink47_valid         (rsp_demux_049_src1_valid),                                         //          .valid
		.sink47_channel       (rsp_demux_049_src1_channel),                                       //          .channel
		.sink47_data          (rsp_demux_049_src1_data),                                          //          .data
		.sink47_startofpacket (rsp_demux_049_src1_startofpacket),                                 //          .startofpacket
		.sink47_endofpacket   (rsp_demux_049_src1_endofpacket),                                   //          .endofpacket
		.sink48_ready         (rsp_demux_050_src1_ready),                                         //    sink48.ready
		.sink48_valid         (rsp_demux_050_src1_valid),                                         //          .valid
		.sink48_channel       (rsp_demux_050_src1_channel),                                       //          .channel
		.sink48_data          (rsp_demux_050_src1_data),                                          //          .data
		.sink48_startofpacket (rsp_demux_050_src1_startofpacket),                                 //          .startofpacket
		.sink48_endofpacket   (rsp_demux_050_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_004_src_valid),                                            //          .valid
		.src_data             (rsp_mux_004_src_data),                                             //          .data
		.src_channel          (rsp_mux_004_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (rsp_demux_001_src2_ready),                                         //     sink0.ready
		.sink0_valid          (rsp_demux_001_src2_valid),                                         //          .valid
		.sink0_channel        (rsp_demux_001_src2_channel),                                       //          .channel
		.sink0_data           (rsp_demux_001_src2_data),                                          //          .data
		.sink0_startofpacket  (rsp_demux_001_src2_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_001_src2_endofpacket),                                   //          .endofpacket
		.sink1_ready          (rsp_demux_002_src2_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_002_src2_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_002_src2_channel),                                       //          .channel
		.sink1_data           (rsp_demux_002_src2_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_002_src2_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src2_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_004_src2_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_004_src2_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_004_src2_channel),                                       //          .channel
		.sink2_data           (rsp_demux_004_src2_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_004_src2_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_004_src2_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_005_src2_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_005_src2_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_005_src2_channel),                                       //          .channel
		.sink3_data           (rsp_demux_005_src2_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_005_src2_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_005_src2_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_006_src2_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_006_src2_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_006_src2_channel),                                       //          .channel
		.sink4_data           (rsp_demux_006_src2_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_006_src2_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_006_src2_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_007_src2_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_007_src2_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_007_src2_channel),                                       //          .channel
		.sink5_data           (rsp_demux_007_src2_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_007_src2_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_007_src2_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_008_src2_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_008_src2_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_008_src2_channel),                                       //          .channel
		.sink6_data           (rsp_demux_008_src2_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_008_src2_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_008_src2_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_009_src2_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_009_src2_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_009_src2_channel),                                       //          .channel
		.sink7_data           (rsp_demux_009_src2_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_009_src2_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src2_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_010_src2_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_010_src2_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_010_src2_channel),                                       //          .channel
		.sink8_data           (rsp_demux_010_src2_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_010_src2_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src2_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_011_src2_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_011_src2_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_011_src2_channel),                                       //          .channel
		.sink9_data           (rsp_demux_011_src2_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_011_src2_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src2_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_012_src2_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_012_src2_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_012_src2_channel),                                       //          .channel
		.sink10_data          (rsp_demux_012_src2_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_012_src2_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src2_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_013_src2_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_013_src2_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_013_src2_channel),                                       //          .channel
		.sink11_data          (rsp_demux_013_src2_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_013_src2_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src2_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_014_src2_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_014_src2_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_014_src2_channel),                                       //          .channel
		.sink12_data          (rsp_demux_014_src2_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_014_src2_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src2_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_015_src2_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_015_src2_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_015_src2_channel),                                       //          .channel
		.sink13_data          (rsp_demux_015_src2_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_015_src2_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_015_src2_endofpacket),                                   //          .endofpacket
		.sink14_ready         (rsp_demux_016_src2_ready),                                         //    sink14.ready
		.sink14_valid         (rsp_demux_016_src2_valid),                                         //          .valid
		.sink14_channel       (rsp_demux_016_src2_channel),                                       //          .channel
		.sink14_data          (rsp_demux_016_src2_data),                                          //          .data
		.sink14_startofpacket (rsp_demux_016_src2_startofpacket),                                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src2_endofpacket),                                   //          .endofpacket
		.sink15_ready         (rsp_demux_017_src2_ready),                                         //    sink15.ready
		.sink15_valid         (rsp_demux_017_src2_valid),                                         //          .valid
		.sink15_channel       (rsp_demux_017_src2_channel),                                       //          .channel
		.sink15_data          (rsp_demux_017_src2_data),                                          //          .data
		.sink15_startofpacket (rsp_demux_017_src2_startofpacket),                                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src2_endofpacket),                                   //          .endofpacket
		.sink16_ready         (rsp_demux_018_src2_ready),                                         //    sink16.ready
		.sink16_valid         (rsp_demux_018_src2_valid),                                         //          .valid
		.sink16_channel       (rsp_demux_018_src2_channel),                                       //          .channel
		.sink16_data          (rsp_demux_018_src2_data),                                          //          .data
		.sink16_startofpacket (rsp_demux_018_src2_startofpacket),                                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src2_endofpacket),                                   //          .endofpacket
		.sink17_ready         (rsp_demux_019_src2_ready),                                         //    sink17.ready
		.sink17_valid         (rsp_demux_019_src2_valid),                                         //          .valid
		.sink17_channel       (rsp_demux_019_src2_channel),                                       //          .channel
		.sink17_data          (rsp_demux_019_src2_data),                                          //          .data
		.sink17_startofpacket (rsp_demux_019_src2_startofpacket),                                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src2_endofpacket),                                   //          .endofpacket
		.sink18_ready         (rsp_demux_020_src2_ready),                                         //    sink18.ready
		.sink18_valid         (rsp_demux_020_src2_valid),                                         //          .valid
		.sink18_channel       (rsp_demux_020_src2_channel),                                       //          .channel
		.sink18_data          (rsp_demux_020_src2_data),                                          //          .data
		.sink18_startofpacket (rsp_demux_020_src2_startofpacket),                                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_020_src2_endofpacket),                                   //          .endofpacket
		.sink19_ready         (rsp_demux_021_src2_ready),                                         //    sink19.ready
		.sink19_valid         (rsp_demux_021_src2_valid),                                         //          .valid
		.sink19_channel       (rsp_demux_021_src2_channel),                                       //          .channel
		.sink19_data          (rsp_demux_021_src2_data),                                          //          .data
		.sink19_startofpacket (rsp_demux_021_src2_startofpacket),                                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_021_src2_endofpacket),                                   //          .endofpacket
		.sink20_ready         (rsp_demux_022_src2_ready),                                         //    sink20.ready
		.sink20_valid         (rsp_demux_022_src2_valid),                                         //          .valid
		.sink20_channel       (rsp_demux_022_src2_channel),                                       //          .channel
		.sink20_data          (rsp_demux_022_src2_data),                                          //          .data
		.sink20_startofpacket (rsp_demux_022_src2_startofpacket),                                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_022_src2_endofpacket),                                   //          .endofpacket
		.sink21_ready         (rsp_demux_023_src2_ready),                                         //    sink21.ready
		.sink21_valid         (rsp_demux_023_src2_valid),                                         //          .valid
		.sink21_channel       (rsp_demux_023_src2_channel),                                       //          .channel
		.sink21_data          (rsp_demux_023_src2_data),                                          //          .data
		.sink21_startofpacket (rsp_demux_023_src2_startofpacket),                                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_023_src2_endofpacket),                                   //          .endofpacket
		.sink22_ready         (rsp_demux_024_src2_ready),                                         //    sink22.ready
		.sink22_valid         (rsp_demux_024_src2_valid),                                         //          .valid
		.sink22_channel       (rsp_demux_024_src2_channel),                                       //          .channel
		.sink22_data          (rsp_demux_024_src2_data),                                          //          .data
		.sink22_startofpacket (rsp_demux_024_src2_startofpacket),                                 //          .startofpacket
		.sink22_endofpacket   (rsp_demux_024_src2_endofpacket),                                   //          .endofpacket
		.sink23_ready         (rsp_demux_025_src2_ready),                                         //    sink23.ready
		.sink23_valid         (rsp_demux_025_src2_valid),                                         //          .valid
		.sink23_channel       (rsp_demux_025_src2_channel),                                       //          .channel
		.sink23_data          (rsp_demux_025_src2_data),                                          //          .data
		.sink23_startofpacket (rsp_demux_025_src2_startofpacket),                                 //          .startofpacket
		.sink23_endofpacket   (rsp_demux_025_src2_endofpacket),                                   //          .endofpacket
		.sink24_ready         (rsp_demux_026_src2_ready),                                         //    sink24.ready
		.sink24_valid         (rsp_demux_026_src2_valid),                                         //          .valid
		.sink24_channel       (rsp_demux_026_src2_channel),                                       //          .channel
		.sink24_data          (rsp_demux_026_src2_data),                                          //          .data
		.sink24_startofpacket (rsp_demux_026_src2_startofpacket),                                 //          .startofpacket
		.sink24_endofpacket   (rsp_demux_026_src2_endofpacket),                                   //          .endofpacket
		.sink25_ready         (rsp_demux_027_src2_ready),                                         //    sink25.ready
		.sink25_valid         (rsp_demux_027_src2_valid),                                         //          .valid
		.sink25_channel       (rsp_demux_027_src2_channel),                                       //          .channel
		.sink25_data          (rsp_demux_027_src2_data),                                          //          .data
		.sink25_startofpacket (rsp_demux_027_src2_startofpacket),                                 //          .startofpacket
		.sink25_endofpacket   (rsp_demux_027_src2_endofpacket),                                   //          .endofpacket
		.sink26_ready         (rsp_demux_028_src2_ready),                                         //    sink26.ready
		.sink26_valid         (rsp_demux_028_src2_valid),                                         //          .valid
		.sink26_channel       (rsp_demux_028_src2_channel),                                       //          .channel
		.sink26_data          (rsp_demux_028_src2_data),                                          //          .data
		.sink26_startofpacket (rsp_demux_028_src2_startofpacket),                                 //          .startofpacket
		.sink26_endofpacket   (rsp_demux_028_src2_endofpacket),                                   //          .endofpacket
		.sink27_ready         (rsp_demux_029_src2_ready),                                         //    sink27.ready
		.sink27_valid         (rsp_demux_029_src2_valid),                                         //          .valid
		.sink27_channel       (rsp_demux_029_src2_channel),                                       //          .channel
		.sink27_data          (rsp_demux_029_src2_data),                                          //          .data
		.sink27_startofpacket (rsp_demux_029_src2_startofpacket),                                 //          .startofpacket
		.sink27_endofpacket   (rsp_demux_029_src2_endofpacket),                                   //          .endofpacket
		.sink28_ready         (rsp_demux_030_src2_ready),                                         //    sink28.ready
		.sink28_valid         (rsp_demux_030_src2_valid),                                         //          .valid
		.sink28_channel       (rsp_demux_030_src2_channel),                                       //          .channel
		.sink28_data          (rsp_demux_030_src2_data),                                          //          .data
		.sink28_startofpacket (rsp_demux_030_src2_startofpacket),                                 //          .startofpacket
		.sink28_endofpacket   (rsp_demux_030_src2_endofpacket),                                   //          .endofpacket
		.sink29_ready         (rsp_demux_031_src2_ready),                                         //    sink29.ready
		.sink29_valid         (rsp_demux_031_src2_valid),                                         //          .valid
		.sink29_channel       (rsp_demux_031_src2_channel),                                       //          .channel
		.sink29_data          (rsp_demux_031_src2_data),                                          //          .data
		.sink29_startofpacket (rsp_demux_031_src2_startofpacket),                                 //          .startofpacket
		.sink29_endofpacket   (rsp_demux_031_src2_endofpacket),                                   //          .endofpacket
		.sink30_ready         (rsp_demux_032_src2_ready),                                         //    sink30.ready
		.sink30_valid         (rsp_demux_032_src2_valid),                                         //          .valid
		.sink30_channel       (rsp_demux_032_src2_channel),                                       //          .channel
		.sink30_data          (rsp_demux_032_src2_data),                                          //          .data
		.sink30_startofpacket (rsp_demux_032_src2_startofpacket),                                 //          .startofpacket
		.sink30_endofpacket   (rsp_demux_032_src2_endofpacket),                                   //          .endofpacket
		.sink31_ready         (rsp_demux_033_src2_ready),                                         //    sink31.ready
		.sink31_valid         (rsp_demux_033_src2_valid),                                         //          .valid
		.sink31_channel       (rsp_demux_033_src2_channel),                                       //          .channel
		.sink31_data          (rsp_demux_033_src2_data),                                          //          .data
		.sink31_startofpacket (rsp_demux_033_src2_startofpacket),                                 //          .startofpacket
		.sink31_endofpacket   (rsp_demux_033_src2_endofpacket),                                   //          .endofpacket
		.sink32_ready         (rsp_demux_034_src2_ready),                                         //    sink32.ready
		.sink32_valid         (rsp_demux_034_src2_valid),                                         //          .valid
		.sink32_channel       (rsp_demux_034_src2_channel),                                       //          .channel
		.sink32_data          (rsp_demux_034_src2_data),                                          //          .data
		.sink32_startofpacket (rsp_demux_034_src2_startofpacket),                                 //          .startofpacket
		.sink32_endofpacket   (rsp_demux_034_src2_endofpacket),                                   //          .endofpacket
		.sink33_ready         (rsp_demux_035_src2_ready),                                         //    sink33.ready
		.sink33_valid         (rsp_demux_035_src2_valid),                                         //          .valid
		.sink33_channel       (rsp_demux_035_src2_channel),                                       //          .channel
		.sink33_data          (rsp_demux_035_src2_data),                                          //          .data
		.sink33_startofpacket (rsp_demux_035_src2_startofpacket),                                 //          .startofpacket
		.sink33_endofpacket   (rsp_demux_035_src2_endofpacket),                                   //          .endofpacket
		.sink34_ready         (rsp_demux_036_src2_ready),                                         //    sink34.ready
		.sink34_valid         (rsp_demux_036_src2_valid),                                         //          .valid
		.sink34_channel       (rsp_demux_036_src2_channel),                                       //          .channel
		.sink34_data          (rsp_demux_036_src2_data),                                          //          .data
		.sink34_startofpacket (rsp_demux_036_src2_startofpacket),                                 //          .startofpacket
		.sink34_endofpacket   (rsp_demux_036_src2_endofpacket),                                   //          .endofpacket
		.sink35_ready         (rsp_demux_037_src2_ready),                                         //    sink35.ready
		.sink35_valid         (rsp_demux_037_src2_valid),                                         //          .valid
		.sink35_channel       (rsp_demux_037_src2_channel),                                       //          .channel
		.sink35_data          (rsp_demux_037_src2_data),                                          //          .data
		.sink35_startofpacket (rsp_demux_037_src2_startofpacket),                                 //          .startofpacket
		.sink35_endofpacket   (rsp_demux_037_src2_endofpacket),                                   //          .endofpacket
		.sink36_ready         (rsp_demux_038_src2_ready),                                         //    sink36.ready
		.sink36_valid         (rsp_demux_038_src2_valid),                                         //          .valid
		.sink36_channel       (rsp_demux_038_src2_channel),                                       //          .channel
		.sink36_data          (rsp_demux_038_src2_data),                                          //          .data
		.sink36_startofpacket (rsp_demux_038_src2_startofpacket),                                 //          .startofpacket
		.sink36_endofpacket   (rsp_demux_038_src2_endofpacket),                                   //          .endofpacket
		.sink37_ready         (rsp_demux_039_src2_ready),                                         //    sink37.ready
		.sink37_valid         (rsp_demux_039_src2_valid),                                         //          .valid
		.sink37_channel       (rsp_demux_039_src2_channel),                                       //          .channel
		.sink37_data          (rsp_demux_039_src2_data),                                          //          .data
		.sink37_startofpacket (rsp_demux_039_src2_startofpacket),                                 //          .startofpacket
		.sink37_endofpacket   (rsp_demux_039_src2_endofpacket),                                   //          .endofpacket
		.sink38_ready         (rsp_demux_040_src2_ready),                                         //    sink38.ready
		.sink38_valid         (rsp_demux_040_src2_valid),                                         //          .valid
		.sink38_channel       (rsp_demux_040_src2_channel),                                       //          .channel
		.sink38_data          (rsp_demux_040_src2_data),                                          //          .data
		.sink38_startofpacket (rsp_demux_040_src2_startofpacket),                                 //          .startofpacket
		.sink38_endofpacket   (rsp_demux_040_src2_endofpacket),                                   //          .endofpacket
		.sink39_ready         (rsp_demux_041_src2_ready),                                         //    sink39.ready
		.sink39_valid         (rsp_demux_041_src2_valid),                                         //          .valid
		.sink39_channel       (rsp_demux_041_src2_channel),                                       //          .channel
		.sink39_data          (rsp_demux_041_src2_data),                                          //          .data
		.sink39_startofpacket (rsp_demux_041_src2_startofpacket),                                 //          .startofpacket
		.sink39_endofpacket   (rsp_demux_041_src2_endofpacket),                                   //          .endofpacket
		.sink40_ready         (rsp_demux_042_src2_ready),                                         //    sink40.ready
		.sink40_valid         (rsp_demux_042_src2_valid),                                         //          .valid
		.sink40_channel       (rsp_demux_042_src2_channel),                                       //          .channel
		.sink40_data          (rsp_demux_042_src2_data),                                          //          .data
		.sink40_startofpacket (rsp_demux_042_src2_startofpacket),                                 //          .startofpacket
		.sink40_endofpacket   (rsp_demux_042_src2_endofpacket),                                   //          .endofpacket
		.sink41_ready         (rsp_demux_043_src2_ready),                                         //    sink41.ready
		.sink41_valid         (rsp_demux_043_src2_valid),                                         //          .valid
		.sink41_channel       (rsp_demux_043_src2_channel),                                       //          .channel
		.sink41_data          (rsp_demux_043_src2_data),                                          //          .data
		.sink41_startofpacket (rsp_demux_043_src2_startofpacket),                                 //          .startofpacket
		.sink41_endofpacket   (rsp_demux_043_src2_endofpacket),                                   //          .endofpacket
		.sink42_ready         (rsp_demux_044_src2_ready),                                         //    sink42.ready
		.sink42_valid         (rsp_demux_044_src2_valid),                                         //          .valid
		.sink42_channel       (rsp_demux_044_src2_channel),                                       //          .channel
		.sink42_data          (rsp_demux_044_src2_data),                                          //          .data
		.sink42_startofpacket (rsp_demux_044_src2_startofpacket),                                 //          .startofpacket
		.sink42_endofpacket   (rsp_demux_044_src2_endofpacket),                                   //          .endofpacket
		.sink43_ready         (rsp_demux_045_src2_ready),                                         //    sink43.ready
		.sink43_valid         (rsp_demux_045_src2_valid),                                         //          .valid
		.sink43_channel       (rsp_demux_045_src2_channel),                                       //          .channel
		.sink43_data          (rsp_demux_045_src2_data),                                          //          .data
		.sink43_startofpacket (rsp_demux_045_src2_startofpacket),                                 //          .startofpacket
		.sink43_endofpacket   (rsp_demux_045_src2_endofpacket),                                   //          .endofpacket
		.sink44_ready         (rsp_demux_046_src2_ready),                                         //    sink44.ready
		.sink44_valid         (rsp_demux_046_src2_valid),                                         //          .valid
		.sink44_channel       (rsp_demux_046_src2_channel),                                       //          .channel
		.sink44_data          (rsp_demux_046_src2_data),                                          //          .data
		.sink44_startofpacket (rsp_demux_046_src2_startofpacket),                                 //          .startofpacket
		.sink44_endofpacket   (rsp_demux_046_src2_endofpacket),                                   //          .endofpacket
		.sink45_ready         (rsp_demux_047_src2_ready),                                         //    sink45.ready
		.sink45_valid         (rsp_demux_047_src2_valid),                                         //          .valid
		.sink45_channel       (rsp_demux_047_src2_channel),                                       //          .channel
		.sink45_data          (rsp_demux_047_src2_data),                                          //          .data
		.sink45_startofpacket (rsp_demux_047_src2_startofpacket),                                 //          .startofpacket
		.sink45_endofpacket   (rsp_demux_047_src2_endofpacket),                                   //          .endofpacket
		.sink46_ready         (rsp_demux_048_src2_ready),                                         //    sink46.ready
		.sink46_valid         (rsp_demux_048_src2_valid),                                         //          .valid
		.sink46_channel       (rsp_demux_048_src2_channel),                                       //          .channel
		.sink46_data          (rsp_demux_048_src2_data),                                          //          .data
		.sink46_startofpacket (rsp_demux_048_src2_startofpacket),                                 //          .startofpacket
		.sink46_endofpacket   (rsp_demux_048_src2_endofpacket),                                   //          .endofpacket
		.sink47_ready         (rsp_demux_049_src2_ready),                                         //    sink47.ready
		.sink47_valid         (rsp_demux_049_src2_valid),                                         //          .valid
		.sink47_channel       (rsp_demux_049_src2_channel),                                       //          .channel
		.sink47_data          (rsp_demux_049_src2_data),                                          //          .data
		.sink47_startofpacket (rsp_demux_049_src2_startofpacket),                                 //          .startofpacket
		.sink47_endofpacket   (rsp_demux_049_src2_endofpacket),                                   //          .endofpacket
		.sink48_ready         (rsp_demux_050_src2_ready),                                         //    sink48.ready
		.sink48_valid         (rsp_demux_050_src2_valid),                                         //          .valid
		.sink48_channel       (rsp_demux_050_src2_channel),                                       //          .channel
		.sink48_data          (rsp_demux_050_src2_data),                                          //          .data
		.sink48_startofpacket (rsp_demux_050_src2_startofpacket),                                 //          .startofpacket
		.sink48_endofpacket   (rsp_demux_050_src2_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (131),
		.IN_PKT_RESPONSE_STATUS_L      (130),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (132),
		.IN_PKT_ORI_BURST_SIZE_H       (134),
		.IN_ST_DATA_W                  (135),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (167),
		.OUT_PKT_RESPONSE_STATUS_L     (166),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (168),
		.OUT_PKT_ORI_BURST_SIZE_H      (170),
		.OUT_ST_DATA_W                 (171),
		.ST_CHANNEL_W                  (51),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                           //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                            //          .data
		.out_endofpacket      (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fpga_only_master_master_to_onchip_memory2_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (167),
		.IN_PKT_RESPONSE_STATUS_L      (166),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (168),
		.IN_PKT_ORI_BURST_SIZE_H       (170),
		.IN_ST_DATA_W                  (171),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (131),
		.OUT_PKT_RESPONSE_STATUS_L     (130),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (132),
		.OUT_PKT_ORI_BURST_SIZE_H      (134),
		.OUT_ST_DATA_W                 (135),
		.ST_CHANNEL_W                  (51),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                               //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                             //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                         //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                               //          .ready
		.in_data              (rsp_demux_src2_data),                                                                //          .data
		.out_endofpacket      (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_0_s1_to_fpga_only_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_0_adc_slave_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (adc_0_adc_slave_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (adc_0_adc_slave_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (intr_capturer_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dipsw_pio_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (dipsw_pio_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (dipsw_pio_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_pio_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (button_pio_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (button_pio_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio_pio_0_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (gpio_pio_0_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (gpio_pio_0_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_0_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_0_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_0_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_reset_pio_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (quad_reset_pio_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (quad_reset_pio_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_0_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_0_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_0_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_0_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_0_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_0_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_1_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_1_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_1_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_2_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_2_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_2_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_3_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_3_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_3_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_4_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_4_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_4_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_5_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_5_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_5_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_6_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_6_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_6_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_7_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_7_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_7_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_1_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_1_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_1_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_2_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_2_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_2_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_3_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_3_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_3_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_4_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_4_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_4_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_5_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_5_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_5_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_6_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_6_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_6_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_error_pio_7_s1_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (pid_error_pio_7_s1_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (pid_error_pio_7_s1_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_1_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_1_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_1_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_2_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_2_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_2_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_3_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_3_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_3_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_5_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_5_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_5_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_6_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_6_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_6_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_7_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_7_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_7_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_correction_pio_4_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (pid_correction_pio_4_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (pid_correction_pio_4_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pid_values_pio_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (pid_values_pio_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (pid_values_pio_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_0_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_0_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_0_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio_pio_1_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (gpio_pio_1_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (gpio_pio_1_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_037 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_1_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_1_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_1_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_037_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_037_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_037_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_037_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_038 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_2_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_2_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_2_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_038_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_038_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_038_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_038_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_039 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_3_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_3_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_3_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_039_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_039_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_039_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_039_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_040 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_4_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_4_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_4_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_040_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_040_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_040_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_040_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_041 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_5_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_5_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_5_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_041_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_041_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_041_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_041_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_042 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_6_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_6_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_6_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_042_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_042_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_042_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_042_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_043 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_pio_7_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (pwm_pio_7_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (pwm_pio_7_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_043_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_043_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_043_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_043_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_044 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (limit_pio_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (limit_pio_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (limit_pio_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_044_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_044_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_044_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_044_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_045 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_8_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_8_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_8_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_045_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_045_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_045_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_045_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_046 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_9_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (quad_pio_9_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (quad_pio_9_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_046_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_046_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_046_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_046_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_047 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_10_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (quad_pio_10_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (quad_pio_10_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_047_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_047_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_047_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_047_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_048 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (quad_pio_11_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (quad_pio_11_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (quad_pio_11_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_048_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_048_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_048_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_048_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_049 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (heartbeat_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (heartbeat_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (heartbeat_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_049_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_049_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_049_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_049_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_050 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_0_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (e_stop_s1_agent_rdata_fifo_out_data),                 //     in_0.data
		.in_0_valid     (e_stop_s1_agent_rdata_fifo_out_valid),                //         .valid
		.in_0_ready     (e_stop_s1_agent_rdata_fifo_out_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_050_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_050_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_050_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_050_out_0_error)                    //         .error
	);

endmodule
